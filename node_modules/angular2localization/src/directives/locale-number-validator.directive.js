/**
 * ANGULAR 2 LOCALIZATION
 * An Angular 2 library to translate messages, dates and numbers.
 * Written by Roberto Simonetti.
 * MIT license.
 * https://github.com/robisim74/angular2localization
 */
System.register(['@angular/core', '@angular/common', '../services/locale.service', '../services/locale-parser'], function(exports_1, context_1) {
    "use strict";
    var __moduleName = context_1 && context_1.id;
    var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = (this && this.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1, common_1, locale_service_1, locale_parser_1;
    var LocaleNumberValidator;
    /**
     * Function that takes a Control and returns either null when it’s valid, or and error object if it’s not.
     *
     * @param locale The reference to LocaleService
     * @param digits The format of the number
     * @param MIN_VALUE The minimum value for the number
     * @param MAX_VALUE The maximum value for the number
     * @return An error object: 'format', 'minValue' or 'maxValue'; null in case the value is valid
     */
    function validateLocaleNumber(locale, digits, MIN_VALUE, MAX_VALUE) {
        if (MIN_VALUE === void 0) { MIN_VALUE = Number.MIN_VALUE; }
        if (MAX_VALUE === void 0) { MAX_VALUE = Number.MAX_VALUE; }
        var defaultLocale;
        var NUMBER_REGEXP;
        return function (c) {
            // Checks if the default locale has changed. 
            if (defaultLocale != locale.getDefaultLocale()) {
                NUMBER_REGEXP = locale_parser_1.LocaleParser.NumberRegExpFactory(locale.getDefaultLocale(), digits);
                defaultLocale = locale.getDefaultLocale();
            }
            // Checks the format.
            if (NUMBER_REGEXP.test(c.value)) {
                var parsedValue;
                parsedValue = locale_parser_1.LocaleParser.Number(c.value, locale.getDefaultLocale());
                if (parsedValue < MIN_VALUE) {
                    return { minValue: false };
                }
                else if (parsedValue > MAX_VALUE) {
                    return { maxValue: false };
                }
                return null; // The number is valid.
            }
            else {
                return { format: false };
            }
        };
    }
    exports_1("validateLocaleNumber", validateLocaleNumber);
    return {
        setters:[
            function (core_1_1) {
                core_1 = core_1_1;
            },
            function (common_1_1) {
                common_1 = common_1_1;
            },
            function (locale_service_1_1) {
                locale_service_1 = locale_service_1_1;
            },
            function (locale_parser_1_1) {
                locale_parser_1 = locale_parser_1_1;
            }],
        execute: function() {
            LocaleNumberValidator = (function () {
                function LocaleNumberValidator(locale) {
                    this.locale = locale;
                    this.MIN_VALUE = Number.MIN_VALUE;
                    this.MAX_VALUE = Number.MAX_VALUE;
                }
                Object.defineProperty(LocaleNumberValidator.prototype, "minValue", {
                    set: function (value) {
                        this.MIN_VALUE = value || this.MIN_VALUE;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(LocaleNumberValidator.prototype, "maxValue", {
                    set: function (value) {
                        this.MAX_VALUE = value || this.MAX_VALUE;
                    },
                    enumerable: true,
                    configurable: true
                });
                LocaleNumberValidator.prototype.ngOnInit = function () {
                    this.validator = validateLocaleNumber(this.locale, this.digits, this.MIN_VALUE, this.MAX_VALUE);
                };
                LocaleNumberValidator.prototype.validate = function (c) {
                    return this.validator(c);
                };
                __decorate([
                    core_1.Input('validateLocaleNumber'), 
                    __metadata('design:type', String)
                ], LocaleNumberValidator.prototype, "digits", void 0);
                __decorate([
                    core_1.Input(), 
                    __metadata('design:type', Number), 
                    __metadata('design:paramtypes', [Number])
                ], LocaleNumberValidator.prototype, "minValue", null);
                __decorate([
                    core_1.Input(), 
                    __metadata('design:type', Number), 
                    __metadata('design:paramtypes', [Number])
                ], LocaleNumberValidator.prototype, "maxValue", null);
                LocaleNumberValidator = __decorate([
                    core_1.Directive({
                        selector: '[validateLocaleNumber][ngControl],[validateLocaleNumber][ngModel],[validateLocaleNumber][ngFormControl]',
                        providers: [
                            core_1.provide(common_1.NG_VALIDATORS, {
                                useExisting: core_1.forwardRef(function () { return LocaleNumberValidator; }),
                                multi: true
                            })
                        ]
                    }), 
                    __metadata('design:paramtypes', [locale_service_1.LocaleService])
                ], LocaleNumberValidator);
                return LocaleNumberValidator;
            }());
            exports_1("LocaleNumberValidator", LocaleNumberValidator);
        }
    }
});
