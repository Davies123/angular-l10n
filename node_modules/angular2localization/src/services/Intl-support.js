/**
 * ANGULAR 2 LOCALIZATION
 * An Angular 2 library to translate messages, dates and numbers.
 * Written by Roberto Simonetti.
 * MIT license.
 * https://github.com/robisim74/angular2localization
 */
"use strict";
/**
 * IntlSupport class.
 *
 * @author Roberto Simonetti
 */
var IntlSupport = (function () {
    function IntlSupport() {
    }
    /**
     * Support for dates.
     *
     * @param defaultLocale The default locale
     * @return True if the browser supports locales for dates, otherwise false.
     */
    IntlSupport.DateTimeFormat = function (defaultLocale) {
        // Checking for support.
        try {
            new Intl.DateTimeFormat(defaultLocale).format(new Date());
        }
        catch (e) {
            return false;
        }
        return true;
    };
    /**
     * Support for numbers.
     *
     * @param defaultLocale The default locale
     * @return True if the browser supports locales for numbers, otherwise false.
     */
    IntlSupport.NumberFormat = function (defaultLocale) {
        // Checking for support.
        try {
            var n = 0;
            new Intl.NumberFormat(defaultLocale).format(n);
        }
        catch (e) {
            return false;
        }
        return true;
    };
    /**
     * Support for Collator.
     *
     * @param lang The current language code
     * @return True if the browser supports Collator, otherwise false.
     */
    IntlSupport.Collator = function (lang) {
        // Checking for support.
        try {
            new Intl.Collator(lang);
        }
        catch (e) {
            return false;
        }
        return true;
    };
    return IntlSupport;
}());
exports.IntlSupport = IntlSupport;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSW50bC1zdXBwb3J0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiSW50bC1zdXBwb3J0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRzs7QUFFSDs7OztHQUlHO0FBQ0g7SUFFSTtJQUFnQixDQUFDO0lBRWpCOzs7OztPQUtHO0lBQ0ksMEJBQWMsR0FBckIsVUFBc0IsYUFBcUI7UUFFdkMsd0JBQXdCO1FBQ3hCLElBQUksQ0FBQztZQUVELElBQUksSUFBSSxDQUFDLGNBQWMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBRTlELENBQUU7UUFBQSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBRVQsTUFBTSxDQUFDLEtBQUssQ0FBQztRQUVqQixDQUFDO1FBRUQsTUFBTSxDQUFDLElBQUksQ0FBQztJQUVoQixDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSSx3QkFBWSxHQUFuQixVQUFvQixhQUFxQjtRQUVyQyx3QkFBd0I7UUFDeEIsSUFBSSxDQUFDO1lBRUQsSUFBSSxDQUFDLEdBQVcsQ0FBQyxDQUFDO1lBRWxCLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxhQUFhLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFbkQsQ0FBRTtRQUFBLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFFVCxNQUFNLENBQUMsS0FBSyxDQUFDO1FBRWpCLENBQUM7UUFFRCxNQUFNLENBQUMsSUFBSSxDQUFDO0lBRWhCLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNJLG9CQUFRLEdBQWYsVUFBZ0IsSUFBWTtRQUV4Qix3QkFBd0I7UUFDeEIsSUFBSSxDQUFDO1lBRUQsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRTVCLENBQUU7UUFBQSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBRVQsTUFBTSxDQUFDLEtBQUssQ0FBQztRQUVqQixDQUFDO1FBRUQsTUFBTSxDQUFDLElBQUksQ0FBQztJQUVoQixDQUFDO0lBRUwsa0JBQUM7QUFBRCxDQUFDLEFBM0VELElBMkVDO0FBM0VZLG1CQUFXLGNBMkV2QixDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIEFOR1VMQVIgMiBMT0NBTElaQVRJT05cclxuICogQW4gQW5ndWxhciAyIGxpYnJhcnkgdG8gdHJhbnNsYXRlIG1lc3NhZ2VzLCBkYXRlcyBhbmQgbnVtYmVycy5cclxuICogV3JpdHRlbiBieSBSb2JlcnRvIFNpbW9uZXR0aS5cclxuICogTUlUIGxpY2Vuc2UuXHJcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9yb2Jpc2ltNzQvYW5ndWxhcjJsb2NhbGl6YXRpb25cclxuICovXHJcblxyXG4vKipcclxuICogSW50bFN1cHBvcnQgY2xhc3MuXHJcbiAqIFxyXG4gKiBAYXV0aG9yIFJvYmVydG8gU2ltb25ldHRpXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgSW50bFN1cHBvcnQge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkgeyB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTdXBwb3J0IGZvciBkYXRlcy5cclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIGRlZmF1bHRMb2NhbGUgVGhlIGRlZmF1bHQgbG9jYWxlXHJcbiAgICAgKiBAcmV0dXJuIFRydWUgaWYgdGhlIGJyb3dzZXIgc3VwcG9ydHMgbG9jYWxlcyBmb3IgZGF0ZXMsIG90aGVyd2lzZSBmYWxzZS5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIERhdGVUaW1lRm9ybWF0KGRlZmF1bHRMb2NhbGU6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG5cclxuICAgICAgICAvLyBDaGVja2luZyBmb3Igc3VwcG9ydC5cclxuICAgICAgICB0cnkge1xyXG5cclxuICAgICAgICAgICAgbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQoZGVmYXVsdExvY2FsZSkuZm9ybWF0KG5ldyBEYXRlKCkpO1xyXG5cclxuICAgICAgICB9IGNhdGNoIChlKSB7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU3VwcG9ydCBmb3IgbnVtYmVycy5cclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIGRlZmF1bHRMb2NhbGUgVGhlIGRlZmF1bHQgbG9jYWxlXHJcbiAgICAgKiBAcmV0dXJuIFRydWUgaWYgdGhlIGJyb3dzZXIgc3VwcG9ydHMgbG9jYWxlcyBmb3IgbnVtYmVycywgb3RoZXJ3aXNlIGZhbHNlLlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgTnVtYmVyRm9ybWF0KGRlZmF1bHRMb2NhbGU6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG5cclxuICAgICAgICAvLyBDaGVja2luZyBmb3Igc3VwcG9ydC5cclxuICAgICAgICB0cnkge1xyXG5cclxuICAgICAgICAgICAgdmFyIG46IG51bWJlciA9IDA7XHJcblxyXG4gICAgICAgICAgICBuZXcgSW50bC5OdW1iZXJGb3JtYXQoZGVmYXVsdExvY2FsZSkuZm9ybWF0KG4pO1xyXG5cclxuICAgICAgICB9IGNhdGNoIChlKSB7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU3VwcG9ydCBmb3IgQ29sbGF0b3IuXHJcbiAgICAgKiBcclxuICAgICAqIEBwYXJhbSBsYW5nIFRoZSBjdXJyZW50IGxhbmd1YWdlIGNvZGVcclxuICAgICAqIEByZXR1cm4gVHJ1ZSBpZiB0aGUgYnJvd3NlciBzdXBwb3J0cyBDb2xsYXRvciwgb3RoZXJ3aXNlIGZhbHNlLlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgQ29sbGF0b3IobGFuZzogc3RyaW5nKTogYm9vbGVhbiB7XHJcblxyXG4gICAgICAgIC8vIENoZWNraW5nIGZvciBzdXBwb3J0LlxyXG4gICAgICAgIHRyeSB7XHJcblxyXG4gICAgICAgICAgICBuZXcgSW50bC5Db2xsYXRvcihsYW5nKTtcclxuXHJcbiAgICAgICAgfSBjYXRjaCAoZSkge1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG5cclxuICAgIH1cclxuXHJcbn0iXX0=