/**
 * ANGULAR 2 LOCALIZATION
 * An Angular 2 library to translate messages, dates and numbers.
 * Written by Roberto Simonetti.
 * MIT license.
 * https://github.com/robisim74/angular2localization
 */
System.register(['@angular/core', '@angular/http', 'rxjs/Observable', 'rxjs/add/operator/map', './locale.service'], function(exports_1, context_1) {
    "use strict";
    var __moduleName = context_1 && context_1.id;
    var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = (this && this.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1, http_1, Observable_1, locale_service_1;
    var LocalizationService, ServiceState, LoadingMode;
    return {
        setters:[
            function (core_1_1) {
                core_1 = core_1_1;
            },
            function (http_1_1) {
                http_1 = http_1_1;
            },
            function (Observable_1_1) {
                Observable_1 = Observable_1_1;
            },
            function (_1) {},
            function (locale_service_1_1) {
                locale_service_1 = locale_service_1_1;
            }],
        execute: function() {
            /**
             * LocalizationService class.
             *
             * Direct loading.
             *
             * To initialize LocalizationService for the direct loading, add the following code in the body of constructor of the route component:
             *
             * var translationEN = {
             *      TITLE: 'Angular 2 Localization',
             *      CHANGE_LANGUAGE: 'Change language',
             *      ...
             * }
             * // Add a new translation here.
             *
             * // Required: adds a new translation with the given language code.
             * this.localization.addTranslation('en', translationEN);
             * // Add a new translation with the given language code here.
             * this.localization.updateTranslation(); // Need to update the translation.
             *
             * Asynchronous loading.
             *
             * To initialize LocalizationService for the asynchronous loading, add the following code in the body of constructor of the route component:
             *
             * // Required: initializes the translation provider with the given path prefix.
             * this.localization.translationProvider('./resources/locale-');
             * this.localization.updateTranslation(); // Need to update the translation.
             *
             * and create the json files of the translations such as 'locale-en.json':
             *
             * {
             *     "TITLE": "Angular 2 Localization",
             *     "CHANGE_LANGUAGE": "Change language",
             *     ...
             * }
             *
             * @author Roberto Simonetti
             */
            LocalizationService = (function () {
                function LocalizationService(http, locale) {
                    this.http = http;
                    this.locale = locale;
                    /**
                     * The translation data: {languageCode: {key: value}}.
                     */
                    this.translationData = {};
                    this.prefix = "";
                    this.loadingMode = LoadingMode.Unknown;
                    this.languageCode = "";
                    // Initializes the loading mode.
                    this.loadingMode = LoadingMode.Direct;
                    // Initializes the service state.
                    this.serviceState = ServiceState.isWaiting;
                }
                /**
                 * Direct loading: adds new translation data.
                 *
                 * @param language The two-letter code of the language for the translation data
                 * @param translation The new translation data
                 */
                LocalizationService.prototype.addTranslation = function (language, translation) {
                    // Adds the new translation data.
                    this.translationData[language] = translation;
                };
                /**
                 * Asynchronous loading: defines the translation provider.
                 *
                 * @param prefix The path prefix of the json files
                 */
                LocalizationService.prototype.translationProvider = function (prefix) {
                    this.prefix = prefix;
                    // Updates the loading mode.
                    this.loadingMode = LoadingMode.Async;
                };
                /**
                 * Gets the json data.
                 */
                LocalizationService.prototype.getTranslation = function () {
                    var _this = this;
                    // Initializes the translation data & the service state.
                    this.translationData = {};
                    this.serviceState = ServiceState.isLoading;
                    var url = this.prefix + this.locale.getCurrentLanguage() + '.json';
                    // Angular 2 Http module.
                    this.http.get(url)
                        .map(function (res) { return res.json(); })
                        .subscribe(
                    // Observer or next.
                    function (res) {
                        // Assigns the observer to the translation data.
                        _this.translationData[_this.locale.getCurrentLanguage()] = res;
                    }, 
                    // Error.
                    function (error) {
                        console.error("Localization service:", error);
                    }, 
                    // Complete.
                    function () {
                        // Updates the language code of the service.
                        _this.languageCode = _this.locale.getCurrentLanguage();
                        // Updates the service state.
                        _this.serviceState = ServiceState.isReady;
                    });
                };
                /**
                 * Translates a key.
                 *
                 * @param key The key to be translated
                 * @return The value of translation
                 */
                LocalizationService.prototype.translate = function (key) {
                    var value;
                    if (this.translationData[this.languageCode] != null) {
                        // Gets the translation by language code. 
                        var translation = this.translationData[this.languageCode];
                        // Gets the value of translation by key.   
                        value = translation[key];
                    }
                    // If the value of translation is not present, the same key is returned (see issue #1).
                    if (value == null || value == "") {
                        value = key;
                    }
                    return value;
                };
                /**
                 * Translates a key.
                 *
                 * @param key The key to be translated
                 * @return An observable of the value of translation
                 */
                LocalizationService.prototype.translateAsync = function (key) {
                    var _this = this;
                    return new Observable_1.Observable(function (observer) {
                        // Gets the value of translation for the key.
                        var value = _this.translate(key);
                        observer.next(value);
                        observer.complete();
                    });
                };
                /**
                 * Updates the language code and loads the translation data for the asynchronous loading.
                 */
                LocalizationService.prototype.updateTranslation = function () {
                    if (this.locale.getCurrentLanguage() != "" && this.locale.getCurrentLanguage() != this.languageCode) {
                        // Asynchronous loading.
                        if (this.loadingMode == LoadingMode.Async) {
                            // Updates the translation data.  
                            this.getTranslation();
                        }
                        else {
                            // Updates the language code of the service.
                            this.languageCode = this.locale.getCurrentLanguage();
                            // Updates the service state.
                            this.serviceState = ServiceState.isReady;
                        }
                    }
                };
                LocalizationService = __decorate([
                    core_1.Injectable(), 
                    __metadata('design:paramtypes', [http_1.Http, locale_service_1.LocaleService])
                ], LocalizationService);
                return LocalizationService;
            }());
            exports_1("LocalizationService", LocalizationService);
            /**
             * Defines the service state.
             */
            (function (ServiceState) {
                /**
                 * The translation data has been loaded.
                 */
                ServiceState[ServiceState["isReady"] = 0] = "isReady";
                /**
                 * The service is loading the data.
                 */
                ServiceState[ServiceState["isLoading"] = 1] = "isLoading";
                /**
                 * The service is waiting for the data.
                 */
                ServiceState[ServiceState["isWaiting"] = 2] = "isWaiting";
            })(ServiceState || (ServiceState = {}));
            exports_1("ServiceState", ServiceState);
            /**
             * Defines the loading mode.
             */
            (function (LoadingMode) {
                /**
                 * Initial state.
                 */
                LoadingMode[LoadingMode["Unknown"] = 0] = "Unknown";
                /**
                 * Direct loading.
                 */
                LoadingMode[LoadingMode["Direct"] = 1] = "Direct";
                /**
                 * Asynchronous loading.
                 */
                LoadingMode[LoadingMode["Async"] = 2] = "Async";
            })(LoadingMode || (LoadingMode = {}));
            exports_1("LoadingMode", LoadingMode);
        }
    }
});
