/**
 * ANGULAR 2 MAPS
 * Google Maps JavaScript API in the new Angular 2 applications using TypeScript
 * written by Roberto Simonetti
 * MIT license
 * https://github.com/robisim74/angular2maps
 */
System.register([], function(exports_1, context_1) {
    "use strict";
    var __moduleName = context_1 && context_1.id;
    var Locale;
    return {
        setters:[],
        execute: function() {
            /**
             * Locale superclass.
             *
             * Extend this class in components to provide the necessary methods to localization:
             *
             * export class AppComponent extends Locale {
             *
             *     constructor(public locale: LocaleService, public localization: LocalizationService) {
             *         super(locale, localization);
             *
             *     }
             *
             * }
             *
             * @author Roberto Simonetti
             */
            Locale = (function () {
                function Locale(locale, localization) {
                    this.locale = locale;
                    this.localization = localization;
                }
                Object.defineProperty(Locale.prototype, "lang", {
                    // Gets the language code for the LocalizationService.
                    get: function () {
                        return this.localization.languageCode;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Locale.prototype, "defaultLocale", {
                    // Gets the current locale.
                    get: function () {
                        return this.locale.getDefaultLocale();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Locale.prototype, "currency", {
                    // Gets the current currency.
                    get: function () {
                        return this.locale.getCurrentCurrency();
                    },
                    enumerable: true,
                    configurable: true
                });
                return Locale;
            }());
            exports_1("Locale", Locale);
        }
    }
});
