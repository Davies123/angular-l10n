/**
 * ANGULAR 2 LOCALIZATION
 * An Angular 2 library to translate messages, dates and numbers.
 * Written by Roberto Simonetti.
 * MIT license.
 * https://github.com/robisim74/angular2localization
 */
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var lang_1 = require('@angular/common/src/facade/lang');
var exceptions_1 = require('@angular/common/src/facade/exceptions');
var intl_1 = require('@angular/common/src/facade/intl');
// Services.
var locale_number_1 = require('./locale-number');
var Intl_support_1 = require('./Intl-support');
/**
 * LocaleParser class.
 *
 * @author Roberto Simonetti
 */
var LocaleParser = (function () {
    function LocaleParser() {
    }
    /**
     * Builds the regular expression for the default locale.
     *
     * @param defaultLocale The default locale
     * @param digits The digit info: {minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}
     * @return A RegExp object
     */
    LocaleParser.NumberRegExpFactory = function (defaultLocale, digits) {
        // Gets digits.
        var minInt = 1;
        var minFraction = 0;
        var maxFraction = 3;
        var re = lang_1.RegExpWrapper.create('^(\\d+)?\\.((\\d+)(\\-(\\d+))?)?$');
        if (lang_1.isPresent(digits)) {
            var parts = lang_1.RegExpWrapper.firstMatch(re, digits);
            if (lang_1.isBlank(parts)) {
                throw new exceptions_1.BaseException(digits + " is not a valid digit info for number");
            }
            if (lang_1.isPresent(parts[1])) {
                minInt = lang_1.NumberWrapper.parseIntAutoRadix(parts[1]);
            }
            if (lang_1.isPresent(parts[3])) {
                minFraction = lang_1.NumberWrapper.parseIntAutoRadix(parts[3]);
            }
            if (lang_1.isPresent(parts[5])) {
                maxFraction = lang_1.NumberWrapper.parseIntAutoRadix(parts[5]);
            }
        }
        // Converts numbers & signs to Unicode by default locale.
        var codes = new DecimalCode(defaultLocale);
        var minusSign = codes.minusSign;
        var zero = codes.numbers[0];
        var decimalSeparator = codes.decimalSeparator;
        var nine = codes.numbers[9];
        // Pattern for 1.2-2 digits: /^-?[0-9]{1,}\.[0-9]{2,2}$/
        // Unicode pattern = "^\u002d?[\u0030-\u0039]{1,}\\u002e[\u0030-\u0039]{2,2}$";
        var pattern;
        if (minFraction > 0 && maxFraction > 0) {
            pattern = "^"
                + minusSign
                + "?[" + zero + "-" + nine
                + "]{" + minInt + ",}\\"
                + decimalSeparator
                + "[" + zero + "-" + nine
                + "]{" + minFraction + "," + maxFraction
                + "}$";
        }
        else if (minFraction == 0 && maxFraction > 0) {
            // Decimal separator is optional.
            pattern = "^"
                + minusSign
                + "?[" + zero + "-" + nine
                + "]{" + minInt + ",}\\"
                + decimalSeparator
                + "?[" + zero + "-" + nine
                + "]{" + minFraction + "," + maxFraction
                + "}$";
        }
        else {
            // Integer number.
            pattern = pattern = "^"
                + minusSign
                + "?[" + zero + "-" + nine
                + "]{" + minInt + ",}$";
        }
        pattern = eval("'" + pattern + "'");
        var regExp = new RegExp(pattern);
        return regExp;
        // Wonderful, it works!
    };
    /**
     * Parses a string and returns a number by default locale.
     *
     * @param s The string to be parsed
     * @param defaultLocale The default locale
     * @return A number. If the string cannot be converted to a number, returns NaN
     */
    LocaleParser.Number = function (s, defaultLocale) {
        if (s == '' || defaultLocale == '' || defaultLocale == null)
            return null;
        var codes = new DecimalCode(defaultLocale);
        return codes.parse(s);
    };
    return LocaleParser;
}());
exports.LocaleParser = LocaleParser;
/**
 * NumberCode abstract superclass.
 *
 * Converts numbers to Unicode by locales.
 *
 * @author Roberto Simonetti
 */
var NumberCode = (function () {
    function NumberCode(defaultLocale) {
        this.defaultLocale = defaultLocale;
        /**
         * Unicode for numbers from 0 to 9.
         */
        this.numbers = [];
        for (var i = 0; i <= 9; i++) {
            this.numbers.push(this.Unicode(i.toString()));
        }
        // Checks for support for Intl.
        if (Intl_support_1.IntlSupport.NumberFormat(defaultLocale) == true) {
            // Updates Unicode for numbers by default locale.
            for (var i = 0; i <= 9; i++) {
                this.numbers[i] = this.Unicode(locale_number_1.LocaleNumber.format(defaultLocale, i, intl_1.NumberFormatStyle.Decimal, '1.0-0'));
            }
        }
    }
    NumberCode.prototype.Unicode = function (c) {
        return "\\u" + this.HexEncode(c.charCodeAt(0));
    };
    NumberCode.prototype.HexEncode = function (value) {
        var hex = value.toString(16).toUpperCase();
        // With padding.
        hex = "0000".substr(0, 4 - hex.length) + hex;
        return hex;
    };
    return NumberCode;
}());
/**
 * DecimalCode class.
 *
 * Converts numbers & signs to Unicode by locales.
 *
 * @author Roberto Simonetti
 */
var DecimalCode = (function (_super) {
    __extends(DecimalCode, _super);
    function DecimalCode(defaultLocale) {
        _super.call(this, defaultLocale);
        this.defaultLocale = defaultLocale;
        this.minusSign = this.Unicode("-");
        this.decimalSeparator = this.Unicode(".");
        // Checks for support for Intl.
        if (Intl_support_1.IntlSupport.NumberFormat(defaultLocale) == true) {
            // Updates Unicode for signs by default locale.
            var value = -0.9; // Reference value.
            var localeValue = locale_number_1.LocaleNumber.format(defaultLocale, value, intl_1.NumberFormatStyle.Decimal, '1.1-1');
            // Checks Unicode character 'RIGHT-TO-LEFT MARK' (U+200F).
            var index;
            if (this.Unicode(localeValue.charAt(0)) != "\\u200F") {
                // Left to right.
                index = 0;
            }
            else {
                // Right to left.
                index = 1;
            }
            this.minusSign = this.Unicode(localeValue.charAt(index));
            this.decimalSeparator = this.Unicode(localeValue.charAt(index + 2));
        }
    }
    DecimalCode.prototype.parse = function (s) {
        // Splits the String object into an array of characters.
        var characters = s.split('');
        // Builds the value.
        var value = "";
        for (var _i = 0, characters_1 = characters; _i < characters_1.length; _i++) {
            var char = characters_1[_i];
            var charCode = this.Unicode(char);
            // Try to look for the char code in numbers and signs.
            var index = this.numbers.indexOf(charCode);
            if (index != -1) {
                value += index;
            }
            else if (charCode == this.minusSign) {
                value += "-";
            }
            else if (charCode == this.decimalSeparator) {
                value += ".";
            }
            else {
                return NaN;
            }
        }
        return parseFloat(value);
    };
    return DecimalCode;
}(NumberCode));
//# sourceMappingURL=data:application/json;base64,