/**
 * ANGULAR 2 LOCALIZATION
 * An Angular 2 library to translate messages, dates and numbers.
 * Written by Roberto Simonetti.
 * MIT license.
 * https://github.com/robisim74/angular2localization
 */
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('@angular/core');
/**
 * LocaleService class.
 *
 * Instantiate this class only once in the route component in order to access the data of location from anywhere in the application:
 *
 * FIRST SCENARIO - Dates & numbers.
 *
 * import {LocaleService} from 'angular2localization/angular2localization';
 *
 * @Component({
 *     selector: 'app-component',
 *     ...
 *     providers: [LocaleService] // Inherited by all descendants.
 * })
 *
 * export class AppComponent {
 *
 *     constructor(public locale: LocaleService) {
 *
 *         // Required: default language (ISO 639 two-letter code) and country (ISO 3166 two-letter, uppercase code).
 *         this.locale.definePreferredLocale('en', 'US');
 *
 *         // Optional: default currency (ISO 4217 three-letter code).
 *         this.locale.definePreferredCurrency('USD');
 *
 *      }
 *
 * }
 *
 * SECOND SCENARIO - Messages.
 *
 * import {LocaleService, LocalizationService} from 'angular2localization/angular2localization';
 *
 * @Component({
 *     selector: 'app-component',
 *     ...
 *     providers: [LocaleService, LocalizationService] // Inherited by all descendants.
 * })
 *
 * export class AppComponent {
 *
 *     constructor(public locale: LocaleService, public localization: LocalizationService) {
 *
 *         // Adds a new language (ISO 639 two-letter code).
 *         this.locale.addLanguage('en');
 *         // Add a new language here.
 *
 *         // Required: default language and expiry (No days). If the expiry is omitted, the cookie becomes a session cookie.
 *         this.locale.definePreferredLanguage('en', 30);
 *
 *     }
 *
 * }
 *
 * THIRD SCENARIO - Messages, dates & numbers.
 *
 * import {LocaleService, LocalizationService} from 'angular2localization/angular2localization';
 *
 * @Component({
 *     selector: 'app-component',
 *     ...
 *     providers: [LocaleService, LocalizationService] // Inherited by all descendants.
 * })
 *
 * export class AppComponent {
 *
 *     constructor(public locale: LocaleService, public localization: LocalizationService) {
 *
 *         // Adds a new language (ISO 639 two-letter code).
 *         this.locale.addLanguage('en');
 *         // Add a new language here.
 *
 *         // Required: default language, country (ISO 3166 two-letter, uppercase code) and expiry (No days). If the expiry is omitted, the cookie becomes a session cookie.
 *         this.locale.definePreferredLocale('en', 'US', 30);
 *
 *         // Optional: default currency (ISO 4217 three-letter code).
 *         this.locale.definePreferredCurrency('USD');
 *
 *     }
 *
 * }
 *
 * Changing language.
 *
 * To change language at runtime, call the following methods:
 *
 * this.locale.setCurrentLanguage(language);
 * this.localization.updateTranslation(); // Need to update the translation.
 *
 * where 'language' is the two-letter code of the new language (ISO 639).
 *
 *
 * Changing locale.
 *
 * To change locale at runtime, call the following methods:
 *
 * this.locale.setCurrentLocale(language, country);
 * this.localization.updateTranslation(); // Need to update the translation.
 *
 * where 'language' is the two-letter code of the new language (ISO 639)
 * and 'country' is the two-letter, uppercase code of the new country (ISO 3166).
 *
 *
 * Changing currency.
 *
 * To change currency at runtime, call the following method:
 *
 * this.locale.setCurrentCurrency(currency);
 *
 * where 'currency' is the three-letter code of the new currency (ISO 4217).
 *
 * @author Roberto Simonetti
 */
var LocaleService = (function () {
    function LocaleService() {
        /**
         * Output for event current language code changed.
         */
        this.languageCodeChanged = new core_1.EventEmitter();
        /**
         * Output for event current country code changed.
         */
        this.countryCodeChanged = new core_1.EventEmitter();
        /**
         * Output for event current currency code changed.
         */
        this.currencyCodeChanged = new core_1.EventEmitter();
        /**
         * The available language codes.
         */
        this.languageCodes = [];
        /**
         * Enable/disable cookie.
         */
        this.enableCookie = false;
        this.languageCode = "";
        this.countryCode = "";
        this.currencyCode = "";
        this.defaultLocale = "";
        // Counts the reference to the service.
        LocaleService.referenceCounter++;
        // Enables the cookies only for the first instance of the service (see issue #11).
        if (LocaleService.referenceCounter == 1) {
            this.enableCookie = true;
        }
    }
    /**
     * Adds a new language.
     *
     * @param language The two-letter code of the new language
     */
    LocaleService.prototype.addLanguage = function (language) {
        this.languageCodes.push(language);
    };
    /**
     * Defines the preferred language.
     * Selects the current language of the browser if it has been added, else the default language.
     *
     * @param defaultLanguage The two-letter code of the default language
     * @param expiry Number of days on the expiry. If omitted, the cookie becomes a session cookie
     */
    LocaleService.prototype.definePreferredLanguage = function (defaultLanguage, expiry) {
        this.expiry = expiry;
        // Tries to get the cookie "locale".
        var locale = this.getCookie("locale");
        // Gets the two-letter code. 
        this.languageCode = locale.substring(0, 2);
        if (this.languageCode == "") {
            // Gets the current language of the browser or the default language.
            var browserLanguage = navigator.language || navigator.userLanguage || navigator.browserLanguage || navigator.systemLanguage;
            browserLanguage = browserLanguage.substring(0, 2); // Gets the two-letter code.    
            if (this.languageCodes.length > 0 && this.languageCodes.indexOf(browserLanguage) != -1) {
                this.languageCode = browserLanguage;
            }
            else {
                this.languageCode = defaultLanguage.toLowerCase();
            }
            // Sets the default locale.
            this.setDefaultLocale();
            if (this.languageCodes.length > 0) {
                // Sets the cookie "locale".
                this.setCookie("locale", this.defaultLocale, this.expiry);
            }
        }
        else {
            // Sets the default locale.
            this.setDefaultLocale();
        }
    };
    /**
     * Defines preferred languange and country, regardless of the browser language.
     *
     * @param defaultLanguage The two-letter code of the default language
     * @param defaultCountry The two-letter, uppercase code of the default country
     * @param expiry Number of days on the expiry. If omitted, the cookie becomes a session cookie
     */
    LocaleService.prototype.definePreferredLocale = function (defaultLanguage, defaultCountry, expiry) {
        this.expiry = expiry;
        // Tries to get the cookie "locale".
        var locale = this.getCookie("locale");
        // Gets the two-letter code. 
        this.languageCode = locale.substring(0, 2);
        if (this.languageCode == "") {
            this.languageCode = defaultLanguage.toLowerCase();
            this.countryCode = defaultCountry.toUpperCase();
            // Sets the default locale.
            this.setDefaultLocale();
            if (this.languageCodes.length > 0) {
                // Sets the cookie "locale".
                this.setCookie("locale", this.defaultLocale, this.expiry);
            }
        }
        else {
            // Gets the two-letter, uppercase code.
            this.countryCode = locale.substring(3, 5);
            if (this.countryCode == "") {
                this.countryCode = defaultCountry.toUpperCase();
                // Sets the default locale.
                this.setDefaultLocale();
                if (this.languageCodes.length > 0) {
                    // Sets the cookie "locale".
                    this.setCookie("locale", this.defaultLocale, this.expiry);
                }
            }
            else {
                // Sets the default locale.
                this.setDefaultLocale();
            }
        }
    };
    /**
     * Defines the preferred currency.
     *
     * @param defaultCurrency The three-letter code of the default currency
     */
    LocaleService.prototype.definePreferredCurrency = function (defaultCurrency) {
        // Tries to get the cookie "currency".
        this.currencyCode = this.getCookie("currency");
        if (this.currencyCode == "") {
            this.currencyCode = defaultCurrency.toUpperCase();
            if (this.languageCodes.length > 0) {
                // Sets the cookie "currency".
                this.setCookie("currency", this.currencyCode, this.expiry);
            }
        }
    };
    /**
     * Gets the current language.
     *
     * @return The two-letter code of the current language
     */
    LocaleService.prototype.getCurrentLanguage = function () {
        return this.languageCode;
    };
    /**
     * Gets the current country.
     *
     * @return The two-letter, uppercase code of the current country
     */
    LocaleService.prototype.getCurrentCountry = function () {
        return this.countryCode;
    };
    /**
     * Gets the current currency.
     *
     * @return The three-letter code of the current currency
     */
    LocaleService.prototype.getCurrentCurrency = function () {
        return this.currencyCode;
    };
    /**
     * Sets the current language.
     *
     * @param language The two-letter code of the new language
     */
    LocaleService.prototype.setCurrentLanguage = function (language) {
        language = language.toLowerCase();
        // Checks if the language has changed.
        if (this.languageCode != language) {
            // Sets the current language code.
            this.languageCode = language;
            // Sets the default locale.
            this.setDefaultLocale();
            // Sets the cookie "locale".
            this.setCookie("locale", this.defaultLocale, this.expiry);
            // Sends an event.
            this.languageCodeChanged.emit(language);
        }
    };
    /**
     * Sets the current country.
     *
     * @param country The two-letter, uppercase code of the new country
     */
    LocaleService.prototype.setCurrentCountry = function (country) {
        country = country.toUpperCase();
        // Checks if the country has changed.
        if (this.countryCode != country) {
            // Sets the current country code.
            this.countryCode = country;
            // Sets the default locale.
            this.setDefaultLocale();
            // Sets the cookie "locale".
            this.setCookie("locale", this.defaultLocale, this.expiry);
            // Sends an event.
            this.countryCodeChanged.emit(country);
        }
    };
    /**
     * Sets the current locale.
     *
     * @param language The two-letter code of the new language
     * @param country The two-letter, uppercase code of the new country
     */
    LocaleService.prototype.setCurrentLocale = function (language, country) {
        language = language.toLowerCase();
        country = country.toUpperCase();
        // Checks if language or country have changed.
        if (this.languageCode != language || this.countryCode != country) {
            // Sets the current language code.
            this.languageCode = language;
            // Sets the current country code.
            this.countryCode = country;
            // Sets the default locale.
            this.setDefaultLocale();
            // Sets the cookie "locale".
            this.setCookie("locale", this.defaultLocale, this.expiry);
            // Sends the events.
            this.countryCodeChanged.emit(country);
            this.languageCodeChanged.emit(language);
        }
    };
    /**
     * Sets the current currency.
     *
     * @param currency The three-letter code of the new currency
     */
    LocaleService.prototype.setCurrentCurrency = function (currency) {
        currency = currency.toUpperCase();
        // Checks if the currency has changed.
        if (this.currencyCode != currency) {
            // Sets the current currency code.
            this.currencyCode = currency;
            // Sets the cookie "currency".
            this.setCookie("currency", this.currencyCode, this.expiry);
            // Sends an event.
            this.currencyCodeChanged.emit(currency);
        }
    };
    /**
     * Gets the default locale.
     *
     * @return The default locale
     */
    LocaleService.prototype.getDefaultLocale = function () {
        return this.defaultLocale;
    };
    LocaleService.prototype.setDefaultLocale = function () {
        this.defaultLocale = this.languageCode;
        if (this.countryCode != "") {
            this.defaultLocale = this.defaultLocale + "-" + this.countryCode;
        }
    };
    /**
     * Sets the cookie.
     *
     * @param name The name of the cookie
     * @param value The value of the cookie
     * @param days Number of days on the expiry
     */
    LocaleService.prototype.setCookie = function (name, value, days) {
        if (days != null) {
            // Adds the expiry date (in UTC time).
            var expirationDate = new Date();
            expirationDate.setTime(expirationDate.getTime() + (days * 24 * 60 * 60 * 1000));
            var expires = "; expires=" + expirationDate.toUTCString();
        }
        else {
            // By default, the cookie is deleted when the browser is closed.
            var expires = "";
        }
        // Creates the cookie.
        if (this.enableCookie == true) {
            document.cookie = name + "=" + value + expires + "; path=/";
        }
    };
    /**
     * Gets the cookie.
     *
     * @param name The name of the cookie
     * @return The value of the cookie
     */
    LocaleService.prototype.getCookie = function (name) {
        // The text to search for.
        name += "=";
        // Splits document.cookie on semicolons into an array.
        var ca = document.cookie.split(';');
        // Loops through the ca array, and reads out each value.
        for (var i = 0; i < ca.length; i++) {
            var c = ca[i];
            while (c.charAt(0) == ' ') {
                c = c.substring(1);
            }
            // If the cookie is found, returns the value of the cookie.
            if (c.indexOf(name) == 0) {
                return c.substring(name.length, c.length);
            }
        }
        // If the cookie is not found, returns an empty string.
        return "";
    };
    /**
     * Reference counter for the service.
     */
    LocaleService.referenceCounter = 0;
    __decorate([
        core_1.Output(), 
        __metadata('design:type', Object)
    ], LocaleService.prototype, "languageCodeChanged", void 0);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', Object)
    ], LocaleService.prototype, "countryCodeChanged", void 0);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', Object)
    ], LocaleService.prototype, "currencyCodeChanged", void 0);
    LocaleService = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], LocaleService);
    return LocaleService;
}());
exports.LocaleService = LocaleService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9jYWxlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJsb2NhbGUuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7Ozs7Ozs7Ozs7O0FBRUgscUJBQStDLGVBQWUsQ0FBQyxDQUFBO0FBRS9EOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBZ0hHO0FBQ1c7SUF5RFY7UUF2REE7O1dBRUc7UUFDTyx3QkFBbUIsR0FBRyxJQUFJLG1CQUFZLEVBQVUsQ0FBQztRQUUzRDs7V0FFRztRQUNPLHVCQUFrQixHQUFHLElBQUksbUJBQVksRUFBVSxDQUFDO1FBRTFEOztXQUVHO1FBQ08sd0JBQW1CLEdBQUcsSUFBSSxtQkFBWSxFQUFVLENBQUM7UUFzQjNEOztXQUVHO1FBQ0ssa0JBQWEsR0FBa0IsRUFBRSxDQUFDO1FBWTFDOztXQUVHO1FBQ0ksaUJBQVksR0FBWSxLQUFLLENBQUM7UUFJakMsSUFBSSxDQUFDLFlBQVksR0FBRyxFQUFFLENBQUM7UUFDdkIsSUFBSSxDQUFDLFdBQVcsR0FBRyxFQUFFLENBQUM7UUFDdEIsSUFBSSxDQUFDLFlBQVksR0FBRyxFQUFFLENBQUM7UUFDdkIsSUFBSSxDQUFDLGFBQWEsR0FBRyxFQUFFLENBQUM7UUFFeEIsdUNBQXVDO1FBQ3ZDLGFBQWEsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1FBRWpDLGtGQUFrRjtRQUNsRixFQUFFLENBQUMsQ0FBQyxhQUFhLENBQUMsZ0JBQWdCLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUV0QyxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQztRQUU3QixDQUFDO0lBRUwsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxtQ0FBVyxHQUFYLFVBQVksUUFBZ0I7UUFFeEIsSUFBSSxD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QyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUM7WUFFOUMsQ0FBQztRQUNMLENBQUM7UUFFRCx1REFBdUQ7UUFDdkQsTUFBTSxDQUFDLEVBQUUsQ0FBQztJQUVkLENBQUM7SUE3WkQ7O09BRUc7SUFDWSw4QkFBZ0IsR0FBVyxDQUFDLENBQUM7SUE3QzVDO1FBQUMsYUFBTSxFQUFFOzs4REFBQTtJQUtUO1FBQUMsYUFBTSxFQUFFOzs2REFBQTtJQUtUO1FBQUMsYUFBTSxFQUFFOzs4REFBQTtJQWZiO1FBQUMsaUJBQVUsRUFBRTs7cUJBQUE7SUE4Y2Isb0JBQUM7QUFBRCxDQUFDLEFBOWNhLElBOGNiO0FBOWMwQixxQkFBYSxnQkE4Y3ZDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQU5HVUxBUiAyIExPQ0FMSVpBVElPTlxyXG4gKiBBbiBBbmd1bGFyIDIgbGlicmFyeSB0byB0cmFuc2xhdGUgbWVzc2FnZXMsIGRhdGVzIGFuZCBudW1iZXJzLlxyXG4gKiBXcml0dGVuIGJ5IFJvYmVydG8gU2ltb25ldHRpLlxyXG4gKiBNSVQgbGljZW5zZS5cclxuICogaHR0cHM6Ly9naXRodWIuY29tL3JvYmlzaW03NC9hbmd1bGFyMmxvY2FsaXphdGlvblxyXG4gKi9cclxuXHJcbmltcG9ydCB7SW5qZWN0YWJsZSwgRXZlbnRFbWl0dGVyLCBPdXRwdXR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuLyoqXHJcbiAqIExvY2FsZVNlcnZpY2UgY2xhc3MuXHJcbiAqIFxyXG4gKiBJbnN0YW50aWF0ZSB0aGlzIGNsYXNzIG9ubHkgb25jZSBpbiB0aGUgcm91dGUgY29tcG9uZW50IGluIG9yZGVyIHRvIGFjY2VzcyB0aGUgZGF0YSBvZiBsb2NhdGlvbiBmcm9tIGFueXdoZXJlIGluIHRoZSBhcHBsaWNhdGlvbjogXHJcbiAqIFxyXG4gKiBGSVJTVCBTQ0VOQVJJTyAtIERhdGVzICYgbnVtYmVycy5cclxuICogXHJcbiAqIGltcG9ydCB7TG9jYWxlU2VydmljZX0gZnJvbSAnYW5ndWxhcjJsb2NhbGl6YXRpb24vYW5ndWxhcjJsb2NhbGl6YXRpb24nO1xyXG4gKlxyXG4gKiBAQ29tcG9uZW50KHtcclxuICogICAgIHNlbGVjdG9yOiAnYXBwLWNvbXBvbmVudCcsXHJcbiAqICAgICAuLi5cclxuICogICAgIHByb3ZpZGVyczogW0xvY2FsZVNlcnZpY2VdIC8vIEluaGVyaXRlZCBieSBhbGwgZGVzY2VuZGFudHMuXHJcbiAqIH0pXHJcbiAqIFxyXG4gKiBleHBvcnQgY2xhc3MgQXBwQ29tcG9uZW50IHtcclxuICogXHJcbiAqICAgICBjb25zdHJ1Y3RvcihwdWJsaWMgbG9jYWxlOiBMb2NhbGVTZXJ2aWNlKSB7XHJcbiAqIFxyXG4gKiAgICAgICAgIC8vIFJlcXVpcmVkOiBkZWZhdWx0IGxhbmd1YWdlIChJU08gNjM5IHR3by1sZXR0ZXIgY29kZSkgYW5kIGNvdW50cnkgKElTTyAzMTY2IHR3by1sZXR0ZXIsIHVwcGVyY2FzZSBjb2RlKS5cclxuICogICAgICAgICB0aGlzLmxvY2FsZS5kZWZpbmVQcmVmZXJyZWRMb2NhbGUoJ2VuJywgJ1VTJyk7XHJcbiAqIFxyXG4gKiAgICAgICAgIC8vIE9wdGlvbmFsOiBkZWZhdWx0IGN1cnJlbmN5IChJU08gNDIxNyB0aHJlZS1sZXR0ZXIgY29kZSkuXHJcbiAqICAgICAgICAgdGhpcy5sb2NhbGUuZGVmaW5lUHJlZmVycmVkQ3VycmVuY3koJ1VTRCcpO1xyXG4gKiBcclxuICogICAgICB9XHJcbiAqIFxyXG4gKiB9XHJcbiAqIFxyXG4gKiBTRUNPTkQgU0NFTkFSSU8gLSBNZXNzYWdlcy5cclxuICogXHJcbiAqIGltcG9ydCB7TG9jYWxlU2VydmljZSwgTG9jYWxpemF0aW9uU2VydmljZX0gZnJvbSAnYW5ndWxhcjJsb2NhbGl6YXRpb24vYW5ndWxhcjJsb2NhbGl6YXRpb24nO1xyXG4gKlxyXG4gKiBAQ29tcG9uZW50KHtcclxuICogICAgIHNlbGVjdG9yOiAnYXBwLWNvbXBvbmVudCcsXHJcbiAqICAgICAuLi5cclxuICogICAgIHByb3ZpZGVyczogW0xvY2FsZVNlcnZpY2UsIExvY2FsaXphdGlvblNlcnZpY2VdIC8vIEluaGVyaXRlZCBieSBhbGwgZGVzY2VuZGFudHMuXHJcbiAqIH0pXHJcbiAqIFxyXG4gKiBleHBvcnQgY2xhc3MgQXBwQ29tcG9uZW50IHtcclxuICogXHJcbiAqICAgICBjb25zdHJ1Y3RvcihwdWJsaWMgbG9jYWxlOiBMb2NhbGVTZXJ2aWNlLCBwdWJsaWMgbG9jYWxpemF0aW9uOiBMb2NhbGl6YXRpb25TZXJ2aWNlKSB7XHJcbiAqIFxyXG4gKiAgICAgICAgIC8vIEFkZHMgYSBuZXcgbGFuZ3VhZ2UgKElTTyA2MzkgdHdvLWxldHRlciBjb2RlKS5cclxuICogICAgICAgICB0aGlzLmxvY2FsZS5hZGRMYW5ndWFnZSgnZW4nKTtcclxuICogICAgICAgICAvLyBBZGQgYSBuZXcgbGFuZ3VhZ2UgaGVyZS5cclxuICogXHJcbiAqICAgICAgICAgLy8gUmVxdWlyZWQ6IGRlZmF1bHQgbGFuZ3VhZ2UgYW5kIGV4cGlyeSAoTm8gZGF5cykuIElmIHRoZSBleHBpcnkgaXMgb21pdHRlZCwgdGhlIGNvb2tpZSBiZWNvbWVzIGEgc2Vzc2lvbiBjb29raWUuXHJcbiAqICAgICAgICAgdGhpcy5sb2NhbGUuZGVmaW5lUHJlZmVycmVkTGFuZ3VhZ2UoJ2VuJywgMzApO1xyXG4gKiAgICAgICAgICAgXHJcbiAqICAgICB9XHJcbiAqIFxyXG4gKiB9XHJcbiAqIFxyXG4gKiBUSElSRCBTQ0VOQVJJTyAtIE1lc3NhZ2VzLCBkYXRlcyAmIG51bWJlcnMuXHJcbiAqIFxyXG4gKiBpbXBvcnQge0xvY2FsZVNlcnZpY2UsIExvY2FsaXphdGlvblNlcnZpY2V9IGZyb20gJ2FuZ3VsYXIybG9jYWxpemF0aW9uL2FuZ3VsYXIybG9jYWxpemF0aW9uJztcclxuICpcclxuICogQENvbXBvbmVudCh7XHJcbiAqICAgICBzZWxlY3RvcjogJ2FwcC1jb21wb25lbnQnLFxyXG4gKiAgICAgLi4uXHJcbiAqICAgICBwcm92aWRlcnM6IFtMb2NhbGVTZXJ2aWNlLCBMb2NhbGl6YXRpb25TZXJ2aWNlXSAvLyBJbmhlcml0ZWQgYnkgYWxsIGRlc2NlbmRhbnRzLlxyXG4gKiB9KVxyXG4gKiBcclxuICogZXhwb3J0IGNsYXNzIEFwcENvbXBvbmVudCB7XHJcbiAqIFxyXG4gKiAgICAgY29uc3RydWN0b3IocHVibGljIGxvY2FsZTogTG9jYWxlU2VydmljZSwgcHVibGljIGxvY2FsaXphdGlvbjogTG9jYWxpemF0aW9uU2VydmljZSkge1xyXG4gKiBcclxuICogICAgICAgICAvLyBBZGRzIGEgbmV3IGxhbmd1YWdlIChJU08gNjM5IHR3by1sZXR0ZXIgY29kZSkuXHJcbiAqICAgICAgICAgdGhpcy5sb2NhbGUuYWRkTGFuZ3VhZ2UoJ2VuJyk7XHJcbiAqICAgICAgICAgLy8gQWRkIGEgbmV3IGxhbmd1YWdlIGhlcmUuXHJcbiAqIFxyXG4gKiAgICAgICAgIC8vIFJlcXVpcmVkOiBkZWZhdWx0IGxhbmd1YWdlLCBjb3VudHJ5IChJU08gMzE2NiB0d28tbGV0dGVyLCB1cHBlcmNhc2UgY29kZSkgYW5kIGV4cGlyeSAoTm8gZGF5cykuIElmIHRoZSBleHBpcnkgaXMgb21pdHRlZCwgdGhlIGNvb2tpZSBiZWNvbWVzIGEgc2Vzc2lvbiBjb29raWUuXHJcbiAqICAgICAgICAgdGhpcy5sb2NhbGUuZGVmaW5lUHJlZmVycmVkTG9jYWxlKCdlbicsICdVUycsIDMwKTtcclxuICogIFxyXG4gKiAgICAgICAgIC8vIE9wdGlvbmFsOiBkZWZhdWx0IGN1cnJlbmN5IChJU08gNDIxNyB0aHJlZS1sZXR0ZXIgY29kZSkuXHJcbiAqICAgICAgICAgdGhpcy5sb2NhbGUuZGVmaW5lUHJlZmVycmVkQ3VycmVuY3koJ1VTRCcpO1xyXG4gKiBcclxuICogICAgIH1cclxuICogXHJcbiAqIH1cclxuICogXHJcbiAqIENoYW5naW5nIGxhbmd1YWdlLlxyXG4gKiBcclxuICogVG8gY2hhbmdlIGxhbmd1YWdlIGF0IHJ1bnRpbWUsIGNhbGwgdGhlIGZvbGxvd2luZyBtZXRob2RzOlxyXG4gKiAgXHJcbiAqIHRoaXMubG9jYWxlLnNldEN1cnJlbnRMYW5ndWFnZShsYW5ndWFnZSk7XHJcbiAqIHRoaXMubG9jYWxpemF0aW9uLnVwZGF0ZVRyYW5zbGF0aW9uKCk7IC8vIE5lZWQgdG8gdXBkYXRlIHRoZSB0cmFuc2xhdGlvbi5cclxuICogXHJcbiAqIHdoZXJlICdsYW5ndWFnZScgaXMgdGhlIHR3by1sZXR0ZXIgY29kZSBvZiB0aGUgbmV3IGxhbmd1YWdlIChJU08gNjM5KS5cclxuICogXHJcbiAqIFxyXG4gKiBDaGFuZ2luZyBsb2NhbGUuXHJcbiAqIFxyXG4gKiBUbyBjaGFuZ2UgbG9jYWxlIGF0IHJ1bnRpbWUsIGNhbGwgdGhlIGZvbGxvd2luZyBtZXRob2RzOlxyXG4gKiAgXHJcbiAqIHRoaXMubG9jYWxlLnNldEN1cnJlbnRMb2NhbGUobGFuZ3VhZ2UsIGNvdW50cnkpO1xyXG4gKiB0aGlzLmxvY2FsaXphdGlvbi51cGRhdGVUcmFuc2xhdGlvbigpOyAvLyBOZWVkIHRvIHVwZGF0ZSB0aGUgdHJhbnNsYXRpb24uXHJcbiAqIFxyXG4gKiB3aGVyZSAnbGFuZ3VhZ2UnIGlzIHRoZSB0d28tbGV0dGVyIGNvZGUgb2YgdGhlIG5ldyBsYW5ndWFnZSAoSVNPIDYzOSlcclxuICogYW5kICdjb3VudHJ5JyBpcyB0aGUgdHdvLWxldHRlciwgdXBwZXJjYXNlIGNvZGUgb2YgdGhlIG5ldyBjb3VudHJ5IChJU08gMzE2NikuXHJcbiAqXHJcbiAqIFxyXG4gKiBDaGFuZ2luZyBjdXJyZW5jeS5cclxuICogXHJcbiAqIFRvIGNoYW5nZSBjdXJyZW5jeSBhdCBydW50aW1lLCBjYWxsIHRoZSBmb2xsb3dpbmcgbWV0aG9kOlxyXG4gKiAgXHJcbiAqIHRoaXMubG9jYWxlLnNldEN1cnJlbnRDdXJyZW5jeShjdXJyZW5jeSk7XHJcbiAqIFxyXG4gKiB3aGVyZSAnY3VycmVuY3knIGlzIHRoZSB0aHJlZS1sZXR0ZXIgY29kZSBvZiB0aGUgbmV3IGN1cnJlbmN5IChJU08gNDIxNykuXHJcbiAqIFxyXG4gKiBAYXV0aG9yIFJvYmVydG8gU2ltb25ldHRpXHJcbiAqL1xyXG5ASW5qZWN0YWJsZSgpIGV4cG9ydCBjbGFzcyBMb2NhbGVTZXJ2aWNlIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIE91dHB1dCBmb3IgZXZlbnQgY3VycmVudCBsYW5ndWFnZSBjb2RlIGNoYW5nZWQuXHJcbiAgICAgKi9cclxuICAgIEBPdXRwdXQoKSBsYW5ndWFnZUNvZGVDaGFuZ2VkID0gbmV3IEV2ZW50RW1pdHRlcjxzdHJpbmc+KCk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBPdXRwdXQgZm9yIGV2ZW50IGN1cnJlbnQgY291bnRyeSBjb2RlIGNoYW5nZWQuXHJcbiAgICAgKi9cclxuICAgIEBPdXRwdXQoKSBjb3VudHJ5Q29kZUNoYW5nZWQgPSBuZXcgRXZlbnRFbWl0dGVyPHN0cmluZz4oKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIE91dHB1dCBmb3IgZXZlbnQgY3VycmVudCBjdXJyZW5jeSBjb2RlIGNoYW5nZWQuXHJcbiAgICAgKi9cclxuICAgIEBPdXRwdXQoKSBjdXJyZW5jeUNvZGVDaGFuZ2VkID0gbmV3IEV2ZW50RW1pdHRlcjxzdHJpbmc+KCk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDdXJyZW50IGxhbmd1YWdlIGNvZGUuXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgbGFuZ3VhZ2VDb2RlOiBzdHJpbmc7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDdXJyZW50IGNvdW50cnkgY29kZS5cclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBjb3VudHJ5Q29kZTogc3RyaW5nO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3VycmVudCBjdXJyZW5jeSBjb2RlLlxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGN1cnJlbmN5Q29kZTogc3RyaW5nO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogRGVmYXVsdCBsb2NhbGUuXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgZGVmYXVsdExvY2FsZTogc3RyaW5nO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIGF2YWlsYWJsZSBsYW5ndWFnZSBjb2Rlcy5cclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBsYW5ndWFnZUNvZGVzOiBBcnJheTxzdHJpbmc+ID0gW107XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBEZWZpbmVzIHdoZW4gdGhlIGNvb2tpZSB3aWxsIGJlIHJlbW92ZWQuXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgZXhwaXJ5OiBudW1iZXI7XHJcbiAgICAgICAgXHJcbiAgICAvKipcclxuICAgICAqIFJlZmVyZW5jZSBjb3VudGVyIGZvciB0aGUgc2VydmljZS4gXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgc3RhdGljIHJlZmVyZW5jZUNvdW50ZXI6IG51bWJlciA9IDA7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBFbmFibGUvZGlzYWJsZSBjb29raWUuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBlbmFibGVDb29raWU6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuXHJcbiAgICAgICAgdGhpcy5sYW5ndWFnZUNvZGUgPSBcIlwiO1xyXG4gICAgICAgIHRoaXMuY291bnRyeUNvZGUgPSBcIlwiO1xyXG4gICAgICAgIHRoaXMuY3VycmVuY3lDb2RlID0gXCJcIjtcclxuICAgICAgICB0aGlzLmRlZmF1bHRMb2NhbGUgPSBcIlwiO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIENvdW50cyB0aGUgcmVmZXJlbmNlIHRvIHRoZSBzZXJ2aWNlLlxyXG4gICAgICAgIExvY2FsZVNlcnZpY2UucmVmZXJlbmNlQ291bnRlcisrO1xyXG5cclxuICAgICAgICAvLyBFbmFibGVzIHRoZSBjb29raWVzIG9ubHkgZm9yIHRoZSBmaXJzdCBpbnN0YW5jZSBvZiB0aGUgc2VydmljZSAoc2VlIGlzc3VlICMxMSkuXHJcbiAgICAgICAgaWYgKExvY2FsZVNlcnZpY2UucmVmZXJlbmNlQ291bnRlciA9PSAxKSB7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmVuYWJsZUNvb2tpZSA9IHRydWU7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBZGRzIGEgbmV3IGxhbmd1YWdlLlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0gbGFuZ3VhZ2UgVGhlIHR3by1sZXR0ZXIgY29kZSBvZiB0aGUgbmV3IGxhbmd1YWdlXHJcbiAgICAgKi9cclxuICAgIGFkZExhbmd1YWdlKGxhbmd1YWdlOiBzdHJpbmcpIHtcclxuXHJcbiAgICAgICAgdGhpcy5sYW5ndWFnZUNvZGVzLnB1c2gobGFuZ3VhZ2UpO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIERlZmluZXMgdGhlIHByZWZlcnJlZCBsYW5ndWFnZS4gXHJcbiAgICAgKiBTZWxlY3RzIHRoZSBjdXJyZW50IGxhbmd1YWdlIG9mIHRoZSBicm93c2VyIGlmIGl0IGhhcyBiZWVuIGFkZGVkLCBlbHNlIHRoZSBkZWZhdWx0IGxhbmd1YWdlLiBcclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIGRlZmF1bHRMYW5ndWFnZSBUaGUgdHdvLWxldHRlciBjb2RlIG9mIHRoZSBkZWZhdWx0IGxhbmd1YWdlXHJcbiAgICAgKiBAcGFyYW0gZXhwaXJ5IE51bWJlciBvZiBkYXlzIG9uIHRoZSBleHBpcnkuIElmIG9taXR0ZWQsIHRoZSBjb29raWUgYmVjb21lcyBhIHNlc3Npb24gY29va2llXHJcbiAgICAgKi9cclxuICAgIGRlZmluZVByZWZlcnJlZExhbmd1YWdlKGRlZmF1bHRMYW5ndWFnZTogc3RyaW5nLCBleHBpcnk/OiBudW1iZXIpIHtcclxuXHJcbiAgICAgICAgdGhpcy5leHBpcnkgPSBleHBpcnk7XHJcblxyXG4gICAgICAgIC8vIFRyaWVzIHRvIGdldCB0aGUgY29va2llIFwibG9jYWxlXCIuXHJcbiAgICAgICAgdmFyIGxvY2FsZTogc3RyaW5nID0gdGhpcy5nZXRDb29raWUoXCJsb2NhbGVcIik7XHJcbiAgICAgICAgLy8gR2V0cyB0aGUgdHdvLWxldHRlciBjb2RlLiBcclxuICAgICAgICB0aGlzLmxhbmd1YWdlQ29kZSA9IGxvY2FsZS5zdWJzdHJpbmcoMCwgMik7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmxhbmd1YWdlQ29kZSA9PSBcIlwiKSB7XHJcblxyXG4gICAgICAgICAgICAvLyBHZXRzIHRoZSBjdXJyZW50IGxhbmd1YWdlIG9mIHRoZSBicm93c2VyIG9yIHRoZSBkZWZhdWx0IGxhbmd1YWdlLlxyXG4gICAgICAgICAgICB2YXIgYnJvd3Nlckxhbmd1YWdlOiBzdHJpbmcgPSBuYXZpZ2F0b3IubGFuZ3VhZ2UgfHwgbmF2aWdhdG9yLnVzZXJMYW5ndWFnZSB8fCBuYXZpZ2F0b3IuYnJvd3Nlckxhbmd1YWdlIHx8IG5hdmlnYXRvci5zeXN0ZW1MYW5ndWFnZTtcclxuXHJcbiAgICAgICAgICAgIGJyb3dzZXJMYW5ndWFnZSA9IGJyb3dzZXJMYW5ndWFnZS5zdWJzdHJpbmcoMCwgMik7IC8vIEdldHMgdGhlIHR3by1sZXR0ZXIgY29kZS4gICAgXHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5sYW5ndWFnZUNvZGVzLmxlbmd0aCA+IDAgJiYgdGhpcy5sYW5ndWFnZUNvZGVzLmluZGV4T2YoYnJvd3Nlckxhbmd1YWdlKSAhPSAtMSkge1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMubGFuZ3VhZ2VDb2RlID0gYnJvd3Nlckxhbmd1YWdlO1xyXG5cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLmxhbmd1YWdlQ29kZSA9IGRlZmF1bHRMYW5ndWFnZS50b0xvd2VyQ2FzZSgpO1xyXG5cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gU2V0cyB0aGUgZGVmYXVsdCBsb2NhbGUuXHJcbiAgICAgICAgICAgIHRoaXMuc2V0RGVmYXVsdExvY2FsZSgpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMubGFuZ3VhZ2VDb2Rlcy5sZW5ndGggPiAwKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gU2V0cyB0aGUgY29va2llIFwibG9jYWxlXCIuXHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldENvb2tpZShcImxvY2FsZVwiLCB0aGlzLmRlZmF1bHRMb2NhbGUsIHRoaXMuZXhwaXJ5KTtcclxuXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgIC8vIFNldHMgdGhlIGRlZmF1bHQgbG9jYWxlLlxyXG4gICAgICAgICAgICB0aGlzLnNldERlZmF1bHRMb2NhbGUoKTtcclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIERlZmluZXMgcHJlZmVycmVkIGxhbmd1YW5nZSBhbmQgY291bnRyeSwgcmVnYXJkbGVzcyBvZiB0aGUgYnJvd3NlciBsYW5ndWFnZS5cclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIGRlZmF1bHRMYW5ndWFnZSBUaGUgdHdvLWxldHRlciBjb2RlIG9mIHRoZSBkZWZhdWx0IGxhbmd1YWdlXHJcbiAgICAgKiBAcGFyYW0gZGVmYXVsdENvdW50cnkgVGhlIHR3by1sZXR0ZXIsIHVwcGVyY2FzZSBjb2RlIG9mIHRoZSBkZWZhdWx0IGNvdW50cnlcclxuICAgICAqIEBwYXJhbSBleHBpcnkgTnVtYmVyIG9mIGRheXMgb24gdGhlIGV4cGlyeS4gSWYgb21pdHRlZCwgdGhlIGNvb2tpZSBiZWNvbWVzIGEgc2Vzc2lvbiBjb29raWVcclxuICAgICAqL1xyXG4gICAgZGVmaW5lUHJlZmVycmVkTG9jYWxlKGRlZmF1bHRMYW5ndWFnZTogc3RyaW5nLCBkZWZhdWx0Q291bnRyeTogc3RyaW5nLCBleHBpcnk/OiBudW1iZXIpIHtcclxuXHJcbiAgICAgICAgdGhpcy5leHBpcnkgPSBleHBpcnk7XHJcblxyXG4gICAgICAgIC8vIFRyaWVzIHRvIGdldCB0aGUgY29va2llIFwibG9jYWxlXCIuXHJcbiAgICAgICAgdmFyIGxvY2FsZTogc3RyaW5nID0gdGhpcy5nZXRDb29raWUoXCJsb2NhbGVcIik7XHJcbiAgICAgICAgLy8gR2V0cyB0aGUgdHdvLWxldHRlciBjb2RlLiBcclxuICAgICAgICB0aGlzLmxhbmd1YWdlQ29kZSA9IGxvY2FsZS5zdWJzdHJpbmcoMCwgMik7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmxhbmd1YWdlQ29kZSA9PSBcIlwiKSB7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmxhbmd1YWdlQ29kZSA9IGRlZmF1bHRMYW5ndWFnZS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgICAgICB0aGlzLmNvdW50cnlDb2RlID0gZGVmYXVsdENvdW50cnkudG9VcHBlckNhc2UoKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFNldHMgdGhlIGRlZmF1bHQgbG9jYWxlLlxyXG4gICAgICAgICAgICB0aGlzLnNldERlZmF1bHRMb2NhbGUoKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmxhbmd1YWdlQ29kZXMubGVuZ3RoID4gMCkge1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIFNldHMgdGhlIGNvb2tpZSBcImxvY2FsZVwiLlxyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRDb29raWUoXCJsb2NhbGVcIiwgdGhpcy5kZWZhdWx0TG9jYWxlLCB0aGlzLmV4cGlyeSk7XHJcblxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAvLyBHZXRzIHRoZSB0d28tbGV0dGVyLCB1cHBlcmNhc2UgY29kZS5cclxuICAgICAgICAgICAgdGhpcy5jb3VudHJ5Q29kZSA9IGxvY2FsZS5zdWJzdHJpbmcoMywgNSk7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5jb3VudHJ5Q29kZSA9PSBcIlwiKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5jb3VudHJ5Q29kZSA9IGRlZmF1bHRDb3VudHJ5LnRvVXBwZXJDYXNlKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gU2V0cyB0aGUgZGVmYXVsdCBsb2NhbGUuXHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldERlZmF1bHRMb2NhbGUoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5sYW5ndWFnZUNvZGVzLmxlbmd0aCA+IDApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gU2V0cyB0aGUgY29va2llIFwibG9jYWxlXCIuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRDb29raWUoXCJsb2NhbGVcIiwgdGhpcy5kZWZhdWx0TG9jYWxlLCB0aGlzLmV4cGlyeSk7XHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBTZXRzIHRoZSBkZWZhdWx0IGxvY2FsZS5cclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0RGVmYXVsdExvY2FsZSgpO1xyXG5cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRGVmaW5lcyB0aGUgcHJlZmVycmVkIGN1cnJlbmN5LiBcclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIGRlZmF1bHRDdXJyZW5jeSBUaGUgdGhyZWUtbGV0dGVyIGNvZGUgb2YgdGhlIGRlZmF1bHQgY3VycmVuY3lcclxuICAgICAqL1xyXG4gICAgZGVmaW5lUHJlZmVycmVkQ3VycmVuY3koZGVmYXVsdEN1cnJlbmN5OiBzdHJpbmcpIHtcclxuXHJcbiAgICAgICAgLy8gVHJpZXMgdG8gZ2V0IHRoZSBjb29raWUgXCJjdXJyZW5jeVwiLlxyXG4gICAgICAgIHRoaXMuY3VycmVuY3lDb2RlID0gdGhpcy5nZXRDb29raWUoXCJjdXJyZW5jeVwiKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuY3VycmVuY3lDb2RlID09IFwiXCIpIHtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVuY3lDb2RlID0gZGVmYXVsdEN1cnJlbmN5LnRvVXBwZXJDYXNlKCk7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5sYW5ndWFnZUNvZGVzLmxlbmd0aCA+IDApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBTZXRzIHRoZSBjb29raWUgXCJjdXJyZW5jeVwiLlxyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRDb29raWUoXCJjdXJyZW5jeVwiLCB0aGlzLmN1cnJlbmN5Q29kZSwgdGhpcy5leHBpcnkpO1xyXG5cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyB0aGUgY3VycmVudCBsYW5ndWFnZS5cclxuICAgICAqIFxyXG4gICAgICogQHJldHVybiBUaGUgdHdvLWxldHRlciBjb2RlIG9mIHRoZSBjdXJyZW50IGxhbmd1YWdlXHJcbiAgICAgKi9cclxuICAgIGdldEN1cnJlbnRMYW5ndWFnZSgpOiBzdHJpbmcge1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5sYW5ndWFnZUNvZGU7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyB0aGUgY3VycmVudCBjb3VudHJ5LlxyXG4gICAgICogXHJcbiAgICAgKiBAcmV0dXJuIFRoZSB0d28tbGV0dGVyLCB1cHBlcmNhc2UgY29kZSBvZiB0aGUgY3VycmVudCBjb3VudHJ5XHJcbiAgICAgKi9cclxuICAgIGdldEN1cnJlbnRDb3VudHJ5KCk6IHN0cmluZyB7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLmNvdW50cnlDb2RlO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgdGhlIGN1cnJlbnQgY3VycmVuY3kuXHJcbiAgICAgKiBcclxuICAgICAqIEByZXR1cm4gVGhlIHRocmVlLWxldHRlciBjb2RlIG9mIHRoZSBjdXJyZW50IGN1cnJlbmN5XHJcbiAgICAgKi9cclxuICAgIGdldEN1cnJlbnRDdXJyZW5jeSgpOiBzdHJpbmcge1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5jdXJyZW5jeUNvZGU7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2V0cyB0aGUgY3VycmVudCBsYW5ndWFnZS5cclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIGxhbmd1YWdlIFRoZSB0d28tbGV0dGVyIGNvZGUgb2YgdGhlIG5ldyBsYW5ndWFnZVxyXG4gICAgICovXHJcbiAgICBzZXRDdXJyZW50TGFuZ3VhZ2UobGFuZ3VhZ2U6IHN0cmluZykge1xyXG5cclxuICAgICAgICBsYW5ndWFnZSA9IGxhbmd1YWdlLnRvTG93ZXJDYXNlKCk7XHJcblxyXG4gICAgICAgIC8vIENoZWNrcyBpZiB0aGUgbGFuZ3VhZ2UgaGFzIGNoYW5nZWQuXHJcbiAgICAgICAgaWYgKHRoaXMubGFuZ3VhZ2VDb2RlICE9IGxhbmd1YWdlKSB7XHJcblxyXG4gICAgICAgICAgICAvLyBTZXRzIHRoZSBjdXJyZW50IGxhbmd1YWdlIGNvZGUuXHJcbiAgICAgICAgICAgIHRoaXMubGFuZ3VhZ2VDb2RlID0gbGFuZ3VhZ2U7XHJcblxyXG4gICAgICAgICAgICAvLyBTZXRzIHRoZSBkZWZhdWx0IGxvY2FsZS5cclxuICAgICAgICAgICAgdGhpcy5zZXREZWZhdWx0TG9jYWxlKCk7XHJcblxyXG4gICAgICAgICAgICAvLyBTZXRzIHRoZSBjb29raWUgXCJsb2NhbGVcIi5cclxuICAgICAgICAgICAgdGhpcy5zZXRDb29raWUoXCJsb2NhbGVcIiwgdGhpcy5kZWZhdWx0TG9jYWxlLCB0aGlzLmV4cGlyeSk7XHJcblxyXG4gICAgICAgICAgICAvLyBTZW5kcyBhbiBldmVudC5cclxuICAgICAgICAgICAgdGhpcy5sYW5ndWFnZUNvZGVDaGFuZ2VkLmVtaXQobGFuZ3VhZ2UpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXRzIHRoZSBjdXJyZW50IGNvdW50cnkuXHJcbiAgICAgKiBcclxuICAgICAqIEBwYXJhbSBjb3VudHJ5IFRoZSB0d28tbGV0dGVyLCB1cHBlcmNhc2UgY29kZSBvZiB0aGUgbmV3IGNvdW50cnlcclxuICAgICAqL1xyXG4gICAgc2V0Q3VycmVudENvdW50cnkoY291bnRyeTogc3RyaW5nKSB7XHJcblxyXG4gICAgICAgIGNvdW50cnkgPSBjb3VudHJ5LnRvVXBwZXJDYXNlKCk7XHJcblxyXG4gICAgICAgIC8vIENoZWNrcyBpZiB0aGUgY291bnRyeSBoYXMgY2hhbmdlZC5cclxuICAgICAgICBpZiAodGhpcy5jb3VudHJ5Q29kZSAhPSBjb3VudHJ5KSB7XHJcblxyXG4gICAgICAgICAgICAvLyBTZXRzIHRoZSBjdXJyZW50IGNvdW50cnkgY29kZS5cclxuICAgICAgICAgICAgdGhpcy5jb3VudHJ5Q29kZSA9IGNvdW50cnk7XHJcblxyXG4gICAgICAgICAgICAvLyBTZXRzIHRoZSBkZWZhdWx0IGxvY2FsZS5cclxuICAgICAgICAgICAgdGhpcy5zZXREZWZhdWx0TG9jYWxlKCk7XHJcblxyXG4gICAgICAgICAgICAvLyBTZXRzIHRoZSBjb29raWUgXCJsb2NhbGVcIi5cclxuICAgICAgICAgICAgdGhpcy5zZXRDb29raWUoXCJsb2NhbGVcIiwgdGhpcy5kZWZhdWx0TG9jYWxlLCB0aGlzLmV4cGlyeSk7XHJcblxyXG4gICAgICAgICAgICAvLyBTZW5kcyBhbiBldmVudC5cclxuICAgICAgICAgICAgdGhpcy5jb3VudHJ5Q29kZUNoYW5nZWQuZW1pdChjb3VudHJ5KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2V0cyB0aGUgY3VycmVudCBsb2NhbGUuXHJcbiAgICAgKiBcclxuICAgICAqIEBwYXJhbSBsYW5ndWFnZSBUaGUgdHdvLWxldHRlciBjb2RlIG9mIHRoZSBuZXcgbGFuZ3VhZ2VcclxuICAgICAqIEBwYXJhbSBjb3VudHJ5IFRoZSB0d28tbGV0dGVyLCB1cHBlcmNhc2UgY29kZSBvZiB0aGUgbmV3IGNvdW50cnlcclxuICAgICAqL1xyXG4gICAgc2V0Q3VycmVudExvY2FsZShsYW5ndWFnZTogc3RyaW5nLCBjb3VudHJ5OiBzdHJpbmcpIHtcclxuXHJcbiAgICAgICAgbGFuZ3VhZ2UgPSBsYW5ndWFnZS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgIGNvdW50cnkgPSBjb3VudHJ5LnRvVXBwZXJDYXNlKCk7XHJcblxyXG4gICAgICAgIC8vIENoZWNrcyBpZiBsYW5ndWFnZSBvciBjb3VudHJ5IGhhdmUgY2hhbmdlZC5cclxuICAgICAgICBpZiAodGhpcy5sYW5ndWFnZUNvZGUgIT0gbGFuZ3VhZ2UgfHwgdGhpcy5jb3VudHJ5Q29kZSAhPSBjb3VudHJ5KSB7XHJcblxyXG4gICAgICAgICAgICAvLyBTZXRzIHRoZSBjdXJyZW50IGxhbmd1YWdlIGNvZGUuXHJcbiAgICAgICAgICAgIHRoaXMubGFuZ3VhZ2VDb2RlID0gbGFuZ3VhZ2U7XHJcbiAgICAgICAgICAgIC8vIFNldHMgdGhlIGN1cnJlbnQgY291bnRyeSBjb2RlLlxyXG4gICAgICAgICAgICB0aGlzLmNvdW50cnlDb2RlID0gY291bnRyeTtcclxuXHJcbiAgICAgICAgICAgIC8vIFNldHMgdGhlIGRlZmF1bHQgbG9jYWxlLlxyXG4gICAgICAgICAgICB0aGlzLnNldERlZmF1bHRMb2NhbGUoKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFNldHMgdGhlIGNvb2tpZSBcImxvY2FsZVwiLlxyXG4gICAgICAgICAgICB0aGlzLnNldENvb2tpZShcImxvY2FsZVwiLCB0aGlzLmRlZmF1bHRMb2NhbGUsIHRoaXMuZXhwaXJ5KTtcclxuXHJcbiAgICAgICAgICAgIC8vIFNlbmRzIHRoZSBldmVudHMuXHJcbiAgICAgICAgICAgIHRoaXMuY291bnRyeUNvZGVDaGFuZ2VkLmVtaXQoY291bnRyeSk7XHJcbiAgICAgICAgICAgIHRoaXMubGFuZ3VhZ2VDb2RlQ2hhbmdlZC5lbWl0KGxhbmd1YWdlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2V0cyB0aGUgY3VycmVudCBjdXJyZW5jeS5cclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIGN1cnJlbmN5IFRoZSB0aHJlZS1sZXR0ZXIgY29kZSBvZiB0aGUgbmV3IGN1cnJlbmN5XHJcbiAgICAgKi9cclxuICAgIHNldEN1cnJlbnRDdXJyZW5jeShjdXJyZW5jeTogc3RyaW5nKSB7XHJcblxyXG4gICAgICAgIGN1cnJlbmN5ID0gY3VycmVuY3kudG9VcHBlckNhc2UoKTtcclxuXHJcbiAgICAgICAgLy8gQ2hlY2tzIGlmIHRoZSBjdXJyZW5jeSBoYXMgY2hhbmdlZC5cclxuICAgICAgICBpZiAodGhpcy5jdXJyZW5jeUNvZGUgIT0gY3VycmVuY3kpIHtcclxuXHJcbiAgICAgICAgICAgIC8vIFNldHMgdGhlIGN1cnJlbnQgY3VycmVuY3kgY29kZS5cclxuICAgICAgICAgICAgdGhpcy5jdXJyZW5jeUNvZGUgPSBjdXJyZW5jeTtcclxuXHJcbiAgICAgICAgICAgIC8vIFNldHMgdGhlIGNvb2tpZSBcImN1cnJlbmN5XCIuXHJcbiAgICAgICAgICAgIHRoaXMuc2V0Q29va2llKFwiY3VycmVuY3lcIiwgdGhpcy5jdXJyZW5jeUNvZGUsIHRoaXMuZXhwaXJ5KTtcclxuXHJcbiAgICAgICAgICAgIC8vIFNlbmRzIGFuIGV2ZW50LlxyXG4gICAgICAgICAgICB0aGlzLmN1cnJlbmN5Q29kZUNoYW5nZWQuZW1pdChjdXJyZW5jeSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgdGhlIGRlZmF1bHQgbG9jYWxlLlxyXG4gICAgICogXHJcbiAgICAgKiBAcmV0dXJuIFRoZSBkZWZhdWx0IGxvY2FsZVxyXG4gICAgICovXHJcbiAgICBnZXREZWZhdWx0TG9jYWxlKCk6IHN0cmluZyB7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLmRlZmF1bHRMb2NhbGU7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc2V0RGVmYXVsdExvY2FsZSgpIHtcclxuXHJcbiAgICAgICAgdGhpcy5kZWZhdWx0TG9jYWxlID0gdGhpcy5sYW5ndWFnZUNvZGVcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuY291bnRyeUNvZGUgIT0gXCJcIikge1xyXG5cclxuICAgICAgICAgICAgdGhpcy5kZWZhdWx0TG9jYWxlID0gdGhpcy5kZWZhdWx0TG9jYWxlICsgXCItXCIgKyB0aGlzLmNvdW50cnlDb2RlO1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvKipcclxuICAgICAqIFNldHMgdGhlIGNvb2tpZS5cclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIG5hbWUgVGhlIG5hbWUgb2YgdGhlIGNvb2tpZVxyXG4gICAgICogQHBhcmFtIHZhbHVlIFRoZSB2YWx1ZSBvZiB0aGUgY29va2llXHJcbiAgICAgKiBAcGFyYW0gZGF5cyBOdW1iZXIgb2YgZGF5cyBvbiB0aGUgZXhwaXJ5XHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgc2V0Q29va2llKG5hbWU6IHN0cmluZywgdmFsdWU6IHN0cmluZywgZGF5cz86IG51bWJlcikge1xyXG5cclxuICAgICAgICBpZiAoZGF5cyAhPSBudWxsKSB7XHJcblxyXG4gICAgICAgICAgICAvLyBBZGRzIHRoZSBleHBpcnkgZGF0ZSAoaW4gVVRDIHRpbWUpLlxyXG4gICAgICAgICAgICB2YXIgZXhwaXJhdGlvbkRhdGU6IERhdGUgPSBuZXcgRGF0ZSgpO1xyXG5cclxuICAgICAgICAgICAgZXhwaXJhdGlvbkRhdGUuc2V0VGltZShleHBpcmF0aW9uRGF0ZS5nZXRUaW1lKCkgKyAoZGF5cyAqIDI0ICogNjAgKiA2MCAqIDEwMDApKTtcclxuXHJcbiAgICAgICAgICAgIHZhciBleHBpcmVzOiBzdHJpbmcgPSBcIjsgZXhwaXJlcz1cIiArIGV4cGlyYXRpb25EYXRlLnRvVVRDU3RyaW5nKCk7XHJcblxyXG4gICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAvLyBCeSBkZWZhdWx0LCB0aGUgY29va2llIGlzIGRlbGV0ZWQgd2hlbiB0aGUgYnJvd3NlciBpcyBjbG9zZWQuXHJcbiAgICAgICAgICAgIHZhciBleHBpcmVzOiBzdHJpbmcgPSBcIlwiO1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIENyZWF0ZXMgdGhlIGNvb2tpZS5cclxuICAgICAgICBpZiAodGhpcy5lbmFibGVDb29raWUgPT0gdHJ1ZSkge1xyXG5cclxuICAgICAgICAgICAgZG9jdW1lbnQuY29va2llID0gbmFtZSArIFwiPVwiICsgdmFsdWUgKyBleHBpcmVzICsgXCI7IHBhdGg9L1wiO1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyB0aGUgY29va2llLlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0gbmFtZSBUaGUgbmFtZSBvZiB0aGUgY29va2llXHJcbiAgICAgKiBAcmV0dXJuIFRoZSB2YWx1ZSBvZiB0aGUgY29va2llXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgZ2V0Q29va2llKG5hbWU6IHN0cmluZyk6IHN0cmluZyB7XHJcblxyXG4gICAgICAgIC8vIFRoZSB0ZXh0IHRvIHNlYXJjaCBmb3IuXHJcbiAgICAgICAgbmFtZSArPSBcIj1cIjtcclxuXHJcbiAgICAgICAgLy8gU3BsaXRzIGRvY3VtZW50LmNvb2tpZSBvbiBzZW1pY29sb25zIGludG8gYW4gYXJyYXkuXHJcbiAgICAgICAgdmFyIGNhOiBzdHJpbmdbXSA9IGRvY3VtZW50LmNvb2tpZS5zcGxpdCgnOycpO1xyXG5cclxuICAgICAgICAvLyBMb29wcyB0aHJvdWdoIHRoZSBjYSBhcnJheSwgYW5kIHJlYWRzIG91dCBlYWNoIHZhbHVlLlxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2EubGVuZ3RoOyBpKyspIHtcclxuXHJcbiAgICAgICAgICAgIHZhciBjOiBzdHJpbmcgPSBjYVtpXTtcclxuXHJcbiAgICAgICAgICAgIHdoaWxlIChjLmNoYXJBdCgwKSA9PSAnICcpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBjID0gYy5zdWJzdHJpbmcoMSk7XHJcblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIElmIHRoZSBjb29raWUgaXMgZm91bmQsIHJldHVybnMgdGhlIHZhbHVlIG9mIHRoZSBjb29raWUuXHJcbiAgICAgICAgICAgIGlmIChjLmluZGV4T2YobmFtZSkgPT0gMCkge1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBjLnN1YnN0cmluZyhuYW1lLmxlbmd0aCwgYy5sZW5ndGgpO1xyXG5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gSWYgdGhlIGNvb2tpZSBpcyBub3QgZm91bmQsIHJldHVybnMgYW4gZW1wdHkgc3RyaW5nLlxyXG4gICAgICAgIHJldHVybiBcIlwiO1xyXG5cclxuICAgIH1cclxuXHJcbn0iXX0=