/**
 * ANGULAR 2 LOCALIZATION
 * An Angular 2 library to translate messages, dates and numbers.
 * Written by Roberto Simonetti.
 * MIT license.
 * https://github.com/robisim74/angular2localization
 */
System.register(['@angular/core', '@angular/common/src/facade/lang', '@angular/common/src/facade/exceptions', '@angular/common/src/facade/intl', '@angular/common/src/pipes/invalid_pipe_argument_exception'], function(exports_1, context_1) {
    "use strict";
    var __moduleName = context_1 && context_1.id;
    var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = (this && this.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1, lang_1, exceptions_1, intl_1, invalid_pipe_argument_exception_1;
    var LocaleNumber;
    return {
        setters:[
            function (core_1_1) {
                core_1 = core_1_1;
            },
            function (lang_1_1) {
                lang_1 = lang_1_1;
            },
            function (exceptions_1_1) {
                exceptions_1 = exceptions_1_1;
            },
            function (intl_1_1) {
                intl_1 = intl_1_1;
            },
            function (invalid_pipe_argument_exception_1_1) {
                invalid_pipe_argument_exception_1 = invalid_pipe_argument_exception_1_1;
            }],
        execute: function() {
            /**
             * LocaleNumber superclass.
             */
            LocaleNumber = (function () {
                function LocaleNumber() {
                }
                LocaleNumber.format = function (defaultLocale, value, style, digits, currency, currencyAsSymbol) {
                    if (currency === void 0) { currency = null; }
                    if (currencyAsSymbol === void 0) { currencyAsSymbol = false; }
                    if (lang_1.isBlank(value))
                        return null;
                    if (!lang_1.isNumber(value)) {
                        throw new invalid_pipe_argument_exception_1.InvalidPipeArgumentException(LocaleNumber, value);
                    }
                    var minInt = 1, minFraction = 0, maxFraction = 3;
                    var re = lang_1.RegExpWrapper.create('^(\\d+)?\\.((\\d+)(\\-(\\d+))?)?$');
                    if (lang_1.isPresent(digits)) {
                        var parts = lang_1.RegExpWrapper.firstMatch(re, digits);
                        if (lang_1.isBlank(parts)) {
                            throw new exceptions_1.BaseException(digits + " is not a valid digit info for number pipes");
                        }
                        if (lang_1.isPresent(parts[1])) {
                            minInt = lang_1.NumberWrapper.parseIntAutoRadix(parts[1]);
                        }
                        if (lang_1.isPresent(parts[3])) {
                            minFraction = lang_1.NumberWrapper.parseIntAutoRadix(parts[3]);
                        }
                        if (lang_1.isPresent(parts[5])) {
                            maxFraction = lang_1.NumberWrapper.parseIntAutoRadix(parts[5]);
                        }
                    }
                    return intl_1.NumberFormatter.format(value, defaultLocale, style, {
                        minimumIntegerDigits: minInt,
                        minimumFractionDigits: minFraction,
                        maximumFractionDigits: maxFraction,
                        currency: currency,
                        currencyAsSymbol: currencyAsSymbol
                    });
                };
                LocaleNumber = __decorate([
                    core_1.Injectable(), 
                    __metadata('design:paramtypes', [])
                ], LocaleNumber);
                return LocaleNumber;
            }());
            exports_1("LocaleNumber", LocaleNumber);
        }
    }
});
