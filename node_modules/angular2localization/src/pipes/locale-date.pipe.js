/**
 * ANGULAR 2 LOCALIZATION
 * An Angular 2 library to translate messages, dates and numbers.
 * Written by Roberto Simonetti.
 * MIT license.
 * https://github.com/robisim74/angular2localization
 */
System.register(['@angular/core', '@angular/common/src/facade/lang', '@angular/common/src/facade/intl', '@angular/common/src/facade/collection', '@angular/common/src/pipes/invalid_pipe_argument_exception', '../services/locale.service'], function(exports_1, context_1) {
    "use strict";
    var __moduleName = context_1 && context_1.id;
    var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = (this && this.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1, lang_1, intl_1, collection_1, invalid_pipe_argument_exception_1, locale_service_1;
    var LocaleDatePipe;
    return {
        setters:[
            function (core_1_1) {
                core_1 = core_1_1;
            },
            function (lang_1_1) {
                lang_1 = lang_1_1;
            },
            function (intl_1_1) {
                intl_1 = intl_1_1;
            },
            function (collection_1_1) {
                collection_1 = collection_1_1;
            },
            function (invalid_pipe_argument_exception_1_1) {
                invalid_pipe_argument_exception_1 = invalid_pipe_argument_exception_1_1;
            },
            function (locale_service_1_1) {
                locale_service_1 = locale_service_1_1;
            }],
        execute: function() {
            /**
             * 'localedate' pipe function.
             */
            LocaleDatePipe = (function () {
                function LocaleDatePipe(locale) {
                    this.locale = locale;
                }
                /**
                 * LocaleDatePipe transform method.
                 *
                 * @param value The date to be localized
                 * @param pattern The format of the date
                 * @return The locale date
                 */
                LocaleDatePipe.prototype.transform = function (value, pattern) {
                    if (pattern === void 0) { pattern = 'mediumDate'; }
                    if (lang_1.isBlank(value))
                        return null;
                    if (!this.supports(value)) {
                        throw new invalid_pipe_argument_exception_1.InvalidPipeArgumentException(LocaleDatePipe, value);
                    }
                    // Updates the locale date for the value if:
                    // - the value has changed;
                    // - the locale date is empty;
                    // - the default locale has changed.
                    if (this.value != value || this.localeDate == "" || this.defaultLocale != this.locale.getDefaultLocale()) {
                        // Updates the default locale for LocaleDatePipe.
                        this.defaultLocale = this.locale.getDefaultLocale();
                        // Updates the value of LocaleDatePipe before it changes.
                        this.value = value;
                        if (lang_1.isNumber(value)) {
                            value = lang_1.DateWrapper.fromMillis(value);
                        }
                        if (collection_1.StringMapWrapper.contains(LocaleDatePipe.ALIASES, pattern)) {
                            pattern = collection_1.StringMapWrapper.get(LocaleDatePipe.ALIASES, pattern);
                        }
                        // Gets the locale date.
                        this.localeDate = intl_1.DateFormatter.format(value, this.defaultLocale, pattern);
                    }
                    return this.localeDate;
                };
                LocaleDatePipe.prototype.supports = function (obj) { return lang_1.isDate(obj) || lang_1.isNumber(obj); };
                LocaleDatePipe.ALIASES = {
                    'medium': 'yMMMdjms',
                    'short': 'yMdjm',
                    'fullDate': 'yMMMMEEEEd',
                    'longDate': 'yMMMMd',
                    'mediumDate': 'yMMMd',
                    'shortDate': 'yMd',
                    'mediumTime': 'jms',
                    'shortTime': 'jm'
                };
                LocaleDatePipe = __decorate([
                    core_1.Pipe({
                        name: 'localedate',
                        pure: false // Required to update the value.
                    }),
                    core_1.Injectable(), 
                    __metadata('design:paramtypes', [locale_service_1.LocaleService])
                ], LocaleDatePipe);
                return LocaleDatePipe;
            }());
            exports_1("LocaleDatePipe", LocaleDatePipe);
        }
    }
});
