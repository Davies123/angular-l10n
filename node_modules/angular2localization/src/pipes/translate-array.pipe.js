/**
 * ANGULAR 2 LOCALIZATION
 * An Angular 2 library to translate messages, dates and numbers.
 * Written by Roberto Simonetti.
 * MIT license.
 * https://github.com/robisim74/angular2localization
 */
System.register(['@angular/core', '@angular/common/src/facade/lang', '@angular/common/src/facade/intl', '@angular/common/src/facade/collection', '@angular/common/src/pipes/invalid_pipe_argument_exception', '../services/locale-number', '../services/locale.service', '../services/localization.service'], function(exports_1, context_1) {
    "use strict";
    var __moduleName = context_1 && context_1.id;
    var __extends = (this && this.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = (this && this.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1, lang_1, intl_1, collection_1, invalid_pipe_argument_exception_1, locale_number_1, locale_service_1, localization_service_1;
    var TranslateArrayPipe;
    return {
        setters:[
            function (core_1_1) {
                core_1 = core_1_1;
            },
            function (lang_1_1) {
                lang_1 = lang_1_1;
            },
            function (intl_1_1) {
                intl_1 = intl_1_1;
            },
            function (collection_1_1) {
                collection_1 = collection_1_1;
            },
            function (invalid_pipe_argument_exception_1_1) {
                invalid_pipe_argument_exception_1 = invalid_pipe_argument_exception_1_1;
            },
            function (locale_number_1_1) {
                locale_number_1 = locale_number_1_1;
            },
            function (locale_service_1_1) {
                locale_service_1 = locale_service_1_1;
            },
            function (localization_service_1_1) {
                localization_service_1 = localization_service_1_1;
            }],
        execute: function() {
            /**
             * 'translatearray' pipe function.
             */
            TranslateArrayPipe = (function (_super) {
                __extends(TranslateArrayPipe, _super);
                function TranslateArrayPipe(locale, localization) {
                    _super.call(this);
                    this.locale = locale;
                    this.localization = localization;
                }
                /**
                 * TranslateArrayPipe transform method.
                 *
                 * @param list An array of objects or an array of arrays
                 * @param args Params in Json format
                 * @param keyName Sorting key. Not yet implemented
                 * @param order 'asc' or 'desc'. Not yet implemented
                 * @param search The value to search for. Not yet implemented
                 * @return A new localized list
                 */
                TranslateArrayPipe.prototype.transform = function (list, args, keyName, order, search) {
                    if (list == null || args == null)
                        return null;
                    // When the language changes, updates the language code and loads the translation data for the asynchronous loading.
                    if (this.locale.getCurrentLanguage() != "" && this.locale.getCurrentLanguage() != this.localization.languageCode) {
                        this.localization.updateTranslation();
                    }
                    // Checks the service state.
                    if (this.localization.serviceState == localization_service_1.ServiceState.isReady) {
                        // Checks if list has changed.       
                        var equals = this.compare(this.storedList, list);
                        if ((equals == false
                            || this.translatedList == null
                            || this.languageCode != this.localization.languageCode
                            || this.currencyCode != this.locale.getCurrentCurrency()
                            || this.defaultLocale != this.locale.getDefaultLocale())) {
                            // Saves the list.
                            this.storedList = new Array();
                            this.storedList = list;
                            // Updates the language code for TranslateArrayPipe.
                            this.languageCode = this.localization.languageCode;
                            // Updates the currency code for TranslateArrayPipe.
                            this.currencyCode = this.locale.getCurrentCurrency();
                            // Updates the default locale for TranslateArrayPipe.
                            this.defaultLocale = this.locale.getDefaultLocale();
                            // Creates a deep copy.
                            var workList = new Array();
                            workList = this.deepCopy(list);
                            var keys = Object.keys(list[0]); // Gets array keys.
                            var i = 0;
                            for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
                                var key = keys_1[_i];
                                switch (args[key]['pipe']) {
                                    case 'translate':
                                        workList = this.tranlate(workList, key);
                                        break;
                                    case 'localedate':
                                        workList = this.toLocaleDate(workList, key, args[key]['format']);
                                        break;
                                    case 'localedecimal':
                                        workList = this.toLocaleDecimal(workList, key, args[key]['digitInfo']);
                                        break;
                                    case 'localepercent':
                                        workList = this.toLocalePercent(workList, key, args[key]['digitInfo']);
                                        break;
                                    case 'localecurrency':
                                        workList = this.toLocaleCurrency(workList, key, args[key]['symbolDisplay'], args[key]['digitInfo']);
                                        break;
                                }
                                i++;
                            }
                            // Assigns translatedList.
                            this.translatedList = new Array();
                            this.translatedList = workList;
                        }
                        return this.translatedList;
                    }
                    else {
                        // The service isn't ready.
                        return this.translatedList;
                    }
                };
                TranslateArrayPipe.prototype.supports = function (obj) { return lang_1.isDate(obj) || lang_1.isNumber(obj); };
                TranslateArrayPipe.prototype.tranlate = function (workList, key) {
                    for (var _i = 0, workList_1 = workList; _i < workList_1.length; _i++) {
                        var item = workList_1[_i];
                        // Gets the value of translation for the key.
                        var value = this.localization.getValue(item[key]);
                        // Replaces the value in the list.
                        item[key] = value;
                    }
                    // Returns the same updated list. 
                    return workList;
                };
                TranslateArrayPipe.prototype.toLocaleDate = function (workList, key, pattern) {
                    if (pattern === void 0) { pattern = 'mediumDate'; }
                    for (var _i = 0, workList_2 = workList; _i < workList_2.length; _i++) {
                        var item = workList_2[_i];
                        if (lang_1.isBlank(item[key]))
                            return null;
                        if (!this.supports(item[key])) {
                            throw new invalid_pipe_argument_exception_1.InvalidPipeArgumentException(TranslateArrayPipe, item[key]);
                        }
                        if (lang_1.isNumber(item[key])) {
                            item[key] = lang_1.DateWrapper.fromMillis(item[key]);
                        }
                        if (collection_1.StringMapWrapper.contains(TranslateArrayPipe.ALIASES, pattern)) {
                            pattern = collection_1.StringMapWrapper.get(TranslateArrayPipe.ALIASES, pattern);
                        }
                        // Gets the locale date.
                        var value = intl_1.DateFormatter.format(item[key], this.defaultLocale, pattern);
                        // Replaces the value in the list.
                        item[key] = value;
                    }
                    // Returns the same updated list. 
                    return workList;
                };
                TranslateArrayPipe.prototype.toLocaleDecimal = function (workList, key, digits) {
                    if (digits === void 0) { digits = null; }
                    for (var _i = 0, workList_3 = workList; _i < workList_3.length; _i++) {
                        var item = workList_3[_i];
                        // Gets the locale decimal.
                        var value = locale_number_1.LocaleNumber.format(this.defaultLocale, item[key], intl_1.NumberFormatStyle.Decimal, digits);
                        // Replaces the value in the list.
                        item[key] = value;
                    }
                    // Returns the same updated list. 
                    return workList;
                };
                TranslateArrayPipe.prototype.toLocalePercent = function (workList, key, digits) {
                    if (digits === void 0) { digits = null; }
                    for (var _i = 0, workList_4 = workList; _i < workList_4.length; _i++) {
                        var item = workList_4[_i];
                        // Gets the locale percent.
                        var value = locale_number_1.LocaleNumber.format(this.defaultLocale, item[key], intl_1.NumberFormatStyle.Percent, digits);
                        // Replaces the value in the list.
                        item[key] = value;
                    }
                    // Returns the same updated list. 
                    return workList;
                };
                TranslateArrayPipe.prototype.toLocaleCurrency = function (workList, key, symbolDisplay, digits) {
                    if (symbolDisplay === void 0) { symbolDisplay = false; }
                    if (digits === void 0) { digits = null; }
                    for (var _i = 0, workList_5 = workList; _i < workList_5.length; _i++) {
                        var item = workList_5[_i];
                        // Gets the locale currency.
                        var value = locale_number_1.LocaleNumber.format(this.defaultLocale, item[key], intl_1.NumberFormatStyle.Currency, digits, this.currencyCode, symbolDisplay);
                        // Replaces the value in the list.
                        item[key] = value;
                    }
                    // Returns the same updated list. 
                    return workList;
                };
                TranslateArrayPipe.prototype.compare = function (x, y) {
                    if (x == null || y == null)
                        return false; // An array is null.
                    if (x.length != y.length)
                        return false; // The length of arrays is different.
                    // Gets arrays keys.
                    var xKeys = Object.keys(x[0]);
                    var yKeys = Object.keys(y[0]);
                    if (xKeys != yKeys)
                        return false; // The arrays keys are different.
                    for (var i; i < x.length; i++) {
                        for (var j; j < xKeys.length; i++) {
                            if (x[i][j] != y[i][j]) {
                                return false;
                            }
                        }
                    }
                    return true; // The arrays are equal.
                };
                TranslateArrayPipe.prototype.deepCopy = function (x) {
                    var y = new Array();
                    var keys = Object.keys(x[0]); // Gets array keys.
                    for (var _i = 0, x_1 = x; _i < x_1.length; _i++) {
                        var item = x_1[_i];
                        var copyOfItem = {};
                        for (var _a = 0, keys_2 = keys; _a < keys_2.length; _a++) {
                            var key = keys_2[_a];
                            copyOfItem[key] = item[key];
                        }
                        y.push(copyOfItem);
                    }
                    return y;
                };
                TranslateArrayPipe.ALIASES = {
                    'medium': 'yMMMdjms',
                    'short': 'yMdjm',
                    'fullDate': 'yMMMMEEEEd',
                    'longDate': 'yMMMMd',
                    'mediumDate': 'yMMMd',
                    'shortDate': 'yMd',
                    'mediumTime': 'jms',
                    'shortTime': 'jm'
                };
                TranslateArrayPipe = __decorate([
                    core_1.Pipe({
                        name: 'translatearray',
                        pure: false // Required to update the value.
                    }),
                    core_1.Injectable(), 
                    __metadata('design:paramtypes', [locale_service_1.LocaleService, localization_service_1.LocalizationService])
                ], TranslateArrayPipe);
                return TranslateArrayPipe;
            }(locale_number_1.LocaleNumber));
            exports_1("TranslateArrayPipe", TranslateArrayPipe);
        }
    }
});
