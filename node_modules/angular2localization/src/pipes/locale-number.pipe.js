/**
 * ANGULAR 2 LOCALIZATION
 * An Angular 2 library to translate messages, dates and numbers.
 * Written by Roberto Simonetti.
 * MIT license.
 * https://github.com/robisim74/angular2localization
 */
System.register(['@angular/core', '@angular/common/src/facade/lang', '@angular/common/src/facade/exceptions', '@angular/common/src/facade/intl', '@angular/common/src/pipes/invalid_pipe_argument_exception', '../services/locale.service'], function(exports_1, context_1) {
    "use strict";
    var __moduleName = context_1 && context_1.id;
    var __extends = (this && this.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = (this && this.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1, lang_1, exceptions_1, intl_1, invalid_pipe_argument_exception_1, locale_service_1;
    var LocaleNumber, LocaleDecimalPipe, LocalePercentPipe, LocaleCurrencyPipe;
    return {
        setters:[
            function (core_1_1) {
                core_1 = core_1_1;
            },
            function (lang_1_1) {
                lang_1 = lang_1_1;
            },
            function (exceptions_1_1) {
                exceptions_1 = exceptions_1_1;
            },
            function (intl_1_1) {
                intl_1 = intl_1_1;
            },
            function (invalid_pipe_argument_exception_1_1) {
                invalid_pipe_argument_exception_1 = invalid_pipe_argument_exception_1_1;
            },
            function (locale_service_1_1) {
                locale_service_1 = locale_service_1_1;
            }],
        execute: function() {
            /**
             * LocaleNumber superclass.
             */
            LocaleNumber = (function () {
                function LocaleNumber() {
                }
                LocaleNumber.format = function (defaultLocale, value, style, digits, currency, currencyAsSymbol) {
                    if (currency === void 0) { currency = null; }
                    if (currencyAsSymbol === void 0) { currencyAsSymbol = false; }
                    if (lang_1.isBlank(value))
                        return null;
                    if (!lang_1.isNumber(value)) {
                        throw new invalid_pipe_argument_exception_1.InvalidPipeArgumentException(LocaleNumber, value);
                    }
                    var minInt = 1, minFraction = 0, maxFraction = 3;
                    var re = lang_1.RegExpWrapper.create('^(\\d+)?\\.((\\d+)(\\-(\\d+))?)?$');
                    if (lang_1.isPresent(digits)) {
                        var parts = lang_1.RegExpWrapper.firstMatch(re, digits);
                        if (lang_1.isBlank(parts)) {
                            throw new exceptions_1.BaseException(digits + " is not a valid digit info for number pipes");
                        }
                        if (lang_1.isPresent(parts[1])) {
                            minInt = lang_1.NumberWrapper.parseIntAutoRadix(parts[1]);
                        }
                        if (lang_1.isPresent(parts[3])) {
                            minFraction = lang_1.NumberWrapper.parseIntAutoRadix(parts[3]);
                        }
                        if (lang_1.isPresent(parts[5])) {
                            maxFraction = lang_1.NumberWrapper.parseIntAutoRadix(parts[5]);
                        }
                    }
                    return intl_1.NumberFormatter.format(value, defaultLocale, style, {
                        minimumIntegerDigits: minInt,
                        minimumFractionDigits: minFraction,
                        maximumFractionDigits: maxFraction,
                        currency: currency,
                        currencyAsSymbol: currencyAsSymbol
                    });
                };
                LocaleNumber = __decorate([
                    core_1.Injectable(), 
                    __metadata('design:paramtypes', [])
                ], LocaleNumber);
                return LocaleNumber;
            }());
            exports_1("LocaleNumber", LocaleNumber);
            /**
             * 'localedecimal' pipe function.
             */
            LocaleDecimalPipe = (function (_super) {
                __extends(LocaleDecimalPipe, _super);
                function LocaleDecimalPipe(locale) {
                    _super.call(this);
                    this.locale = locale;
                }
                /**
                 * LocaleDecimalPipe transform method.
                 *
                 * @param value The number to be localized
                 * @param digits The format of the number
                 * @return The locale decimal
                 */
                LocaleDecimalPipe.prototype.transform = function (value, digits) {
                    if (digits === void 0) { digits = null; }
                    // Updates the locale decimal for the value if:
                    // - the value has changed;
                    // - the locale decimal is empty;
                    // - the default locale has changed.
                    if (this.value != value || this.localeDecimal == "" || this.defaultLocale != this.locale.getDefaultLocale()) {
                        // Updates the default locale for LocaleDecimalPipe.
                        this.defaultLocale = this.locale.getDefaultLocale();
                        // Updates the value of LocaleDecimalPipe.
                        this.value = value;
                        // Gets the locale decimal.
                        this.localeDecimal = LocaleNumber.format(this.defaultLocale, value, intl_1.NumberFormatStyle.Decimal, digits);
                    }
                    return this.localeDecimal;
                };
                LocaleDecimalPipe = __decorate([
                    core_1.Pipe({
                        name: 'localedecimal',
                        pure: false // Required to update the value.
                    }),
                    core_1.Injectable(), 
                    __metadata('design:paramtypes', [locale_service_1.LocaleService])
                ], LocaleDecimalPipe);
                return LocaleDecimalPipe;
            }(LocaleNumber));
            exports_1("LocaleDecimalPipe", LocaleDecimalPipe);
            /**
             * 'localepercent' pipe function.
             */
            LocalePercentPipe = (function (_super) {
                __extends(LocalePercentPipe, _super);
                function LocalePercentPipe(locale) {
                    _super.call(this);
                    this.locale = locale;
                }
                /**
                 * LocalePercentPipe transform method.
                 *
                 * @param value The number to be localized
                 * @param digits The format of the number
                 * @return The locale percent
                 */
                LocalePercentPipe.prototype.transform = function (value, digits) {
                    if (digits === void 0) { digits = null; }
                    // Updates the locale percent for the value if:
                    // - the value has changed;
                    // - the locale percent is empty;
                    // - the default locale has changed.
                    if (this.value != value || this.localePercent == "" || this.defaultLocale != this.locale.getDefaultLocale()) {
                        // Updates the default locale for LocalePercentPipe.
                        this.defaultLocale = this.locale.getDefaultLocale();
                        // Updates the value of LocalePercentPipe.
                        this.value = value;
                        // Gets the locale percent.
                        this.localePercent = LocaleNumber.format(this.defaultLocale, value, intl_1.NumberFormatStyle.Percent, digits);
                    }
                    return this.localePercent;
                };
                LocalePercentPipe = __decorate([
                    core_1.Pipe({
                        name: 'localepercent',
                        pure: false // Required to update the value.
                    }),
                    core_1.Injectable(), 
                    __metadata('design:paramtypes', [locale_service_1.LocaleService])
                ], LocalePercentPipe);
                return LocalePercentPipe;
            }(LocaleNumber));
            exports_1("LocalePercentPipe", LocalePercentPipe);
            /**
             * 'localecurrency' pipe function.
             */
            LocaleCurrencyPipe = (function (_super) {
                __extends(LocaleCurrencyPipe, _super);
                function LocaleCurrencyPipe(locale) {
                    _super.call(this);
                    this.locale = locale;
                }
                /**
                 * LocaleCurrencyPipe transform method.
                 *
                 * @param value The number to be localized
                 * @param symbolDisplay Indicates whether to use the currency symbol
                 * @param digits The format of the number
                 * @return The locale currency
                 */
                LocaleCurrencyPipe.prototype.transform = function (value, symbolDisplay, digits) {
                    if (symbolDisplay === void 0) { symbolDisplay = false; }
                    if (digits === void 0) { digits = null; }
                    // Updates the locale currency for the value if:
                    // - the value has changed;
                    // - the locale currency is empty;
                    // - the currency code has changed;
                    // - the default locale has changed.
                    if (this.value != value
                        || this.localeCurrency == ""
                        || this.currencyCode != this.locale.getCurrentCurrency()
                        || this.defaultLocale != this.locale.getDefaultLocale()) {
                        // Updates the currency code for LocaleCurrencyPipe.
                        this.currencyCode = this.locale.getCurrentCurrency();
                        // Updates the default locale for LocaleCurrencyPipe.
                        this.defaultLocale = this.locale.getDefaultLocale();
                        // Updates the value of LocaleCurrencyPipe.
                        this.value = value;
                        // Gets the locale currency.
                        this.localeCurrency = LocaleNumber.format(this.defaultLocale, value, intl_1.NumberFormatStyle.Currency, digits, this.currencyCode, symbolDisplay);
                    }
                    return this.localeCurrency;
                };
                LocaleCurrencyPipe = __decorate([
                    core_1.Pipe({
                        name: 'localecurrency',
                        pure: false // Required to update the value.
                    }),
                    core_1.Injectable(), 
                    __metadata('design:paramtypes', [locale_service_1.LocaleService])
                ], LocaleCurrencyPipe);
                return LocaleCurrencyPipe;
            }(LocaleNumber));
            exports_1("LocaleCurrencyPipe", LocaleCurrencyPipe);
        }
    }
});
