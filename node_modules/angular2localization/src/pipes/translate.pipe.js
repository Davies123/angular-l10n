/**
 * ANGULAR 2 LOCALIZATION
 * An Angular 2 library to translate messages, dates and numbers.
 * Written by Roberto Simonetti.
 * MIT license.
 * https://github.com/robisim74/angular2localization
 */
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('@angular/core');
var intl_1 = require('@angular/common/src/facade/intl');
// Services.
var localization_service_1 = require('../services/localization.service');
var locale_service_1 = require('../services/locale.service');
var locale_number_1 = require('../services/locale-number');
var Intl_support_1 = require('../services/Intl-support');
/**
 * 'translate' pipe function.
 */
var TranslatePipe = (function () {
    function TranslatePipe(localization, locale) {
        this.localization = localization;
        this.locale = locale;
    }
    /**
     * TranslatePipe transform method.
     *
     * @param key The key to be translated
     * @param lang The current language code for the LocalizationService
     * @return The value of translation
     */
    TranslatePipe.prototype.transform = function (key, lang) {
        // Checks the service state.
        if (this.localization.serviceState == localization_service_1.ServiceState.isReady) {
            var REGEXP = /^\d+\b/;
            var keyStr = key;
            // i18n plural.
            if (REGEXP.exec(key) != null) {
                // Tries to extract the number.
                var keyNum = parseFloat(key);
                // Tries to extract the string. 
                keyStr = key.replace(REGEXP, '');
                keyStr = keyStr.trim();
                // Checks the number & support for Intl.
                if (!isNaN(keyNum) && Intl_support_1.IntlSupport.NumberFormat(this.locale.getDefaultLocale()) == true) {
                    // Localizes the number.
                    key = key.replace(/^\d+/, locale_number_1.LocaleNumber.format(this.locale.getDefaultLocale(), keyNum, intl_1.NumberFormatStyle.Decimal, '1.0-3'));
                }
            }
            // Gets the value of translation for the key string.
            var value = this.localization.translate(keyStr);
            return key.replace(keyStr, value);
        }
    };
    TranslatePipe = __decorate([
        core_1.Pipe({
            name: 'translate',
            pure: true
        }),
        core_1.Injectable(), 
        __metadata('design:paramtypes', [localization_service_1.LocalizationService, locale_service_1.LocaleService])
    ], TranslatePipe);
    return TranslatePipe;
}());
exports.TranslatePipe = TranslatePipe;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNsYXRlLnBpcGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ0cmFuc2xhdGUucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7Ozs7Ozs7Ozs7O0FBRUgscUJBQThDLGVBQWUsQ0FBQyxDQUFBO0FBQzlELHFCQUFnQyxpQ0FBaUMsQ0FBQyxDQUFBO0FBRWxFLFlBQVk7QUFDWixxQ0FBZ0Qsa0NBQWtDLENBQUMsQ0FBQTtBQUNuRiwrQkFBNEIsNEJBQTRCLENBQUMsQ0FBQTtBQUN6RCw4QkFBMkIsMkJBQTJCLENBQUMsQ0FBQTtBQUN2RCw2QkFBMEIsMEJBQTBCLENBQUMsQ0FBQTtBQUVyRDs7R0FFRztBQXNEVztJQUVWLHVCQUFtQixZQUFpQyxFQUFTLE1BQXFCO1FBQS9ELGlCQUFZLEdBQVosWUFBWSxDQUFxQjtRQUFTLFdBQU0sR0FBTixNQUFNLENBQWU7SUFBSSxDQUFDO0lBRXZGOzs7Ozs7T0FNRztJQUNILGlDQUFTLEdBQVQsVUFBVSxHQUFXLEVBQUUsSUFBWTtRQUUvQiw0QkFBNEI7UUFDNUIsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxZQUFZLElBQUksbUNBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBRXpELElBQUksTUFBTSxHQUFXLFFBQVEsQ0FBQztZQUM5QixJQUFJLE1BQU0sR0FBVyxHQUFHLENBQUM7WUFFekIsZUFBZTtZQUNmLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQztnQkFFM0IsK0JBQStCO2dCQUMvQixJQUFJLE1BQU0sR0FBVyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBRXJDLGdDQUFnQztnQkFDaEMsTUFBTSxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDO2dCQUNqQyxNQUFNLEdBQUcsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUV2Qix3Q0FBd0M7Z0JBQ3hDLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLDBCQUFXLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUM7b0JBRXJGLHdCQUF3QjtvQkFDeEIsR0FBRyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLDRCQUFZLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLEVBQUUsRUFBRSxNQUFNLEVBQUUsd0JBQWlCLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7Z0JBRS9ILENBQUM7WUFFTCxDQUFDO1lBRUQsb0RBQW9EO1lBQ3BELElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBRWhELE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQztRQUV0QyxDQUFDO0lBRUwsQ0FBQztJQW5HTDtRQUFDLFdBQUksQ0FBQztZQUNGLElBQUksRUFBRSxXQUFXO1lBQ2pCLElBQUksRUFBRSxJQUFJO1NBQ2IsQ0FBQztRQWtERCxpQkFBVSxFQUFFOztxQkFBQTtJQWdEYixvQkFBQztBQUFELENBQUMsQUFoRGEsSUFnRGI7QUFoRDBCLHFCQUFhLGdCQWdEdkMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBBTkdVTEFSIDIgTE9DQUxJWkFUSU9OXHJcbiAqIEFuIEFuZ3VsYXIgMiBsaWJyYXJ5IHRvIHRyYW5zbGF0ZSBtZXNzYWdlcywgZGF0ZXMgYW5kIG51bWJlcnMuXHJcbiAqIFdyaXR0ZW4gYnkgUm9iZXJ0byBTaW1vbmV0dGkuXHJcbiAqIE1JVCBsaWNlbnNlLlxyXG4gKiBodHRwczovL2dpdGh1Yi5jb20vcm9iaXNpbTc0L2FuZ3VsYXIybG9jYWxpemF0aW9uXHJcbiAqL1xyXG5cclxuaW1wb3J0IHtJbmplY3RhYmxlLCBQaXBlLCBQaXBlVHJhbnNmb3JtfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtOdW1iZXJGb3JtYXRTdHlsZX0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL3NyYy9mYWNhZGUvaW50bCc7XHJcblxyXG4vLyBTZXJ2aWNlcy5cclxuaW1wb3J0IHtMb2NhbGl6YXRpb25TZXJ2aWNlLCBTZXJ2aWNlU3RhdGV9IGZyb20gJy4uL3NlcnZpY2VzL2xvY2FsaXphdGlvbi5zZXJ2aWNlJztcclxuaW1wb3J0IHtMb2NhbGVTZXJ2aWNlfSBmcm9tICcuLi9zZXJ2aWNlcy9sb2NhbGUuc2VydmljZSc7XHJcbmltcG9ydCB7TG9jYWxlTnVtYmVyfSBmcm9tICcuLi9zZXJ2aWNlcy9sb2NhbGUtbnVtYmVyJztcclxuaW1wb3J0IHtJbnRsU3VwcG9ydH0gZnJvbSAnLi4vc2VydmljZXMvSW50bC1zdXBwb3J0JztcclxuXHJcbi8qKlxyXG4gKiAndHJhbnNsYXRlJyBwaXBlIGZ1bmN0aW9uLlxyXG4gKi9cclxuQFBpcGUoe1xyXG4gICAgbmFtZTogJ3RyYW5zbGF0ZScsXHJcbiAgICBwdXJlOiB0cnVlXHJcbn0pXHJcblxyXG4vKipcclxuICogVHJhbnNsYXRlUGlwZSBjbGFzcy5cclxuICogXHJcbiAqIEdldHRpbmcgdGhlIG1lc3NhZ2UgdHJhbnNsYXRpb246XHJcbiAqIFxyXG4gKiBleHByZXNzaW9uIHwgdHJhbnNsYXRlOmxhbmdcclxuICogXHJcbiAqIHdoZXJlICdleHByZXNzaW9uJyBpcyBhIHN0cmluZyBrZXkgdGhhdCBpbmRpY2F0ZXMgdGhlIG1lc3NhZ2UgdG8gdHJhbnNsYXRlIGFuZCAnbGFuZycgaXMgdGhlIGxhbmd1YWdlIGNvZGUgZm9yIHRoZSBMb2NhbGl6YXRpb25TZXJ2aWNlLlxyXG4gKiBcclxuICogRm9yIGV4YW1wbGUsIHRvIGdldCB0aGUgdHJhbnNsYXRpb24sIGFkZCBpbiB0aGUgdGVtcGxhdGU6XHJcbiAqIFxyXG4gKiB7eyAnVElUTEUnIHwgdHJhbnNsYXRlOmxhbmcgfX1cclxuICogXHJcbiAqIGFuZCBpbmNsdWRlIGluIHRoZSBjb21wb25lbnQ6XHJcbiAqIFxyXG4gKiBpbXBvcnQge0xvY2FsaXphdGlvblNlcnZpY2V9IGZyb20gJ2FuZ3VsYXIybG9jYWxpemF0aW9uL2FuZ3VsYXIybG9jYWxpemF0aW9uJztcclxuICogaW1wb3J0IHtUcmFuc2xhdGVQaXBlfSBmcm9tICdhbmd1bGFyMmxvY2FsaXphdGlvbi9hbmd1bGFyMmxvY2FsaXphdGlvbic7XHJcbiAqIFxyXG4gKiBAQ29tcG9uZW50KHtcclxuICogICAgIC4uLlxyXG4gKiAgICAgcGlwZXM6IFtUcmFuc2xhdGVQaXBlXVxyXG4gKiB9KVxyXG4gKiBcclxuICogZXhwb3J0IGNsYXNzIEFwcENvbXBvbmVudCB7XHJcbiAqIFxyXG4gKiAgICAgY29uc3RydWN0b3IocHVibGljIGxvY2FsaXphdGlvbjogTG9jYWxpemF0aW9uU2VydmljZSkge1xyXG4gKiAgICAgICAgIC4uLlxyXG4gKiAgICAgfVxyXG4gKiBcclxuICogICAgIC8vIEdldHMgdGhlIGxhbmd1YWdlIGNvZGUgZm9yIHRoZSBMb2NhbGl6YXRpb25TZXJ2aWNlLlxyXG4gKiAgICAgZ2V0IGxhbmcoKTogc3RyaW5nIHtcclxuICpcclxuICogICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGl6YXRpb24ubGFuZ3VhZ2VDb2RlO1xyXG4gKiAgICAgIFxyXG4gKiAgICAgfVxyXG4gKiBcclxuICogfVxyXG4gKiBcclxuICogV2l0aCBBbmd1bGFyIDIgSTE4blNlbGVjdFBpcGUgdGhhdCBkaXNwbGF5cyB0aGUgc3RyaW5nIHRoYXQgbWF0Y2hlcyB0aGUgY3VycmVudCB2YWx1ZTpcclxuICpcclxuICoge3sgZXhwcmVzc2lvbiB8IGkxOG5TZWxlY3Q6bWFwcGluZyB8IHRyYW5zbGF0ZTpsYW5nIH19XHJcbiAqIFxyXG4gKiBXaXRoIEFuZ3VsYXIgMiBJMThuUGx1cmFsUGlwZSB0aGF0IHBsdXJhbGl6ZXMgdGhlIHZhbHVlIHByb3Blcmx5OlxyXG4gKlxyXG4gKiB7eyBleHByZXNzaW9uIHwgaTE4blBsdXJhbDptYXBwaW5nIHwgdHJhbnNsYXRlOmxhbmcgfX1cclxuICogXHJcbiAqIEBhdXRob3IgUm9iZXJ0byBTaW1vbmV0dGlcclxuICovXHJcbkBJbmplY3RhYmxlKCkgZXhwb3J0IGNsYXNzIFRyYW5zbGF0ZVBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgbG9jYWxpemF0aW9uOiBMb2NhbGl6YXRpb25TZXJ2aWNlLCBwdWJsaWMgbG9jYWxlOiBMb2NhbGVTZXJ2aWNlKSB7IH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFRyYW5zbGF0ZVBpcGUgdHJhbnNmb3JtIG1ldGhvZC5cclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIGtleSBUaGUga2V5IHRvIGJlIHRyYW5zbGF0ZWRcclxuICAgICAqIEBwYXJhbSBsYW5nIFRoZSBjdXJyZW50IGxhbmd1YWdlIGNvZGUgZm9yIHRoZSBMb2NhbGl6YXRpb25TZXJ2aWNlXHJcbiAgICAgKiBAcmV0dXJuIFRoZSB2YWx1ZSBvZiB0cmFuc2xhdGlvblxyXG4gICAgICovXHJcbiAgICB0cmFuc2Zvcm0oa2V5OiBzdHJpbmcsIGxhbmc6IHN0cmluZyk6IHN0cmluZyB7XHJcblxyXG4gICAgICAgIC8vIENoZWNrcyB0aGUgc2VydmljZSBzdGF0ZS5cclxuICAgICAgICBpZiAodGhpcy5sb2NhbGl6YXRpb24uc2VydmljZVN0YXRlID09IFNlcnZpY2VTdGF0ZS5pc1JlYWR5KSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgUkVHRVhQOiBSZWdFeHAgPSAvXlxcZCtcXGIvO1xyXG4gICAgICAgICAgICB2YXIga2V5U3RyOiBzdHJpbmcgPSBrZXk7XHJcblxyXG4gICAgICAgICAgICAvLyBpMThuIHBsdXJhbC5cclxuICAgICAgICAgICAgaWYgKFJFR0VYUC5leGVjKGtleSkgIT0gbnVsbCkge1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIFRyaWVzIHRvIGV4dHJhY3QgdGhlIG51bWJlci5cclxuICAgICAgICAgICAgICAgIHZhciBrZXlOdW06IG51bWJlciA9IHBhcnNlRmxvYXQoa2V5KTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBUcmllcyB0byBleHRyYWN0IHRoZSBzdHJpbmcuIFxyXG4gICAgICAgICAgICAgICAga2V5U3RyID0ga2V5LnJlcGxhY2UoUkVHRVhQLCAnJyk7XHJcbiAgICAgICAgICAgICAgICBrZXlTdHIgPSBrZXlTdHIudHJpbSgpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIENoZWNrcyB0aGUgbnVtYmVyICYgc3VwcG9ydCBmb3IgSW50bC5cclxuICAgICAgICAgICAgICAgIGlmICghaXNOYU4oa2V5TnVtKSAmJiBJbnRsU3VwcG9ydC5OdW1iZXJGb3JtYXQodGhpcy5sb2NhbGUuZ2V0RGVmYXVsdExvY2FsZSgpKSA9PSB0cnVlKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIExvY2FsaXplcyB0aGUgbnVtYmVyLlxyXG4gICAgICAgICAgICAgICAgICAgIGtleSA9IGtleS5yZXBsYWNlKC9eXFxkKy8sIExvY2FsZU51bWJlci5mb3JtYXQodGhpcy5sb2NhbGUuZ2V0RGVmYXVsdExvY2FsZSgpLCBrZXlOdW0sIE51bWJlckZvcm1hdFN0eWxlLkRlY2ltYWwsICcxLjAtMycpKTtcclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBHZXRzIHRoZSB2YWx1ZSBvZiB0cmFuc2xhdGlvbiBmb3IgdGhlIGtleSBzdHJpbmcuXHJcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IHRoaXMubG9jYWxpemF0aW9uLnRyYW5zbGF0ZShrZXlTdHIpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGtleS5yZXBsYWNlKGtleVN0ciwgdmFsdWUpO1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxufSJdfQ==