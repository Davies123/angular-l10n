/**
 * ANGULAR 2 LOCALIZATION
 * An Angular 2 library to translate messages, dates and numbers.
 * Written by Roberto Simonetti.
 * MIT license.
 * https://github.com/robisim74/angular2localization
 */
System.register(['@angular/core', '@angular/common/src/facade/intl', '../services/localization.service', '../services/locale.service', '../services/locale-number', '../services/Intl-support'], function(exports_1, context_1) {
    "use strict";
    var __moduleName = context_1 && context_1.id;
    var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = (this && this.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1, intl_1, localization_service_1, locale_service_1, locale_number_1, Intl_support_1;
    var TranslatePipe;
    return {
        setters:[
            function (core_1_1) {
                core_1 = core_1_1;
            },
            function (intl_1_1) {
                intl_1 = intl_1_1;
            },
            function (localization_service_1_1) {
                localization_service_1 = localization_service_1_1;
            },
            function (locale_service_1_1) {
                locale_service_1 = locale_service_1_1;
            },
            function (locale_number_1_1) {
                locale_number_1 = locale_number_1_1;
            },
            function (Intl_support_1_1) {
                Intl_support_1 = Intl_support_1_1;
            }],
        execute: function() {
            /**
             * 'translate' pipe function.
             */
            TranslatePipe = (function () {
                function TranslatePipe(localization, locale) {
                    this.localization = localization;
                    this.locale = locale;
                }
                /**
                 * TranslatePipe transform method.
                 *
                 * @param key The key to be translated
                 * @param lang The current language code for the LocalizationService
                 * @return The value of translation
                 */
                TranslatePipe.prototype.transform = function (key, lang) {
                    // Checks the service state.
                    if (this.localization.serviceState == localization_service_1.ServiceState.isReady) {
                        var REGEXP = /^\d+\b/;
                        var keyStr = key;
                        // i18n plural.
                        if (REGEXP.exec(key) != null) {
                            // Tries to extract the number.
                            var keyNum = parseFloat(key);
                            // Tries to extract the string. 
                            keyStr = key.replace(REGEXP, '');
                            keyStr = keyStr.trim();
                            // Checks the number & support for Intl.
                            if (!isNaN(keyNum) && Intl_support_1.IntlSupport.NumberFormat(this.locale.getDefaultLocale()) == true) {
                                // Localizes the number.
                                key = key.replace(/^\d+/, locale_number_1.LocaleNumber.format(this.locale.getDefaultLocale(), keyNum, intl_1.NumberFormatStyle.Decimal, '1.0-3'));
                            }
                        }
                        // Gets the value of translation for the key string.
                        var value = this.localization.translate(keyStr);
                        return key.replace(keyStr, value);
                    }
                };
                TranslatePipe = __decorate([
                    core_1.Pipe({
                        name: 'translate',
                        pure: true
                    }),
                    core_1.Injectable(), 
                    __metadata('design:paramtypes', [localization_service_1.LocalizationService, locale_service_1.LocaleService])
                ], TranslatePipe);
                return TranslatePipe;
            }());
            exports_1("TranslatePipe", TranslatePipe);
        }
    }
});
