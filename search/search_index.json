{
    "docs": [
        {
            "location": "/",
            "text": "Angular localization\n\n\nAn Angular library to translate messages, dates and numbers\n\n\n\n\n\n\n\n\nThis library is for localization of \nAngular 2+\n apps written in TypeScript, ES6 or ES5. \nIt allows, in addition to translation, to localize numbers and dates of your app, adding \nlanguage code\n, \ncountry code\n, \ncurrency code\n, \ntimezone\n and optionally \nscript code\n, \nnumbering system\n and \ncalendar\n, through \nInternationalization API\n. It also implements the validation of numbers by locales.\n\n\n\n\n\n\n\n\nSample app\n built with Angular CLI & Material, and its \nsource code\n.\n\n\n\n\n\n\n\n\nLibrary version: 4.1.0 - \nChangelog\n \n\n\n\n\n\n\n\n\nInstalling\n\n\nYou can add \nangular-l10n\n to your project using \nnpm\n:\n\n\nnpm install angular-l10n --save \n\n\n\n\nTo install the pre-release package:\n\n\nnpm install --save angular-l10n@next\n\n\n\n\n\n\n\n\nLoading\n\n\nUsing SystemJS configuration\n\n\nSystem.config({\n    map: {\n        'angular-l10n': 'node_modules/angular-l10n/bundles/angular-l10n.umd.js'\n    }\n});\n\n\n\n\n\n\nAngular CLI\n\n\nNo need to set up anything, just import it in your code.\n\n\n\n\nRollup or webpack\n\n\nNo need to set up anything, just import it in your code.\n\n\n\n\nPlain JavaScript\n\n\nIf you build apps in Angular using ES5, you can include the \numd\n bundle in your \nindex.html\n:\n\n\n<script src=\"node_modules/angular-l10n/bundles/angular-l10n.umd.js\"></script>\n\n\n\n\nand use global \nng.l10n\n namespace.\n\n\n\n\n\n\nAoT compilation, Server Side Rendering & strict\n\n\nThis library is compatible with AoT compilation & Server Side Rendering. It also supports the \nstrict\n TypeScript compiler option.",
            "title": "Home"
        },
        {
            "location": "/#angular-localization",
            "text": "An Angular library to translate messages, dates and numbers     This library is for localization of  Angular 2+  apps written in TypeScript, ES6 or ES5. \nIt allows, in addition to translation, to localize numbers and dates of your app, adding  language code ,  country code ,  currency code ,  timezone  and optionally  script code ,  numbering system  and  calendar , through  Internationalization API . It also implements the validation of numbers by locales.     Sample app  built with Angular CLI & Material, and its  source code .     Library version: 4.1.0 -  Changelog",
            "title": "Angular localization"
        },
        {
            "location": "/#installing",
            "text": "You can add  angular-l10n  to your project using  npm :  npm install angular-l10n --save   To install the pre-release package:  npm install --save angular-l10n@next",
            "title": "Installing"
        },
        {
            "location": "/#loading",
            "text": "",
            "title": "Loading"
        },
        {
            "location": "/#using-systemjs-configuration",
            "text": "System.config({\n    map: {\n        'angular-l10n': 'node_modules/angular-l10n/bundles/angular-l10n.umd.js'\n    }\n});",
            "title": "Using SystemJS configuration"
        },
        {
            "location": "/#angular-cli",
            "text": "No need to set up anything, just import it in your code.",
            "title": "Angular CLI"
        },
        {
            "location": "/#rollup-or-webpack",
            "text": "No need to set up anything, just import it in your code.",
            "title": "Rollup or webpack"
        },
        {
            "location": "/#plain-javascript",
            "text": "If you build apps in Angular using ES5, you can include the  umd  bundle in your  index.html :  <script src=\"node_modules/angular-l10n/bundles/angular-l10n.umd.js\"></script>  and use global  ng.l10n  namespace.",
            "title": "Plain JavaScript"
        },
        {
            "location": "/#aot-compilation-server-side-rendering-strict",
            "text": "This library is compatible with AoT compilation & Server Side Rendering. It also supports the  strict  TypeScript compiler option.",
            "title": "AoT compilation, Server Side Rendering &amp; strict"
        },
        {
            "location": "/quick-start/",
            "text": "Quick start\n\n\n\n\n\n\nFirst scenario: you only need to translate texts\n\n\nInstall the library:\n\n\nnpm install angular-l10n --save\n\n\n\n\nImport the modules you need and configure the library in \napp.module.ts\n:\n\n\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { AppComponent } from './app.component';\nimport { HomeComponent } from './home/home.component';\n\nimport { L10nConfig, L10nLoader, TranslationModule, StorageStrategy, ProviderType } from 'angular-l10n';\n\nconst l10nConfig: L10nConfig = {\n    locale: {\n        languages: [\n            { code: 'en', dir: 'ltr' },\n            { code: 'it', dir: 'ltr' }\n        ],\n        language: 'en',\n        storage: StorageStrategy.Cookie\n    },\n    translation: {\n        providers: [\n            { type: ProviderType.Static, prefix: './assets/locale-' }\n        ],\n        caching: true,\n        missingValue: 'No key'\n    }\n};\n\n@NgModule({\n    imports: [\n        BrowserModule,\n        HttpClientModule,\n        TranslationModule.forRoot(l10nConfig)\n    ],\n    declarations: [AppComponent, HomeComponent],\n    bootstrap: [AppComponent]\n})\nexport class AppModule {\n\n    constructor(public l10nLoader: L10nLoader) {\n        this.l10nLoader.load();\n    }\n\n}\n\n\n\n\nAdd to \napp.component.ts\n:\n\n\nimport { Component, OnInit } from '@angular/core';\n\nimport { LocaleService, TranslationService, Language } from 'angular-l10n';\n\n@Component({\n    selector: 'app-root',\n    template: `\n        <h1>{{ title }}</h1>\n\n        <h3>{{ 'Change language' | translate:lang }}</h3>\n\n        <button (click)=\"selectLanguage('en');\">English</button>\n        <button (click)=\"selectLanguage('it');\">Italiano</button>\n\n        <app-home></app-home>\n    `\n})\nexport class AppComponent implements OnInit {\n\n    @Language() lang: string;\n\n    title: string;\n\n    constructor(public locale: LocaleService, public translation: TranslationService) { }\n\n    ngOnInit(): void {\n        this.translation.translationChanged().subscribe(\n            () => { this.title = this.translation.translate('Title'); }\n        );\n    }\n\n    selectLanguage(language: string): void {\n        this.locale.setCurrentLanguage(language);\n    }\n\n}\n\n\n\n\nAdd \nhome.component.ts\n:\n\n\nimport { Component, OnInit } from '@angular/core';\n\nimport { Language } from 'angular-l10n';\n\n@Component({\n    selector: 'app-home',\n    template: `\n        <p>{{ 'Greeting' | translate:lang }}</p>\n\n        <p title=\"{{ 'Greeting' | translate:lang }}\">{{ 'Subtitle' | translate:lang }}</p>\n    `\n})\nexport class HomeComponent implements OnInit {\n\n    @Language() lang: string;\n\n    ngOnInit(): void { }\n\n}\n\n\n\n\nand create the \njson\n files of the translations such as \nlocale-en.json\n and \nlocale-it.json\n in \nsrc/assets\n folder:\n\n\n{\n    \"Title\": \"Angular localization\",\n    \"Subtitle\": \"It's a small world\",\n    \"Change language\": \"Change language\",\n    \"Greeting\": \"Hi!\"\n}\n\n\n\n\n{\n    \"Title\": \"Localizzazione in Angular\",\n    \"Subtitle\": \"Il mondo \u00e8 piccolo\",\n    \"Change language\": \"Cambia lingua\",\n    \"Greeting\": \"Ciao!\"\n}\n\n\n\n\n\n\nUsing directives\n\n\nIn addition to the \npipes\n, you can use \ndirectives\n. Try to change \nhome.component.ts\n:\n\n\nimport { Component } from '@angular/core';\n\n@Component({\n    selector: 'app-home',\n    template: `\n        <p l10nTranslate>Greeting</p>\n\n        <p l10n-title title=\"Greeting\" l10nTranslate>Subtitle</p>\n    `\n})\nexport class HomeComponent { }\n\n\n\n\nNote that if you use in the component only the \ndirectives\n and not the \npipes\n, you don't need to use \n@Language()\n \ndecorator\n.\n\n\n\n\n\n\nSecond scenario: you need to translate texts, dates & numbers\n\n\nInstall the library:\n\n\nnpm install angular-l10n --save\n\n\n\n\nImport the modules you need and configure the library in \napp.module.ts\n:\n\n\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { AppComponent } from './app.component';\nimport { HomeComponent } from './home/home.component';\n\nimport { L10nConfig, L10nLoader, LocalizationModule, StorageStrategy, ProviderType } from 'angular-l10n';\n\nconst l10nConfig: L10nConfig = {\n    locale: {\n        languages: [\n            { code: 'en', dir: 'ltr' },\n            { code: 'it', dir: 'ltr' }\n        ],\n        defaultLocale: { languageCode: 'en', countryCode: 'US' },\n        currency: 'USD',\n        storage: StorageStrategy.Cookie\n    },\n    translation: {\n        providers: [\n            { type: ProviderType.Static, prefix: './assets/locale-' }\n        ],\n        caching: true,\n        missingValue: 'No key'\n    }\n};\n\n@NgModule({\n    imports: [\n        BrowserModule,\n        HttpClientModule,\n        LocalizationModule.forRoot(l10nConfig)\n    ],\n    declarations: [AppComponent, HomeComponent],\n    bootstrap: [AppComponent]\n})\nexport class AppModule {\n\n    constructor(public l10nLoader: L10nLoader) {\n        this.l10nLoader.load();\n    }\n\n}\n\n\n\n\nAdd to \napp.component.ts\n:\n\n\nimport { Component, OnInit } from '@angular/core';\n\nimport { LocaleService, TranslationService, Language } from 'angular-l10n';\n\n@Component({\n    selector: 'app-root',\n    template: `\n        <h1>{{ title }}</h1>\n\n        <h3>{{ 'Change country' | translate:lang }}</h3>\n\n        <button (click)=\"selectLocale('en', 'US', 'USD');\">United States</button>\n        <button (click)=\"selectLocale('en', 'GB', 'GBP');\">United Kingdom</button>\n        <button (click)=\"selectLocale('it', 'IT', 'EUR');\">Italia</button>\n\n        <app-home></app-home>\n    `\n})\nexport class AppComponent implements OnInit {\n\n    @Language() lang: string;\n\n    title: string;\n\n    constructor(public locale: LocaleService, public translation: TranslationService) { }\n\n    ngOnInit(): void {\n        this.translation.translationChanged().subscribe(\n            () => { this.title = this.translation.translate('Title'); }\n        );\n    }\n\n    selectLocale(language: string, country: string, currency: string): void {\n        this.locale.setDefaultLocale(language, country);\n        this.locale.setCurrentCurrency(currency);\n    }\n\n}\n\n\n\n\nand create the \njson\n files of the translations such as \nlocale-en.json\n and \nlocale-it.json\n in \nsrc/assets\n folder:\n\n\n{\n    \"Title\": \"Angular localization\",\n    \"Subtitle\": \"It's a small world\",\n    \"Change country\": \"Change country\",\n    \"Greeting\": \"Hi!\",\n    \"Change\": \"Change\"\n}\n\n\n\n\n{\n    \"Title\": \"Localizzazione in Angular\",\n    \"Subtitle\": \"Il mondo \u00e8 piccolo\",\n    \"Change country\": \"Cambia Paese\",\n    \"Greeting\": \"Ciao!\",\n    \"Change\": \"Cambia\"\n}\n\n\n\n\nAdd \nhome.component.ts\n:\n\n\nimport { Component, OnInit } from '@angular/core';\n\nimport { Language, DefaultLocale, Currency } from 'angular-l10n';\n\n@Component({\n    selector: 'app-home',\n    template: `\n        <p>{{ 'Greeting' | translate:lang }}</p>\n\n        <p title=\"{{ 'Greeting' | translate:lang }}\">{{ 'Subtitle' | translate:lang }}</p>\n\n        <p>{{ today | l10nDate:defaultLocale:'fullDate' }}</p>       \n        <p>{{ pi | l10nDecimal:defaultLocale:'1.5-5' }}</p>\n        <p>{{ value | l10nCurrency:defaultLocale:currency:'symbol':'1.2-2' }}</p>\n\n        <button (click)=\"change()\">{{ 'Change' | translate:lang }}</button>\n    `\n})\nexport class HomeComponent implements OnInit {\n\n    @Language() lang: string;\n    @DefaultLocale() defaultLocale: string;\n    @Currency() currency: string;\n\n    today: number;\n    pi: number;\n    value: number;\n\n    ngOnInit(): void {\n        this.today = Date.now();\n        this.pi = 3.14159;\n        this.value = Math.round(Math.random() * 1000000) / 100;\n    }\n\n    change(): void {\n        this.value = Math.round(Math.random() * 1000000) / 100;\n    }\n\n}\n\n\n\n\nFinally, to extend the support to old browsers, add the following script tag in \nindex.html\n:\n\n\n<script src=\"https://cdn.polyfill.io/v2/polyfill.min.js?features=Intl.~locale.en-US,Intl.~locale.en-GB,Intl.~locale.it-IT\"></script>\n\n\n\n\n\n\nUsing directives\n\n\nIn addition to the \npipes\n, you can use \ndirectives\n. Try to change \nhome.component.ts\n:\n\n\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n    selector: 'app-home',\n    template: `\n        <p l10nTranslate>Greeting</p>\n\n        <p l10n-title title=\"Greeting\" l10nTranslate>Subtitle</p>\n\n        <p l10nDate=\"fullDate\">{{ today }}</p>    \n        <p l10nDecimal=\"1.5-5\">{{ pi }}</p>\n        <p l10nCurrency=\"1.2-2\" [currencyDisplay]=\"'symbol'\">{{ value }}</p>\n\n        <button (click)=\"change()\" l10nTranslate>Change</button>\n    `\n})\nexport class HomeComponent implements OnInit {\n\n    today: number;\n    pi: number;\n    value: number;\n\n    ngOnInit(): void {\n        this.today = Date.now();\n        this.pi = 3.14159;\n        this.value = Math.round(Math.random() * 1000000) / 100;\n    }\n\n    change(): void {\n        this.value = Math.round(Math.random() * 1000000) / 100;\n    }\n\n}\n\n\n\n\nNote that if you use in the component only the \ndirectives\n and not the \npipes\n, you don't need to use \ndecorators\n.\n\n\n\n\n\n\nAdvanced initialization\n\n\nIf you want the app to be rendered only after the translation file is loaded, \nyou can use these settings in \napp.module.ts\n:\n\n\nimport { NgModule, APP_INITIALIZER } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { AppComponent } from './app.component';\nimport { HomeComponent } from './home/home.component';\n\nimport { L10nConfig, L10nLoader, TranslationModule, StorageStrategy, ProviderType } from 'angular-l10n';\n\nconst l10nConfig: L10nConfig = {\n    locale: {\n        languages: [\n            { code: 'en', dir: 'ltr' },\n            { code: 'it', dir: 'ltr' }\n        ],\n        language: 'en',\n        storage: StorageStrategy.Cookie\n    },\n    translation: {\n        providers: [\n            { type: ProviderType.Static, prefix: './assets/locale-' }\n        ],\n        caching: true,\n        missingValue: 'No key'\n    }\n};\n\n// Advanced initialization.\nexport function initL10n(l10nLoader: L10nLoader): Function {\n    return () => l10nLoader.load();\n}\n\n// APP_INITIALIZER will execute the function when the app is initialized and delay what it provides.\n@NgModule({\n    imports: [\n        BrowserModule,\n        HttpClientModule,\n        TranslationModule.forRoot(l10nConfig)\n    ],\n    declarations: [AppComponent, HomeComponent],\n    providers: [\n        {\n            provide: APP_INITIALIZER,\n            useFactory: initL10n,\n            deps: [L10nLoader],\n            multi: true\n        }\n    ],\n    bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n\n\n\n\n\n\n\nAppendix A - Using Angular CLI\n\n\nIf you are using \nAngular CLI\n, you have to add the \njson\n files in \nsrc/assets\n folder, \ncopied as-is when building your project. \nAlways configure your provider in this way:\n\n\n...\n    providers: [\n        { type: ProviderType.Static, prefix: './assets/locale-' }\n    ],\n...\n\n\n\n\n\n\n\n\nAppendix B - Using Ionic\n\n\nYou have to add the \njson\n files in \nwww/assets\n folder. \nAlways configure your provider in this way:\n\n\n...\n    providers: [\n        { type: ProviderType.Static, prefix: './assets/locale-' }\n    ],\n...\n\n\n\n\n\n\n\n\nAppendix C - Using Angular Meteor\n\n\nYou must create \npublic/assets\n folder at the root of your app. \nIn this way, \nassets\n folder is copied directly into your application bundle. \nAlways configure your provider in this way:\n\n\n...\n    providers: [\n        { type: ProviderType.Static, prefix: './assets/locale-' }\n    ],\n...",
            "title": "Quick start"
        },
        {
            "location": "/quick-start/#quick-start",
            "text": "",
            "title": "Quick start"
        },
        {
            "location": "/quick-start/#first-scenario-you-only-need-to-translate-texts",
            "text": "Install the library:  npm install angular-l10n --save  Import the modules you need and configure the library in  app.module.ts :  import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { AppComponent } from './app.component';\nimport { HomeComponent } from './home/home.component';\n\nimport { L10nConfig, L10nLoader, TranslationModule, StorageStrategy, ProviderType } from 'angular-l10n';\n\nconst l10nConfig: L10nConfig = {\n    locale: {\n        languages: [\n            { code: 'en', dir: 'ltr' },\n            { code: 'it', dir: 'ltr' }\n        ],\n        language: 'en',\n        storage: StorageStrategy.Cookie\n    },\n    translation: {\n        providers: [\n            { type: ProviderType.Static, prefix: './assets/locale-' }\n        ],\n        caching: true,\n        missingValue: 'No key'\n    }\n};\n\n@NgModule({\n    imports: [\n        BrowserModule,\n        HttpClientModule,\n        TranslationModule.forRoot(l10nConfig)\n    ],\n    declarations: [AppComponent, HomeComponent],\n    bootstrap: [AppComponent]\n})\nexport class AppModule {\n\n    constructor(public l10nLoader: L10nLoader) {\n        this.l10nLoader.load();\n    }\n\n}  Add to  app.component.ts :  import { Component, OnInit } from '@angular/core';\n\nimport { LocaleService, TranslationService, Language } from 'angular-l10n';\n\n@Component({\n    selector: 'app-root',\n    template: `\n        <h1>{{ title }}</h1>\n\n        <h3>{{ 'Change language' | translate:lang }}</h3>\n\n        <button (click)=\"selectLanguage('en');\">English</button>\n        <button (click)=\"selectLanguage('it');\">Italiano</button>\n\n        <app-home></app-home>\n    `\n})\nexport class AppComponent implements OnInit {\n\n    @Language() lang: string;\n\n    title: string;\n\n    constructor(public locale: LocaleService, public translation: TranslationService) { }\n\n    ngOnInit(): void {\n        this.translation.translationChanged().subscribe(\n            () => { this.title = this.translation.translate('Title'); }\n        );\n    }\n\n    selectLanguage(language: string): void {\n        this.locale.setCurrentLanguage(language);\n    }\n\n}  Add  home.component.ts :  import { Component, OnInit } from '@angular/core';\n\nimport { Language } from 'angular-l10n';\n\n@Component({\n    selector: 'app-home',\n    template: `\n        <p>{{ 'Greeting' | translate:lang }}</p>\n\n        <p title=\"{{ 'Greeting' | translate:lang }}\">{{ 'Subtitle' | translate:lang }}</p>\n    `\n})\nexport class HomeComponent implements OnInit {\n\n    @Language() lang: string;\n\n    ngOnInit(): void { }\n\n}  and create the  json  files of the translations such as  locale-en.json  and  locale-it.json  in  src/assets  folder:  {\n    \"Title\": \"Angular localization\",\n    \"Subtitle\": \"It's a small world\",\n    \"Change language\": \"Change language\",\n    \"Greeting\": \"Hi!\"\n}  {\n    \"Title\": \"Localizzazione in Angular\",\n    \"Subtitle\": \"Il mondo \u00e8 piccolo\",\n    \"Change language\": \"Cambia lingua\",\n    \"Greeting\": \"Ciao!\"\n}",
            "title": "First scenario: you only need to translate texts"
        },
        {
            "location": "/quick-start/#using-directives",
            "text": "In addition to the  pipes , you can use  directives . Try to change  home.component.ts :  import { Component } from '@angular/core';\n\n@Component({\n    selector: 'app-home',\n    template: `\n        <p l10nTranslate>Greeting</p>\n\n        <p l10n-title title=\"Greeting\" l10nTranslate>Subtitle</p>\n    `\n})\nexport class HomeComponent { }  Note that if you use in the component only the  directives  and not the  pipes , you don't need to use  @Language()   decorator .",
            "title": "Using directives"
        },
        {
            "location": "/quick-start/#second-scenario-you-need-to-translate-texts-dates-numbers",
            "text": "Install the library:  npm install angular-l10n --save  Import the modules you need and configure the library in  app.module.ts :  import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { AppComponent } from './app.component';\nimport { HomeComponent } from './home/home.component';\n\nimport { L10nConfig, L10nLoader, LocalizationModule, StorageStrategy, ProviderType } from 'angular-l10n';\n\nconst l10nConfig: L10nConfig = {\n    locale: {\n        languages: [\n            { code: 'en', dir: 'ltr' },\n            { code: 'it', dir: 'ltr' }\n        ],\n        defaultLocale: { languageCode: 'en', countryCode: 'US' },\n        currency: 'USD',\n        storage: StorageStrategy.Cookie\n    },\n    translation: {\n        providers: [\n            { type: ProviderType.Static, prefix: './assets/locale-' }\n        ],\n        caching: true,\n        missingValue: 'No key'\n    }\n};\n\n@NgModule({\n    imports: [\n        BrowserModule,\n        HttpClientModule,\n        LocalizationModule.forRoot(l10nConfig)\n    ],\n    declarations: [AppComponent, HomeComponent],\n    bootstrap: [AppComponent]\n})\nexport class AppModule {\n\n    constructor(public l10nLoader: L10nLoader) {\n        this.l10nLoader.load();\n    }\n\n}  Add to  app.component.ts :  import { Component, OnInit } from '@angular/core';\n\nimport { LocaleService, TranslationService, Language } from 'angular-l10n';\n\n@Component({\n    selector: 'app-root',\n    template: `\n        <h1>{{ title }}</h1>\n\n        <h3>{{ 'Change country' | translate:lang }}</h3>\n\n        <button (click)=\"selectLocale('en', 'US', 'USD');\">United States</button>\n        <button (click)=\"selectLocale('en', 'GB', 'GBP');\">United Kingdom</button>\n        <button (click)=\"selectLocale('it', 'IT', 'EUR');\">Italia</button>\n\n        <app-home></app-home>\n    `\n})\nexport class AppComponent implements OnInit {\n\n    @Language() lang: string;\n\n    title: string;\n\n    constructor(public locale: LocaleService, public translation: TranslationService) { }\n\n    ngOnInit(): void {\n        this.translation.translationChanged().subscribe(\n            () => { this.title = this.translation.translate('Title'); }\n        );\n    }\n\n    selectLocale(language: string, country: string, currency: string): void {\n        this.locale.setDefaultLocale(language, country);\n        this.locale.setCurrentCurrency(currency);\n    }\n\n}  and create the  json  files of the translations such as  locale-en.json  and  locale-it.json  in  src/assets  folder:  {\n    \"Title\": \"Angular localization\",\n    \"Subtitle\": \"It's a small world\",\n    \"Change country\": \"Change country\",\n    \"Greeting\": \"Hi!\",\n    \"Change\": \"Change\"\n}  {\n    \"Title\": \"Localizzazione in Angular\",\n    \"Subtitle\": \"Il mondo \u00e8 piccolo\",\n    \"Change country\": \"Cambia Paese\",\n    \"Greeting\": \"Ciao!\",\n    \"Change\": \"Cambia\"\n}  Add  home.component.ts :  import { Component, OnInit } from '@angular/core';\n\nimport { Language, DefaultLocale, Currency } from 'angular-l10n';\n\n@Component({\n    selector: 'app-home',\n    template: `\n        <p>{{ 'Greeting' | translate:lang }}</p>\n\n        <p title=\"{{ 'Greeting' | translate:lang }}\">{{ 'Subtitle' | translate:lang }}</p>\n\n        <p>{{ today | l10nDate:defaultLocale:'fullDate' }}</p>       \n        <p>{{ pi | l10nDecimal:defaultLocale:'1.5-5' }}</p>\n        <p>{{ value | l10nCurrency:defaultLocale:currency:'symbol':'1.2-2' }}</p>\n\n        <button (click)=\"change()\">{{ 'Change' | translate:lang }}</button>\n    `\n})\nexport class HomeComponent implements OnInit {\n\n    @Language() lang: string;\n    @DefaultLocale() defaultLocale: string;\n    @Currency() currency: string;\n\n    today: number;\n    pi: number;\n    value: number;\n\n    ngOnInit(): void {\n        this.today = Date.now();\n        this.pi = 3.14159;\n        this.value = Math.round(Math.random() * 1000000) / 100;\n    }\n\n    change(): void {\n        this.value = Math.round(Math.random() * 1000000) / 100;\n    }\n\n}  Finally, to extend the support to old browsers, add the following script tag in  index.html :  <script src=\"https://cdn.polyfill.io/v2/polyfill.min.js?features=Intl.~locale.en-US,Intl.~locale.en-GB,Intl.~locale.it-IT\"></script>",
            "title": "Second scenario: you need to translate texts, dates &amp; numbers"
        },
        {
            "location": "/quick-start/#using-directives_1",
            "text": "In addition to the  pipes , you can use  directives . Try to change  home.component.ts :  import { Component, OnInit } from '@angular/core';\n\n@Component({\n    selector: 'app-home',\n    template: `\n        <p l10nTranslate>Greeting</p>\n\n        <p l10n-title title=\"Greeting\" l10nTranslate>Subtitle</p>\n\n        <p l10nDate=\"fullDate\">{{ today }}</p>    \n        <p l10nDecimal=\"1.5-5\">{{ pi }}</p>\n        <p l10nCurrency=\"1.2-2\" [currencyDisplay]=\"'symbol'\">{{ value }}</p>\n\n        <button (click)=\"change()\" l10nTranslate>Change</button>\n    `\n})\nexport class HomeComponent implements OnInit {\n\n    today: number;\n    pi: number;\n    value: number;\n\n    ngOnInit(): void {\n        this.today = Date.now();\n        this.pi = 3.14159;\n        this.value = Math.round(Math.random() * 1000000) / 100;\n    }\n\n    change(): void {\n        this.value = Math.round(Math.random() * 1000000) / 100;\n    }\n\n}  Note that if you use in the component only the  directives  and not the  pipes , you don't need to use  decorators .",
            "title": "Using directives"
        },
        {
            "location": "/quick-start/#advanced-initialization",
            "text": "If you want the app to be rendered only after the translation file is loaded, \nyou can use these settings in  app.module.ts :  import { NgModule, APP_INITIALIZER } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { AppComponent } from './app.component';\nimport { HomeComponent } from './home/home.component';\n\nimport { L10nConfig, L10nLoader, TranslationModule, StorageStrategy, ProviderType } from 'angular-l10n';\n\nconst l10nConfig: L10nConfig = {\n    locale: {\n        languages: [\n            { code: 'en', dir: 'ltr' },\n            { code: 'it', dir: 'ltr' }\n        ],\n        language: 'en',\n        storage: StorageStrategy.Cookie\n    },\n    translation: {\n        providers: [\n            { type: ProviderType.Static, prefix: './assets/locale-' }\n        ],\n        caching: true,\n        missingValue: 'No key'\n    }\n};\n\n// Advanced initialization.\nexport function initL10n(l10nLoader: L10nLoader): Function {\n    return () => l10nLoader.load();\n}\n\n// APP_INITIALIZER will execute the function when the app is initialized and delay what it provides.\n@NgModule({\n    imports: [\n        BrowserModule,\n        HttpClientModule,\n        TranslationModule.forRoot(l10nConfig)\n    ],\n    declarations: [AppComponent, HomeComponent],\n    providers: [\n        {\n            provide: APP_INITIALIZER,\n            useFactory: initL10n,\n            deps: [L10nLoader],\n            multi: true\n        }\n    ],\n    bootstrap: [AppComponent]\n})\nexport class AppModule { }",
            "title": "Advanced initialization"
        },
        {
            "location": "/quick-start/#appendix-a-using-angular-cli",
            "text": "If you are using  Angular CLI , you have to add the  json  files in  src/assets  folder, \ncopied as-is when building your project. \nAlways configure your provider in this way:  ...\n    providers: [\n        { type: ProviderType.Static, prefix: './assets/locale-' }\n    ],\n...",
            "title": "Appendix A - Using Angular CLI"
        },
        {
            "location": "/quick-start/#appendix-b-using-ionic",
            "text": "You have to add the  json  files in  www/assets  folder. \nAlways configure your provider in this way:  ...\n    providers: [\n        { type: ProviderType.Static, prefix: './assets/locale-' }\n    ],\n...",
            "title": "Appendix B - Using Ionic"
        },
        {
            "location": "/quick-start/#appendix-c-using-angular-meteor",
            "text": "You must create  public/assets  folder at the root of your app. \nIn this way,  assets  folder is copied directly into your application bundle. \nAlways configure your provider in this way:  ...\n    providers: [\n        { type: ProviderType.Static, prefix: './assets/locale-' }\n    ],\n...",
            "title": "Appendix C - Using Angular Meteor"
        },
        {
            "location": "/spec/library-structure/",
            "text": "Library structure\n\n\n\n\n\n\nMain modules\n\n\n\n\n\n\n\n\nClass\n\n\nContract\n\n\n\n\n\n\n\n\n\n\nTranslationModule\n\n\nProvides dependencies, pipes & directives for translating messages\n\n\n\n\n\n\nLocalizationModule\n\n\nProvides dependencies, pipes & directives for translating messages, dates & numbers\n\n\n\n\n\n\nLocaleValidationModule\n\n\nProvides dependencies & directives for locale validation\n\n\n\n\n\n\n\n\n\n\n\n\nMain services\n\n\n\n\n\n\n\n\nClass\n\n\nContract\n\n\n\n\n\n\n\n\n\n\nL10nLoader\n\n\nInitializes the services\n\n\n\n\n\n\nLocaleService\n\n\nManages language, default locale, currency & timezone\n\n\n\n\n\n\nTranslationService\n\n\nManages the translation data\n\n\n\n\n\n\nTranslation\n\n\nProvides \nlang\n to the \ntranslate\n pipe\n\n\n\n\n\n\nLocalization\n\n\nProvides \nlang\n to the \ntranslate\n pipe, \ndefaultLocale\n, \ncurrency\n, \ntimezone\n to \nl10nDate\n, \nl10nDecimal\n, \nl10nPercent\n & \nl10nCurrency\n pipes\n\n\n\n\n\n\nLocaleValidation\n\n\nProvides the methods to convert strings according to default locale\n\n\n\n\n\n\nCollator\n\n\nIntl.Collator APIs\n\n\n\n\n\n\nIntlAPI\n\n\nProvides the methods to check if Intl APIs are supported\n\n\n\n\n\n\n\n\n\n\n\n\nMain class-interfaces\n\n\n\n\n\n\n\n\nClass\n\n\nContract\n\n\n\n\n\n\n\n\n\n\nLocaleStorage\n\n\nClass-interface to create a custom storage for default locale & currency\n\n\n\n\n\n\nTranslationProvider\n\n\nClass-interface to create a custom provider for translation data\n\n\n\n\n\n\nTranslationHandler\n\n\nClass-interface to create a custom handler for translated values",
            "title": "Library structure"
        },
        {
            "location": "/spec/library-structure/#library-structure",
            "text": "",
            "title": "Library structure"
        },
        {
            "location": "/spec/library-structure/#main-modules",
            "text": "Class  Contract      TranslationModule  Provides dependencies, pipes & directives for translating messages    LocalizationModule  Provides dependencies, pipes & directives for translating messages, dates & numbers    LocaleValidationModule  Provides dependencies & directives for locale validation",
            "title": "Main modules"
        },
        {
            "location": "/spec/library-structure/#main-services",
            "text": "Class  Contract      L10nLoader  Initializes the services    LocaleService  Manages language, default locale, currency & timezone    TranslationService  Manages the translation data    Translation  Provides  lang  to the  translate  pipe    Localization  Provides  lang  to the  translate  pipe,  defaultLocale ,  currency ,  timezone  to  l10nDate ,  l10nDecimal ,  l10nPercent  &  l10nCurrency  pipes    LocaleValidation  Provides the methods to convert strings according to default locale    Collator  Intl.Collator APIs    IntlAPI  Provides the methods to check if Intl APIs are supported",
            "title": "Main services"
        },
        {
            "location": "/spec/library-structure/#main-class-interfaces",
            "text": "Class  Contract      LocaleStorage  Class-interface to create a custom storage for default locale & currency    TranslationProvider  Class-interface to create a custom provider for translation data    TranslationHandler  Class-interface to create a custom handler for translated values",
            "title": "Main class-interfaces"
        },
        {
            "location": "/spec/configuration/",
            "text": "Configuration\n\n\n\n\n\n\nFirst scenario: you only need to translate messages\n\n\nImport the modules you need and configure the library in the application root module:\n\n\nconst l10nConfig: L10nConfig = {\n    locale: {\n        languages: [\n            { code: 'en', dir: 'ltr' },\n            { code: 'it', dir: 'ltr' }\n        ],\n        language: 'en',\n        storage: StorageStrategy.Cookie\n    },\n    translation: {\n        providers: [\n            { type: ProviderType.Static, prefix: './assets/locale-' }\n        ],\n        caching: true,\n        missingValue: 'No key'\n    }\n};\n\n@NgModule({\n    imports: [\n        BrowserModule,\n        HttpClientModule,\n        TranslationModule.forRoot(l10nConfig)\n    ],\n    declarations: [AppComponent, HomeComponent],\n    bootstrap: [AppComponent]\n})\nexport class AppModule {\n\n    constructor(public l10nLoader: L10nLoader) {\n        this.l10nLoader.load();\n    }\n\n}\n\n\n\n\n\n\n\n\nSecond scenario: you need to translate messages, dates & numbers\n\n\nImport the modules you need and configure the library in the application root module:\n\n\nconst l10nConfig: L10nConfig = {\n    locale: {\n        languages: [\n            { code: 'en', dir: 'ltr' },\n            { code: 'it', dir: 'ltr' }\n        ],\n        defaultLocale: { languageCode: 'en', countryCode: 'US' },\n        currency: 'USD',\n        storage: StorageStrategy.Cookie\n    },\n    translation: {\n        providers: [\n            { type: ProviderType.Static, prefix: './assets/locale-' }\n        ],\n        caching: true,\n        missingValue: 'No key'\n    }\n};\n\n@NgModule({\n    imports: [\n        BrowserModule,\n        HttpClientModule,\n        LocalizationModule.forRoot(l10nConfig)\n    ],\n    declarations: [AppComponent, HomeComponent],\n    bootstrap: [AppComponent]\n})\nexport class AppModule {\n\n    constructor(public l10nLoader: L10nLoader) {\n        this.l10nLoader.load();\n    }\n\n}\n\n\n\n\n\n\n\n\nConfiguration settings\n\n\nThe \nL10nConfig\n interface contains an interface to configure \nLocaleService\n and one to configure \nTranslationService\n.\n\n\n\n\nLocaleConfig\n\n\n\n\n\n\n\n\nProperty\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nlanguages?: Language[]\n\n\nAdds the languages to use in the app\n\n\n\n\n\n\nlanguage?: string\n\n\nDefines the language ISO 639 two-letter or three-letter code to be used, if the language is not found in the browser\n\n\n\n\n\n\ndefaultLocale?: DefaultLocaleCodes\n\n\nDefines the default locale to be used, regardless of the browser language\n\n\n\n\n\n\ncurrency?: string\n\n\nDefines the currency ISO 4217 three-letter code to be used\n\n\n\n\n\n\ntimezone?: string\n\n\nThe time zone name of the IANA time zone database to use\n\n\n\n\n\n\nstorage?: StorageStrategy\n\n\nDefines the storage to be used for language, default locale & currency\n\n\n\n\n\n\ncookieExpiration?: number\n\n\nIf the cookie expiration is omitted, the cookie becomes a session cookie\n\n\n\n\n\n\n\n\n\n\nTranslationConfig\n\n\n\n\n\n\n\n\nProperty\n\n\nValue\n\n\n\n\n\n\n\n\n\n\ntranslationData?: Array<{ languageCode: string; data: any; }>\n\n\nDirect loading: adds translation data\n\n\n\n\n\n\nproviders?: any[]\n\n\nAsynchronous loading: adds translation providers\n\n\n\n\n\n\ncaching?: Boolean\n\n\nAsynchronous loading: disables/enables the cache for translation providers\n\n\n\n\n\n\ncomposedLanguage?: ISOCode[]\n\n\nSets a composed language for translations\n\n\n\n\n\n\nmissingValue?: string\n\n\nSets the value to use for missing keys\n\n\n\n\n\n\nmissingKey?: string\n\n\nSets the key to use for missing keys\n\n\n\n\n\n\ncomposedKeySeparator?: string\n\n\nSets composed key separator\n\n\n\n\n\n\ni18nPlural?: boolean\n\n\nDisables/enables the translation of numbers that are contained at the beginning of the keys\n\n\n\n\n\n\n\n\n\n\nThere aren't default values: you must explicitly set each parameter you need.\n\n\n\n\n\n\n\n\nDynamic settings\n\n\nThe configuration settings are stored in the following \nInjectionToken\n:\n\n\n\n\n\n\n\n\nInterface\n\n\nToken\n\n\n\n\n\n\n\n\n\n\nLocaleConfig\n\n\nLOCALE_CONFIG\n\n\n\n\n\n\nTranslationConfig\n\n\nTRANSLATION_CONFIG\n\n\n\n\n\n\n\n\nIf you need to load the configuration data dynamically, you can provide a partial or empty \nL10nConfig\n in \nAppModule\n, \nand then update the \ntokens\n in your class:\n\n\nconst l10nConfig: L10nConfig = {\n    ...\n    translation: {\n        providers: [], // Not available here.\n        caching: true,\n        missingValue: 'No key'\n    }\n};\n\n@NgModule({\n    imports: [\n        ...\n        LocalizationModule.forRoot(l10nConfig)\n    ],\n    ...\n})\nexport class AppModule {\n\n    constructor(\n        public l10nLoader: L10nLoader,\n        @Inject(TRANSLATION_CONFIG) private translationConfig: TranslationConfig\n    ) {\n        this.translationConfig.providers = [\n            { type: ProviderType.Static, prefix: './assets/locale-' }\n        ];\n\n        this.l10nLoader.load();\n    }\n\n}\n\n\n\n\n\n\nConfiguration must be completed before invoking the \nload\n method of \nL10nLoader\n.\n\n\n\n\nOr whether you use the \nadvanced initialization\n:\n\n\n@Injectable() export class LocalizationConfig {\n\n    constructor(\n        public l10nLoader: L10nLoader,\n        @Inject(TRANSLATION_CONFIG) private translationConfig: TranslationConfig\n    ) { }\n\n    load(): Promise<void> {\n        this.translationConfig.providers = [\n            { type: ProviderType.Static, prefix: './assets/locale-' }\n        ];\n\n        return this.l10nLoader.load();\n    }\n\n}\n\nexport function initLocalization(localizationConfig: LocalizationConfig): Function {\n    return () => localizationConfig.load();\n}\n\n@NgModule({\n    imports: [\n        ...\n        LocalizationModule.forRoot(l10nConfig)\n    ],\n    providers: [\n        ...\n        LocalizationConfig,\n        {\n            provide: APP_INITIALIZER,\n            useFactory: initLocalization,\n            deps: [LocalizationConfig],\n            multi: true\n        }\n    ],\n    ...\n})\nexport class AppModule { }\n\n\n\n\n\n\n\n\nLoading the translation data\n\n\nDirect loading\n\n\nYou can use \ntranslationData\n setting when you configure the service, \nadding all the translation data:\n\n\nconst translationEN: any = {\n    Title: \"Angular localization\"\n};\nconst translationIT: any = {\n    Title: \"Localizzazione in Angular\"\n};\n\nconst l10nConfig: L10nConfig = {\n    ...\n    translation: {\n        translationData: [\n            { languageCode: 'en', data: translationEN },\n            { languageCode: 'it', data: translationIT }\n        ]\n    }\n};\n\n\n\n\n\n\nAsynchronous loading of json files\n\n\nYou can add all the providers you need:\n\n\nconst l10nConfig: L10nConfig = {\n    ...\n    translation: {\n        providers: [\n            { type: ProviderType.Static, prefix: './assets/global-' },\n            { type: ProviderType.Static, prefix: './assets/locale-' }\n        ]\n    }\n};\n\n\n\n\n\n\nYou can't use Direct and Asynchronous loading at the same time.\n\n\n\n\n\n\nAsynchronous loading through a Web API\n\n\nYou can also load the data through a Web API:\n\n\nconst l10nConfig: L10nConfig = {\n    ...\n    translation: {\n        providers: [\n            { type: ProviderType.WebAPI, path: 'http://localhost:54703/api/values/' }\n        ]\n    }\n};\n...\nexport class AppModule {\n    constructor(private translation: TranslationService) {\n        this.translation.translationError.subscribe((error: any) => console.log(error));\n    }\n}\n\n\n\n\n[path]{languageCode}\n will be the URL used by the Http GET requests. So the example URI will be something like: \nhttp://localhost:54703/api/values/en\n.\n\n\nThe example above also showed as you can perform a custom action if you get a bad response.\n\n\n\n\nUsing fallback providers\n\n\nif you need a cascade fallback when the key is not found, you can use fallback providers:\n\n\nconst l10nConfig: L10nConfig = {\n    ...\n    translation: {\n        providers: [\n            { type: ProviderType.Fallback, prefix: './assets/global', fallbackLanguage: [] },\n            { type: ProviderType.Fallback, prefix: './assets/locale-', fallbackLanguage: [ISOCode.Language] },\n            { type: ProviderType.Static, prefix: './assets/locale-' }\n        ],\n        composedLanguage: [ISOCode.Language, ISOCode.Country]\n    }\n};\n\n\n\n\nand create the \njson\n files such as \nglobal.json\n, \nlocale-en.json\n, \nlocale-en-US.json\n. When you set a fallback provider, \nthe translation data will be merged in order\n: if a key is found in the \nen-US\n file, it is used, otherwise the key in \nen\n file and finally the key in \nglobal\n file.\n\n\n\n\nUsing a custom provider\n\n\nIf you need, you can create a custom provider to load translation data.\n\n\nImplement \nTranslationProvider\n class-interface and the \ngetTranslation\n method with the logic to retrieve the data:\n\n\n@Injectable() export class CustomTranslationProvider implements TranslationProvider {\n\n    /**\n     * This method must contain the logic of data access.\n     * @param language The current language\n     * @param args The object set during the configuration of 'providers'\n     * @return An observable of an object of translation data: {key: value}\n     */\n    public getTranslation(language: string, args: any): Observable<any> {\n        ...\n        return ...\n    }\n\n}\n\n\n\n\nNote that the method must return an \nobservable\n of an \nobject\n. Then provide the class in the module:\n\n\n@NgModule({\n    imports: [\n        ...\n        TranslationModule.forRoot(\n            l10nConfig,\n            { translationProvider: CustomTranslationProvider }\n        )\n    ],\n    ...\n})\n\n\n\n\nSee also \nTranslationProvider\n code.\n\n\n\n\n\n\nUsing a composed language\n\n\nBy default, the \nlanguageCode\n is added as extension to the translation files. If you set \ncomposedLanguage\n during the configuration, the combination of supplied codes will be used as language:\n\n\nconst l10nConfig: L10nConfig = {\n    locale: {\n        languages: [\n            { code: 'en', dir: 'ltr' }\n        ],\n        defaultLocale: { languageCode: 'en', countryCode: 'US' }\n    },\n    translation: {\n        providers: [\n            { type: ProviderType.Static, prefix: './assets/locale-' }\n        ],\n        composedLanguage: [ISOCode.Language, ISOCode.Country]\n    }\n};\n\n\n\n\nYour \njson\n files should be something like: \n./assets/locale-en-US.json\n and so on. The available ISO codes are: \nlanguage\n, \ncountry\n, \nscript\n.\n\n\n\n\n\n\nDefault locale, currency & timezone\n\n\nThe \ndefault locale\n contains the current language and culture. It consists of:\n\n\n\n\nlanguage code\n: ISO 639 two-letter or three-letter code of the language\n\n\ncountry code\n: ISO 3166 two-letter, uppercase code of the country\n\n\n\n\nand optionally:\n\n\n\n\nscript code\n: used to indicate the script or writing system variations that distinguish the written forms of a language or its dialects. It consists of four letters and was defined according to the assignments found in ISO 15924\n\n\nnumbering system\n: possible values include: \narab\n, \narabext\n, \nbali\n, \nbeng\n, \ndeva\n, \nfullwide\n, \ngujr\n, \nguru\n, \nhanidec\n, \nkhmr\n, \nknda\n, \nlaoo\n, \nlatn\n, \nlimb\n, \nmlym\n, \nmong\n, \nmymr\n, \norya\n, \ntamldec\n, \ntelu\n, \nthai\n, \ntibt\n\n\ncalendar\n: possible values include: \nbuddhist\n, \nchinese\n, \ncoptic\n, \nethioaa\n, \nethiopic\n, \ngregory\n, \nhebrew\n, \nindian\n, \nislamic\n, \nislamicc\n, \niso8601\n, \njapanese\n, \npersian\n, \nroc\n\n\n\n\nThe \ncurrency\n contains the ISO 4217 currency codes.\n\n\nThe \ntimezone\n contains the time zone names of the IANA time zone database.\n\n\nFor more information see \nIntl API\n.\n\n\n\n\n\n\nStorage\n\n\nThe \ndefaultLocale\n, the \ncurrency\n and the \ntimezone\n chosen by the user are stored, and retrieved at the next access. During the configuration, you can choose your \nStorageStrategy\n: \nSession\n, \nLocal\n, \nCookie\n, \nDisabled\n. If you don't provide a different expiration using \ncookieExpiration\n, the cookie becomes a session cookie.\n\n\nYou can also create a custom storage.\n\n\nImplement \nLocaleStorage\n class-interface and the \nread\n and \nwrite\n methods:\n\n\n@Injectable() export class CustomStorage implements LocaleStorage {\n\n    /**\n     * This method must contain the logic to read the storage.\n     * @param name 'defaultLocale' or 'currency'\n     * @return A promise with the value of the given name\n     */\n    public async read(name: string): Promise<string | null> {\n        ...\n        return ...\n    }\n\n    /**\n     * This method must contain the logic to write the storage.\n     * @param name 'defaultLocale' or 'currency'\n     * @param value The value for the given name\n     */\n    public async write(name: string, value: string): Promise<void> {\n        ...\n    }\n\n}\n\n\n\n\nNote that the \nread\n method must return a \npromise\n. Then provide the class in the module:\n\n\n@NgModule({\n    imports: [\n        ...\n        TranslationModule.forRoot(\n            l10nConfig,\n            { localeStorage: CustomStorage }\n        )\n    ],\n    ...\n})\n\n\n\n\nSee also \nLocaleStorage\n code.\n\n\n\n\n\n\nCaching\n\n\nYou can enable the cache during configuration:\n\n\nconst l10nConfig: L10nConfig = {\n    ...\n    translation: {\n        providers: [\n            { type: ProviderType.Static, prefix: './assets/global-' },\n            { type: ProviderType.Static, prefix: './assets/locale-' }\n        ],\n        caching: true\n    }\n};\n\n\n\n\nThe next time a translation file will be required, will be taken from the cache without making a new \nhttp request\n, with a significant performance improvement:\n\n\n\n\nif the user returns to a language already selected;\n\n\nif you use a global file shared across \nlazy loaded modules\n.\n\n\n\n\n\n\n\n\nIntl API\n\n\nTo localize \ndates and numbers\n, this library uses the \nIntl API\n.\n\n\nCheck the current browser support:\n\n\n\n\nECMAScript compatibility tables\n\n\nCan I use\n\n\n\n\nAll modern browsers have implemented this API. You can use \nIntl.js\n to extend support to old browsers.\n\n\nJust add one script tag in your \nindex.html\n:\n\n\n<script src=\"https://cdn.polyfill.io/v2/polyfill.min.js?features=Intl.~locale.en-US\"></script>\n\n\n\n\nWhen specifying the \nfeatures\n, you have to specify what locale, or locales to load.\n\n\nThe \ntimezone\n is also provided via \nIntl API\n. Except IE, all modern browsers have implemented the timezone. To extend the support, you can use \nIntl.DateTimeFormat timezone polyfill\n.\n\n\n\n\nWhen a feature is not supported, however, for example in older browsers, Angular localization does not generate an error in the browser, but returns the value without performing operations.",
            "title": "Configuration"
        },
        {
            "location": "/spec/configuration/#configuration",
            "text": "",
            "title": "Configuration"
        },
        {
            "location": "/spec/configuration/#first-scenario-you-only-need-to-translate-messages",
            "text": "Import the modules you need and configure the library in the application root module:  const l10nConfig: L10nConfig = {\n    locale: {\n        languages: [\n            { code: 'en', dir: 'ltr' },\n            { code: 'it', dir: 'ltr' }\n        ],\n        language: 'en',\n        storage: StorageStrategy.Cookie\n    },\n    translation: {\n        providers: [\n            { type: ProviderType.Static, prefix: './assets/locale-' }\n        ],\n        caching: true,\n        missingValue: 'No key'\n    }\n};\n\n@NgModule({\n    imports: [\n        BrowserModule,\n        HttpClientModule,\n        TranslationModule.forRoot(l10nConfig)\n    ],\n    declarations: [AppComponent, HomeComponent],\n    bootstrap: [AppComponent]\n})\nexport class AppModule {\n\n    constructor(public l10nLoader: L10nLoader) {\n        this.l10nLoader.load();\n    }\n\n}",
            "title": "First scenario: you only need to translate messages"
        },
        {
            "location": "/spec/configuration/#second-scenario-you-need-to-translate-messages-dates-numbers",
            "text": "Import the modules you need and configure the library in the application root module:  const l10nConfig: L10nConfig = {\n    locale: {\n        languages: [\n            { code: 'en', dir: 'ltr' },\n            { code: 'it', dir: 'ltr' }\n        ],\n        defaultLocale: { languageCode: 'en', countryCode: 'US' },\n        currency: 'USD',\n        storage: StorageStrategy.Cookie\n    },\n    translation: {\n        providers: [\n            { type: ProviderType.Static, prefix: './assets/locale-' }\n        ],\n        caching: true,\n        missingValue: 'No key'\n    }\n};\n\n@NgModule({\n    imports: [\n        BrowserModule,\n        HttpClientModule,\n        LocalizationModule.forRoot(l10nConfig)\n    ],\n    declarations: [AppComponent, HomeComponent],\n    bootstrap: [AppComponent]\n})\nexport class AppModule {\n\n    constructor(public l10nLoader: L10nLoader) {\n        this.l10nLoader.load();\n    }\n\n}",
            "title": "Second scenario: you need to translate messages, dates &amp; numbers"
        },
        {
            "location": "/spec/configuration/#configuration-settings",
            "text": "The  L10nConfig  interface contains an interface to configure  LocaleService  and one to configure  TranslationService .",
            "title": "Configuration settings"
        },
        {
            "location": "/spec/configuration/#localeconfig",
            "text": "Property  Value      languages?: Language[]  Adds the languages to use in the app    language?: string  Defines the language ISO 639 two-letter or three-letter code to be used, if the language is not found in the browser    defaultLocale?: DefaultLocaleCodes  Defines the default locale to be used, regardless of the browser language    currency?: string  Defines the currency ISO 4217 three-letter code to be used    timezone?: string  The time zone name of the IANA time zone database to use    storage?: StorageStrategy  Defines the storage to be used for language, default locale & currency    cookieExpiration?: number  If the cookie expiration is omitted, the cookie becomes a session cookie",
            "title": "LocaleConfig"
        },
        {
            "location": "/spec/configuration/#translationconfig",
            "text": "Property  Value      translationData?: Array<{ languageCode: string; data: any; }>  Direct loading: adds translation data    providers?: any[]  Asynchronous loading: adds translation providers    caching?: Boolean  Asynchronous loading: disables/enables the cache for translation providers    composedLanguage?: ISOCode[]  Sets a composed language for translations    missingValue?: string  Sets the value to use for missing keys    missingKey?: string  Sets the key to use for missing keys    composedKeySeparator?: string  Sets composed key separator    i18nPlural?: boolean  Disables/enables the translation of numbers that are contained at the beginning of the keys      There aren't default values: you must explicitly set each parameter you need.",
            "title": "TranslationConfig"
        },
        {
            "location": "/spec/configuration/#dynamic-settings",
            "text": "The configuration settings are stored in the following  InjectionToken :     Interface  Token      LocaleConfig  LOCALE_CONFIG    TranslationConfig  TRANSLATION_CONFIG     If you need to load the configuration data dynamically, you can provide a partial or empty  L10nConfig  in  AppModule , \nand then update the  tokens  in your class:  const l10nConfig: L10nConfig = {\n    ...\n    translation: {\n        providers: [], // Not available here.\n        caching: true,\n        missingValue: 'No key'\n    }\n};\n\n@NgModule({\n    imports: [\n        ...\n        LocalizationModule.forRoot(l10nConfig)\n    ],\n    ...\n})\nexport class AppModule {\n\n    constructor(\n        public l10nLoader: L10nLoader,\n        @Inject(TRANSLATION_CONFIG) private translationConfig: TranslationConfig\n    ) {\n        this.translationConfig.providers = [\n            { type: ProviderType.Static, prefix: './assets/locale-' }\n        ];\n\n        this.l10nLoader.load();\n    }\n\n}   Configuration must be completed before invoking the  load  method of  L10nLoader .   Or whether you use the  advanced initialization :  @Injectable() export class LocalizationConfig {\n\n    constructor(\n        public l10nLoader: L10nLoader,\n        @Inject(TRANSLATION_CONFIG) private translationConfig: TranslationConfig\n    ) { }\n\n    load(): Promise<void> {\n        this.translationConfig.providers = [\n            { type: ProviderType.Static, prefix: './assets/locale-' }\n        ];\n\n        return this.l10nLoader.load();\n    }\n\n}\n\nexport function initLocalization(localizationConfig: LocalizationConfig): Function {\n    return () => localizationConfig.load();\n}\n\n@NgModule({\n    imports: [\n        ...\n        LocalizationModule.forRoot(l10nConfig)\n    ],\n    providers: [\n        ...\n        LocalizationConfig,\n        {\n            provide: APP_INITIALIZER,\n            useFactory: initLocalization,\n            deps: [LocalizationConfig],\n            multi: true\n        }\n    ],\n    ...\n})\nexport class AppModule { }",
            "title": "Dynamic settings"
        },
        {
            "location": "/spec/configuration/#loading-the-translation-data",
            "text": "",
            "title": "Loading the translation data"
        },
        {
            "location": "/spec/configuration/#direct-loading",
            "text": "You can use  translationData  setting when you configure the service, \nadding all the translation data:  const translationEN: any = {\n    Title: \"Angular localization\"\n};\nconst translationIT: any = {\n    Title: \"Localizzazione in Angular\"\n};\n\nconst l10nConfig: L10nConfig = {\n    ...\n    translation: {\n        translationData: [\n            { languageCode: 'en', data: translationEN },\n            { languageCode: 'it', data: translationIT }\n        ]\n    }\n};",
            "title": "Direct loading"
        },
        {
            "location": "/spec/configuration/#asynchronous-loading-of-json-files",
            "text": "You can add all the providers you need:  const l10nConfig: L10nConfig = {\n    ...\n    translation: {\n        providers: [\n            { type: ProviderType.Static, prefix: './assets/global-' },\n            { type: ProviderType.Static, prefix: './assets/locale-' }\n        ]\n    }\n};   You can't use Direct and Asynchronous loading at the same time.",
            "title": "Asynchronous loading of json files"
        },
        {
            "location": "/spec/configuration/#asynchronous-loading-through-a-web-api",
            "text": "You can also load the data through a Web API:  const l10nConfig: L10nConfig = {\n    ...\n    translation: {\n        providers: [\n            { type: ProviderType.WebAPI, path: 'http://localhost:54703/api/values/' }\n        ]\n    }\n};\n...\nexport class AppModule {\n    constructor(private translation: TranslationService) {\n        this.translation.translationError.subscribe((error: any) => console.log(error));\n    }\n}  [path]{languageCode}  will be the URL used by the Http GET requests. So the example URI will be something like:  http://localhost:54703/api/values/en .  The example above also showed as you can perform a custom action if you get a bad response.",
            "title": "Asynchronous loading through a Web API"
        },
        {
            "location": "/spec/configuration/#using-fallback-providers",
            "text": "if you need a cascade fallback when the key is not found, you can use fallback providers:  const l10nConfig: L10nConfig = {\n    ...\n    translation: {\n        providers: [\n            { type: ProviderType.Fallback, prefix: './assets/global', fallbackLanguage: [] },\n            { type: ProviderType.Fallback, prefix: './assets/locale-', fallbackLanguage: [ISOCode.Language] },\n            { type: ProviderType.Static, prefix: './assets/locale-' }\n        ],\n        composedLanguage: [ISOCode.Language, ISOCode.Country]\n    }\n};  and create the  json  files such as  global.json ,  locale-en.json ,  locale-en-US.json . When you set a fallback provider,  the translation data will be merged in order : if a key is found in the  en-US  file, it is used, otherwise the key in  en  file and finally the key in  global  file.",
            "title": "Using fallback providers"
        },
        {
            "location": "/spec/configuration/#using-a-custom-provider",
            "text": "If you need, you can create a custom provider to load translation data.  Implement  TranslationProvider  class-interface and the  getTranslation  method with the logic to retrieve the data:  @Injectable() export class CustomTranslationProvider implements TranslationProvider {\n\n    /**\n     * This method must contain the logic of data access.\n     * @param language The current language\n     * @param args The object set during the configuration of 'providers'\n     * @return An observable of an object of translation data: {key: value}\n     */\n    public getTranslation(language: string, args: any): Observable<any> {\n        ...\n        return ...\n    }\n\n}  Note that the method must return an  observable  of an  object . Then provide the class in the module:  @NgModule({\n    imports: [\n        ...\n        TranslationModule.forRoot(\n            l10nConfig,\n            { translationProvider: CustomTranslationProvider }\n        )\n    ],\n    ...\n})  See also  TranslationProvider  code.",
            "title": "Using a custom provider"
        },
        {
            "location": "/spec/configuration/#using-a-composed-language",
            "text": "By default, the  languageCode  is added as extension to the translation files. If you set  composedLanguage  during the configuration, the combination of supplied codes will be used as language:  const l10nConfig: L10nConfig = {\n    locale: {\n        languages: [\n            { code: 'en', dir: 'ltr' }\n        ],\n        defaultLocale: { languageCode: 'en', countryCode: 'US' }\n    },\n    translation: {\n        providers: [\n            { type: ProviderType.Static, prefix: './assets/locale-' }\n        ],\n        composedLanguage: [ISOCode.Language, ISOCode.Country]\n    }\n};  Your  json  files should be something like:  ./assets/locale-en-US.json  and so on. The available ISO codes are:  language ,  country ,  script .",
            "title": "Using a composed language"
        },
        {
            "location": "/spec/configuration/#default-locale-currency-timezone",
            "text": "The  default locale  contains the current language and culture. It consists of:   language code : ISO 639 two-letter or three-letter code of the language  country code : ISO 3166 two-letter, uppercase code of the country   and optionally:   script code : used to indicate the script or writing system variations that distinguish the written forms of a language or its dialects. It consists of four letters and was defined according to the assignments found in ISO 15924  numbering system : possible values include:  arab ,  arabext ,  bali ,  beng ,  deva ,  fullwide ,  gujr ,  guru ,  hanidec ,  khmr ,  knda ,  laoo ,  latn ,  limb ,  mlym ,  mong ,  mymr ,  orya ,  tamldec ,  telu ,  thai ,  tibt  calendar : possible values include:  buddhist ,  chinese ,  coptic ,  ethioaa ,  ethiopic ,  gregory ,  hebrew ,  indian ,  islamic ,  islamicc ,  iso8601 ,  japanese ,  persian ,  roc   The  currency  contains the ISO 4217 currency codes.  The  timezone  contains the time zone names of the IANA time zone database.  For more information see  Intl API .",
            "title": "Default locale, currency &amp; timezone"
        },
        {
            "location": "/spec/configuration/#storage",
            "text": "The  defaultLocale , the  currency  and the  timezone  chosen by the user are stored, and retrieved at the next access. During the configuration, you can choose your  StorageStrategy :  Session ,  Local ,  Cookie ,  Disabled . If you don't provide a different expiration using  cookieExpiration , the cookie becomes a session cookie.  You can also create a custom storage.  Implement  LocaleStorage  class-interface and the  read  and  write  methods:  @Injectable() export class CustomStorage implements LocaleStorage {\n\n    /**\n     * This method must contain the logic to read the storage.\n     * @param name 'defaultLocale' or 'currency'\n     * @return A promise with the value of the given name\n     */\n    public async read(name: string): Promise<string | null> {\n        ...\n        return ...\n    }\n\n    /**\n     * This method must contain the logic to write the storage.\n     * @param name 'defaultLocale' or 'currency'\n     * @param value The value for the given name\n     */\n    public async write(name: string, value: string): Promise<void> {\n        ...\n    }\n\n}  Note that the  read  method must return a  promise . Then provide the class in the module:  @NgModule({\n    imports: [\n        ...\n        TranslationModule.forRoot(\n            l10nConfig,\n            { localeStorage: CustomStorage }\n        )\n    ],\n    ...\n})  See also  LocaleStorage  code.",
            "title": "Storage"
        },
        {
            "location": "/spec/configuration/#caching",
            "text": "You can enable the cache during configuration:  const l10nConfig: L10nConfig = {\n    ...\n    translation: {\n        providers: [\n            { type: ProviderType.Static, prefix: './assets/global-' },\n            { type: ProviderType.Static, prefix: './assets/locale-' }\n        ],\n        caching: true\n    }\n};  The next time a translation file will be required, will be taken from the cache without making a new  http request , with a significant performance improvement:   if the user returns to a language already selected;  if you use a global file shared across  lazy loaded modules .",
            "title": "Caching"
        },
        {
            "location": "/spec/configuration/#intl-api",
            "text": "To localize  dates and numbers , this library uses the  Intl API .  Check the current browser support:   ECMAScript compatibility tables  Can I use   All modern browsers have implemented this API. You can use  Intl.js  to extend support to old browsers.  Just add one script tag in your  index.html :  <script src=\"https://cdn.polyfill.io/v2/polyfill.min.js?features=Intl.~locale.en-US\"></script>  When specifying the  features , you have to specify what locale, or locales to load.  The  timezone  is also provided via  Intl API . Except IE, all modern browsers have implemented the timezone. To extend the support, you can use  Intl.DateTimeFormat timezone polyfill .   When a feature is not supported, however, for example in older browsers, Angular localization does not generate an error in the browser, but returns the value without performing operations.",
            "title": "Intl API"
        },
        {
            "location": "/spec/getting-the-translation/",
            "text": "Getting the translation\n\n\nTo get the translation, this library uses \npure pipes\n (to know the difference between \npure\n and \nimpure pipes\n see \nhere\n) or \ndirectives\n. \nYou can also get the translation in component class.\n\n\n\n\n\n\nPure pipes\n\n\n\n\n\n\n\n\nPipe\n\n\nType\n\n\nFormat\n\n\nPipe syntax\n\n\n\n\n\n\n\n\n\n\nTranslate\n\n\nMessage\n\n\nString\n\n\nexpression | translate:lang\n\n\n\n\n\n\nL10nDate\n\n\nDate\n\n\nDate/Number/ISO string\n\n\nexpression | l10nDate[:defaultLocale[:format[:timezone]]]\n\n\n\n\n\n\nL10nDecimal\n\n\nDecimal\n\n\nNumber/string\n\n\nexpression | l10nDecimal[:defaultLocale[:digitInfo]]\n\n\n\n\n\n\nL10nPercent\n\n\nPercentage\n\n\nNumber/string\n\n\nexpression | l10nPercent[:defaultLocale[:digitInfo]]\n\n\n\n\n\n\nL10nCurrency\n\n\nCurrency\n\n\nNumber/string\n\n\nexpression | l10nCurrency[:defaultLocale[:currency[:currencyDisplay[:digitInfo]]]]\n\n\n\n\n\n\n\n\n\n\nYou can dynamically change parameters and expressions values.\n\n\n\n\n\n\nMessages\n\n\nImplement \nLanguage\n decorator in the component to provide the parameter to the \ntranslate\n pipe:\n\n\nexport class HomeComponent implements OnInit {\n\n    @Language() lang: string;\n\n    ngOnInit(): void { }\n\n}\n\n\n\n\n\n\nTo use AoT compilation you have to implement OnInit, and to cancel subscriptions OnDestroy, even if they are empty.\n\n\n\n\nexpression | translate:lang\n\n\n\n\nwhere \nexpression\n is a string key that indicates the message to translate:\n\n\n{{ 'Title' | translate:lang }}\n\n\n\n\nJson\n:\n\n\n{\n    \"Title\": \"Angular localization\"\n}\n\n\n\n\n\n\nComposed keys\n\n\nSet \ncomposedKeySeparator\n during the configuration, e.g. to \n'.'\n:\n\n\n{{ 'Home.Title' | translate:lang }}\n\n\n\n\nJson\n:\n\n\n{\n    \"Home\": {\n        \"Title\": \"Angular localization\"\n    }\n}\n\n\n\n\n\n\nParameters\n\n\n{{ 'User notifications' | translate:lang:{ user: username, NoMessages: messages.length } }}\n\n\n\n\nJson\n:\n\n\n{\n    \"User notifications\": \"{{ user }}, you have {{ NoMessages }} new messages\"\n}\n\n\n\n\n\n\nDates & Numbers\n\n\nImplement \nDefaultLocale\n, \nCurrency\n & optionally \nTimezone\n decorators in the component to provide \ndefaultLocale\n, \ncurrency\n, \ntimezone\n to \nl10nDate\n, \nl10nDecimal\n, \nl10nPercent\n & \nl10nCurrency\n pipes.\n\n\nexport class HomeComponent implements OnInit {\n\n    @DefaultLocale() defaultLocale: string;\n    @Currency() currency: string;\n    @Timezone() timezone: string;\n\n    ngOnInit(): void { }\n\n}\n\n\n\n\n\n\nTo use AoT compilation you have to implement OnInit, and to cancel subscriptions OnDestroy, even if they are empty.\n\n\n\n\n\n\nDates\n\n\nexpression | l10nDate[:defaultLocale[:format[:timezone]]]\n\n\n\n\nWhere:\n\n\n\n\nexpression\n is a date object or a number (milliseconds since UTC epoch) or an ISO string.\n\n\n\n\nformat\n indicates which date/time components to include. The format can be an alias as shown below:\n\n\n\n\n'short'\n: equivalent to \n'M/d/y, h:mm'\n (e.g. \n8/29/2017, 4:37 PM\n for \nen-US\n)\n\n\n'medium'\n: equivalent to \n'MMM d, y, h:mm:ss'\n (e.g. \nAug 29, 2017, 4:32:43 PM\n for \nen-US\n)\n\n\n'shortDate'\n: equivalent to \n'M/d/y'\n (e.g. \n8/29/2017\n for \nen-US\n)\n\n\n'mediumDate'\n: equivalent to \n'MMM d, y'\n (e.g. \nAug 29, 2017\n for \nen-US\n)\n\n\n'longDate'\n: equivalent to \n'MMMM d, y'\n (e.g. \nAugust 29, 2017\n for \nen-US\n)\n\n\n'fullDate'\n: equivalent to \n'EEEE, MMMM d, y'\n (e.g. \nTuesday, August 29, 2017\n for \nen-US\n)\n\n\n'shortTime'\n: equivalent to \n'h:mm'\n (e.g. \n4:53 PM\n for \nen-US\n)\n\n\n'mediumTime'\n: equivalent to \n'h:mm:ss'\n (e.g. \n4:54:15 PM\n for \nen-US\n)\n\n\n\n\n\nIt can also be an object with some or all of the following properties:\n\n\n\n\nweekday\n The representation of the weekday. Possible values are \nnarrow\n, \nshort\n, \nlong\n.\n\n\nera\n The representation of the era. Possible values are \nnarrow\n, \nshort\n, \nlong\n.\n\n\nyear\n The representation of the year. Possible values are \nnumeric\n, \n2-digit\n.\n\n\nmonth\n The representation of the month. Possible values are \nnumeric\n, \n2-digit\n, \nnarrow\n, \nshort\n, \nlong\n.\n\n\nday\n The representation of the day. Possible values are \nnumeric\n, \n2-digit\n.\n\n\nhour\n The representation of the hour. Possible values are \nnumeric\n, \n2-digit\n.\n\n\nminute\n The representation of the minute. Possible values are \nnumeric\n, \n2-digit\n.\n\n\nsecond\n The representation of the second. Possible values are \nnumeric\n, \n2-digit\n.\n\n\ntimeZoneName\n The representation of the time zone name. Possible values are \nshort\n, \nlong\n.\n\n\nhour12\n Whether to use 12-hour time (as opposed to 24-hour time). Possible values are true and false; the default is locale dependent.\n\n\n\n\n\nSee \nDateTimeFormat\n for further information.\n\n\n\n\n\n\n\n\nUsing format aliases\n\n\n{{ today | l10nDate:defaultLocale:'fullDate' }}\n\n\n\n\n\n\nUsing a custom format\n\n\n@Component({\n    template: `\n        <p>{{ today | l10nDate:defaultLocale:options }}</p>\n    `\n})\nexport class HomeComponent implements OnInit {\n\n    @DefaultLocale() defaultLocale: string;\n\n    today: Date = new Date();\n    options: DateTimeOptions = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };\n\n    ngOnInit(): void { }\n\n}\n\n\n\n\n\n\nUsing timezone\n\n\n@Component({\n    template: `\n        <p>{{ today | l10nDate:defaultLocale:'medium':timezone }}</p>\n    `\n})\nexport class HomeComponent implements OnInit {\n\n    @DefaultLocale() defaultLocale: string;\n    @Timezone() timezone: string;\n\n    today: Date = new Date();\n\n    ngOnInit(): void { }\n\n}\n\n\n\n\n\n\nDecimals\n\n\nexpression | l10nDecimal[:defaultLocale:[digitInfo]]\n\n\n\n\nwhere \nexpression\n is a number and \ndigitInfo\n has the following format: \n{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}\n.\n\n\n{{ value | l10nDecimal:defaultLocale:'1.5-5' }}\n\n\n\n\n\n\nPercentages\n\n\nexpression | l10nPercent[:defaultLocale:[digitInfo]]\n\n\n\n\n{{ value | l10nPercent:defaultLocale:'1.1-1' }}\n\n\n\n\n\n\nCurrencies\n\n\nexpression | l10nCurrency[:defaultLocale[:currency[:currencyDisplay[:digitInfo]]]]\n\n\n\n\nwhere \ncurrencyDisplay\n is the currency formatting. Possible values are \n'symbol'\n to use a localized currency symbol such as \n\u20ac\n, \n'code'\n to use the ISO currency code, \n'name'\n to use a localized currency name such as \ndollar\n; the default is \n'symbol'\n. \n\n\n{{ value | l10nCurrency:defaultLocale:currency:'symbol':'1.2-2' }}\n\n\n\n\n\n\nTranslation & Localization classes\n\n\nWhen using \npipes\n, alternatively to \ndecorators\n you can \nextend \nTranslation\n or \nLocalization\n classes.\n\n\nExtend \nTranslation\n class in the component to provide \nlang\n to the \ntranslate\n pipe:\n\n\nexport class HomeComponent extends Translation { }\n\n\n\n\nExtend \nLocalization\n class in the component to provide \nlang\n to the \ntranslate\n pipe,  \ndefaultLocale\n, \ncurrency\n, \ntimezone\n to \nl10nDate\n, \nl10nDecimal\n, \nl10nPercent\n & \nl10nCurrency\n pipes.\n\n\nexport class HomeComponent extends Localization { } \n\n\n\n\nTo cancel subscriptions for the params, you can call the \ncancelParamSubscriptions\n method into \nngOnDestroy\n.\n\n\n\n\nOnPush ChangeDetectionStrategy\n\n\nPure pipes\n don't need to set \nChangeDetectionStrategy\n to \nOnPush\n. If into your components you need to use it, you have to extend \nTranslation\n or \nLocalization\n class and pass \nChangeDetectorRef\n:\n\n\nimport { Component, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';\n\nimport { Translation } from 'angular-l10n'\n\n@Component({\n    ...\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class HomeComponent extends Translation {\n\n    constructor(public ref: ChangeDetectorRef) {\n        super(ref);\n        ...\n    }\n\n} \n\n\n\n\nThat's because we need to know the component reference that implements the \nOnPush\n strategy.\n\n\n\n\n\n\nDirectives\n\n\n\n\n\n\n\n\nDirective\n\n\nSelectors\n\n\n\n\n\n\n\n\n\n\nTranslate\n\n\nl10nTranslate\n, \ntranslate\n\n\n\n\n\n\nL10nDate\n\n\nl10nDate\n\n\n\n\n\n\nL10nDecimal\n\n\nl10nDecimal\n\n\n\n\n\n\nL10nPercent\n\n\nl10nPercent\n\n\n\n\n\n\nL10nCurrency\n\n\nl10nCurrency\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDirective\n\n\nType\n\n\nFormat\n\n\nHtml syntax\n\n\n\n\n\n\n\n\n\n\nTranslate\n\n\nMessage\n\n\nString\n\n\n<tag l10n-attribute attribute=\"expr1\" l10nTranslate>expr2</tag>\n\n\n\n\n\n\nL10nDate\n\n\nDate\n\n\nDate/Number/ISO string\n\n\n<tag l10n-attribute attribute=\"expr1\" l10nDate=\"[format]\">expr2</tag>\n\n\n\n\n\n\nL10nDecimal\n\n\nDecimal\n\n\nNumber/string\n\n\n<tag l10n-attribute attribute=\"expr1\" l10nDecimal=\"[digitInfo]\">expr2</tag>\n\n\n\n\n\n\nL10nPercent\n\n\nPercentage\n\n\nNumber/string\n\n\n<tag l10n-attribute attribute=\"expr1\" l10nPercent=\"[digitInfo]\">expr2</tag>\n\n\n\n\n\n\nL10nCurrency\n\n\nCurrency\n\n\nNumber/string\n\n\n<tag l10n-attribute attribute=\"expr1\" l10nCurrency=\"[digitInfo]\" [currencyDisplay]=\"[currencyDisplay]\">expr2</tag>\n\n\n\n\n\n\n\n\n\n\nYou can dynamically change parameters and expressions values as with pipes. How does it work? To observe the expression change (not the parameters), a \nMutationObserver\n is used: the observer is added only if detected in the browser. If you want to use this feature also reaching older browsers, we recommend using pipes.\n\n\n\n\n\n\n\n\nIf you use in the component only the directives and not the pipes, you don't need to use decorators.\n\n\n\n\n\n\nMessages\n\n\n<h1 l10nTranslate>Title</h1>\n\n\n\n\n\n\nParameters\n\n\n<p [l10nTranslate]=\"{ user: username, NoMessages: messages.length }\">User notifications</p>\n\n\n\n\n\n\nDates & Numbers\n\n\n<p l10nDate>{{ today }}</p>\n<p l10nDate=\"fullDate\">{{ today }}</p>\n\n<p l10nDecimal>{{ value }}</p>\n<p l10nDecimal=\"1.5-5\">{{ value }}</p>\n\n<p l10nPercent>{{ value }}</p>\n<p l10nPercent=\"1.1-1\">{{ value }}</p>\n\n<p l10nCurrency>{{ value }}</p>\n<p l10nCurrency=\"1.2-2\" [currencyDisplay]=\"'symbol'\">{{ value }}</p>\n\n\n\n\n\n\nAttributes\n\n\n<p l10n-title title=\"Greeting\" l10nTranslate>Title</p>\n\n\n\n\nAll attributes will be translated according to the master directive: \nl10nTranslate\n, \nl10nDate\n and so on.\n\n\n\n\nYou can't dynamically change expressions in attributes.\n\n\n\n\n\n\nParameters\n\n\n<p l10n-title title=\"Greeting\" [l10nTranslate]=\"{ user: username, NoMessages: messages.length }\">User notifications</p>\n\n\n\n\nJson\n:\n\n\n{\n    \"Greeting\": \"Hi {{ user }}\",\n    \"User notifications\": \"{{ user }}, you have {{ NoMessages }} new messages\"\n}\n\n\n\n\n\n\nUI components\n\n\nYou can properly translate UI components like Angular Material or Ionic:\n\n\n<a routerLinkActive=\"active-link\" md-list-item routerLink=\"/home\" l10nTranslate>App.Home</a>\n\n\n\n\nrendered as:\n\n\n<a md-list-item=\"\" role=\"listitem\" routerlink=\"/home\" routerlinkactive=\"active-link\" l10nTranslate=\"\" href=\"#/home\" class=\"active-link\">\n    <div class=\"md-list-item\">\n        <div class=\"md-list-text\"></div>\n        App.Home\n    </div>\n</a>\n\n\n\n\n\n\nHow does it work? The algorithm searches the text in the subtree. If there is a depth higher than 4 (in the example above the text to translate has a depth 2), we recommend using pipes.\n\n\n\n\n\n\n\n\nUsing Html tags in translation\n\n\nIf you have Html tags in translation like this:\n\n\n\"Strong subtitle\": \"<strong>It's a small world</strong>\"\n\n\n\n\nyou have to use \ninnerHTML\n property.\n\n\nUsing \npipes\n:\n\n\n<p [innerHTML]=\"'Strong subtitle' | translate:lang\"></p>\n\n\n\n\nUsing \ndirectives\n:\n\n\n<p [innerHTML]=\"'Strong subtitle'\" l10nTranslate></p>\n\n\n\n\n\n\n\n\nGetting the translation in component class\n\n\nMessages\n\n\nTo get the translation in component class, \nTranslationService\n has the following methods:\n\n\n\n\ntranslate(keys: string | string[], args?: any, lang?: string): string | any\n\n\ntranslateAsync(keys: string | string[], args?: any, lang?: string): Observable<string | any>\n\n\n\n\nWhen you use those methods, \nyou must be sure that the Http request is completed\n, and the translation file has been loaded:\n\n\n@Component({\n    ...\n    template: `\n        <h1>{{ title }}</h1>\n        <button (click)=\"getTranslation()\">Translate</button>\n    `\n})\nexport class HomeComponent {\n\n    title: string;\n\n    constructor(public translation: TranslationService) { }\n\n    getTranslation(): void {\n        this.title = this.translation.translate('Title');\n    }\n\n}\n\n\n\n\nTo get the translation \nwhen the component is loaded\n and \nwhen the current language changes\n, \n\nyou must\n subscribe to the following method:\n\n\n\n\ntranslationChanged(): Observable<string>\n\n\n\n\n@Component({\n    ...\n    template: `<h1>{{ title }}</h1>`\n})\nexport class HomeComponent implements OnInit {\n\n    title: string;\n\n    constructor(public translation: TranslationService) { }\n\n    ngOnInit(): void {\n        this.translation.translationChanged().subscribe(\n            () => { this.title = this.translation.translate('Title'); }\n        );\n    }\n\n}\n\n\n\n\n\n\nDates & numbers\n\n\nTo get the translation of dates and numbers, you can use the \ntransform\n method of the corresponding pipe to get the translation: you have the \ngetDefaultLocale\n method of \nLocaleService\n, and the \ndefaultLocaleChanged\n event to know when \ndefaultLocale\n changes.\n\n\n@Component({\n    ...\n    template: `<p>{{ value }}</p>`\n})\nexport class HomeComponent {\n\n    pipe: L10nDecimalPipe = new L10nDecimalPipe();\n    value: any = this.pipe.transform(1234.5, this.locale.getDefaultLocale(), '1.2-2');\n\n    constructor(public locale: LocaleService) { }\n\n    ngOnInit(): void {\n        this.locale.defaultLocaleChanged.subscribe(\n            (defaultLocale: string) => {\n                this.value = this.pipe.transform(1234.5, defaultLocale, '1.2-2');\n            }\n        );\n    }\n\n}\n\n\n\n\n\n\n\n\nHandle the translation\n\n\nThe default translation handler does not perform operations on the translated values: it handles the missing keys returning the path of the key or the value set by \nmissingValue\n during the configuration, and replaces parameters.\n\n\nTo perform custom operations, you can implement \nTranslationHandler\n class-interface and the \nparseValue\n method:\n\n\n@Injectable() export class CustomTranslationHandler implements TranslationHandler {\n\n    /**\n     * This method must contain the logic to parse the translated value.\n     * @param path The path of the key\n     * @param key The key that has been requested\n     * @param value The translated value\n     * @param args The parameters passed along with the key\n     * @param lang The current language\n     * @return The parsed value\n     */\n    public parseValue(path: string, key: string, value: string | null, args: any, lang: string): string {\n        ..\n        return ...\n    }\n\n}\n\n\n\n\nThen provide the class in the module:\n\n\n@NgModule({\n    imports: [\n        ...\n        TranslationModule.forRoot(\n            l10nConfig,\n            { translationHandler: CustomTranslationHandler }\n        )\n    ],\n    ...\n})\n\n\n\n\nSee also \nTranslationHandler\n code.\n\n\n\n\n\n\nChanging language, default locale, currency or timezone at runtime\n\n\nTo change language, default locale, currency or timezone at runtime, \nLocaleService\n has the following methods:\n\n\n\n\nsetCurrentLanguage(languageCode: string): void\n\n\nsetDefaultLocale(languageCode: string, countryCode?: string, scriptCode?: string, numberingSystem?: string, calendar?: string): void\n\n\nsetCurrentCurrency(currencyCode: string): void\n\n\nsetCurrentTimezone(zoneName: string): void",
            "title": "Getting the translation"
        },
        {
            "location": "/spec/getting-the-translation/#getting-the-translation",
            "text": "To get the translation, this library uses  pure pipes  (to know the difference between  pure  and  impure pipes  see  here ) or  directives . \nYou can also get the translation in component class.",
            "title": "Getting the translation"
        },
        {
            "location": "/spec/getting-the-translation/#pure-pipes",
            "text": "Pipe  Type  Format  Pipe syntax      Translate  Message  String  expression | translate:lang    L10nDate  Date  Date/Number/ISO string  expression | l10nDate[:defaultLocale[:format[:timezone]]]    L10nDecimal  Decimal  Number/string  expression | l10nDecimal[:defaultLocale[:digitInfo]]    L10nPercent  Percentage  Number/string  expression | l10nPercent[:defaultLocale[:digitInfo]]    L10nCurrency  Currency  Number/string  expression | l10nCurrency[:defaultLocale[:currency[:currencyDisplay[:digitInfo]]]]      You can dynamically change parameters and expressions values.",
            "title": "Pure pipes"
        },
        {
            "location": "/spec/getting-the-translation/#messages",
            "text": "Implement  Language  decorator in the component to provide the parameter to the  translate  pipe:  export class HomeComponent implements OnInit {\n\n    @Language() lang: string;\n\n    ngOnInit(): void { }\n\n}   To use AoT compilation you have to implement OnInit, and to cancel subscriptions OnDestroy, even if they are empty.   expression | translate:lang  where  expression  is a string key that indicates the message to translate:  {{ 'Title' | translate:lang }}  Json :  {\n    \"Title\": \"Angular localization\"\n}",
            "title": "Messages"
        },
        {
            "location": "/spec/getting-the-translation/#composed-keys",
            "text": "Set  composedKeySeparator  during the configuration, e.g. to  '.' :  {{ 'Home.Title' | translate:lang }}  Json :  {\n    \"Home\": {\n        \"Title\": \"Angular localization\"\n    }\n}",
            "title": "Composed keys"
        },
        {
            "location": "/spec/getting-the-translation/#parameters",
            "text": "{{ 'User notifications' | translate:lang:{ user: username, NoMessages: messages.length } }}  Json :  {\n    \"User notifications\": \"{{ user }}, you have {{ NoMessages }} new messages\"\n}",
            "title": "Parameters"
        },
        {
            "location": "/spec/getting-the-translation/#dates-numbers",
            "text": "Implement  DefaultLocale ,  Currency  & optionally  Timezone  decorators in the component to provide  defaultLocale ,  currency ,  timezone  to  l10nDate ,  l10nDecimal ,  l10nPercent  &  l10nCurrency  pipes.  export class HomeComponent implements OnInit {\n\n    @DefaultLocale() defaultLocale: string;\n    @Currency() currency: string;\n    @Timezone() timezone: string;\n\n    ngOnInit(): void { }\n\n}   To use AoT compilation you have to implement OnInit, and to cancel subscriptions OnDestroy, even if they are empty.",
            "title": "Dates &amp; Numbers"
        },
        {
            "location": "/spec/getting-the-translation/#dates",
            "text": "expression | l10nDate[:defaultLocale[:format[:timezone]]]  Where:   expression  is a date object or a number (milliseconds since UTC epoch) or an ISO string.   format  indicates which date/time components to include. The format can be an alias as shown below:   'short' : equivalent to  'M/d/y, h:mm'  (e.g.  8/29/2017, 4:37 PM  for  en-US )  'medium' : equivalent to  'MMM d, y, h:mm:ss'  (e.g.  Aug 29, 2017, 4:32:43 PM  for  en-US )  'shortDate' : equivalent to  'M/d/y'  (e.g.  8/29/2017  for  en-US )  'mediumDate' : equivalent to  'MMM d, y'  (e.g.  Aug 29, 2017  for  en-US )  'longDate' : equivalent to  'MMMM d, y'  (e.g.  August 29, 2017  for  en-US )  'fullDate' : equivalent to  'EEEE, MMMM d, y'  (e.g.  Tuesday, August 29, 2017  for  en-US )  'shortTime' : equivalent to  'h:mm'  (e.g.  4:53 PM  for  en-US )  'mediumTime' : equivalent to  'h:mm:ss'  (e.g.  4:54:15 PM  for  en-US )   \nIt can also be an object with some or all of the following properties:   weekday  The representation of the weekday. Possible values are  narrow ,  short ,  long .  era  The representation of the era. Possible values are  narrow ,  short ,  long .  year  The representation of the year. Possible values are  numeric ,  2-digit .  month  The representation of the month. Possible values are  numeric ,  2-digit ,  narrow ,  short ,  long .  day  The representation of the day. Possible values are  numeric ,  2-digit .  hour  The representation of the hour. Possible values are  numeric ,  2-digit .  minute  The representation of the minute. Possible values are  numeric ,  2-digit .  second  The representation of the second. Possible values are  numeric ,  2-digit .  timeZoneName  The representation of the time zone name. Possible values are  short ,  long .  hour12  Whether to use 12-hour time (as opposed to 24-hour time). Possible values are true and false; the default is locale dependent.   \nSee  DateTimeFormat  for further information.",
            "title": "Dates"
        },
        {
            "location": "/spec/getting-the-translation/#using-format-aliases",
            "text": "{{ today | l10nDate:defaultLocale:'fullDate' }}",
            "title": "Using format aliases"
        },
        {
            "location": "/spec/getting-the-translation/#using-a-custom-format",
            "text": "@Component({\n    template: `\n        <p>{{ today | l10nDate:defaultLocale:options }}</p>\n    `\n})\nexport class HomeComponent implements OnInit {\n\n    @DefaultLocale() defaultLocale: string;\n\n    today: Date = new Date();\n    options: DateTimeOptions = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };\n\n    ngOnInit(): void { }\n\n}",
            "title": "Using a custom format"
        },
        {
            "location": "/spec/getting-the-translation/#using-timezone",
            "text": "@Component({\n    template: `\n        <p>{{ today | l10nDate:defaultLocale:'medium':timezone }}</p>\n    `\n})\nexport class HomeComponent implements OnInit {\n\n    @DefaultLocale() defaultLocale: string;\n    @Timezone() timezone: string;\n\n    today: Date = new Date();\n\n    ngOnInit(): void { }\n\n}",
            "title": "Using timezone"
        },
        {
            "location": "/spec/getting-the-translation/#decimals",
            "text": "expression | l10nDecimal[:defaultLocale:[digitInfo]]  where  expression  is a number and  digitInfo  has the following format:  {minIntegerDigits}.{minFractionDigits}-{maxFractionDigits} .  {{ value | l10nDecimal:defaultLocale:'1.5-5' }}",
            "title": "Decimals"
        },
        {
            "location": "/spec/getting-the-translation/#percentages",
            "text": "expression | l10nPercent[:defaultLocale:[digitInfo]]  {{ value | l10nPercent:defaultLocale:'1.1-1' }}",
            "title": "Percentages"
        },
        {
            "location": "/spec/getting-the-translation/#currencies",
            "text": "expression | l10nCurrency[:defaultLocale[:currency[:currencyDisplay[:digitInfo]]]]  where  currencyDisplay  is the currency formatting. Possible values are  'symbol'  to use a localized currency symbol such as  \u20ac ,  'code'  to use the ISO currency code,  'name'  to use a localized currency name such as  dollar ; the default is  'symbol' .   {{ value | l10nCurrency:defaultLocale:currency:'symbol':'1.2-2' }}",
            "title": "Currencies"
        },
        {
            "location": "/spec/getting-the-translation/#translation-localization-classes",
            "text": "When using  pipes , alternatively to  decorators  you can \nextend  Translation  or  Localization  classes.  Extend  Translation  class in the component to provide  lang  to the  translate  pipe:  export class HomeComponent extends Translation { }  Extend  Localization  class in the component to provide  lang  to the  translate  pipe,   defaultLocale ,  currency ,  timezone  to  l10nDate ,  l10nDecimal ,  l10nPercent  &  l10nCurrency  pipes.  export class HomeComponent extends Localization { }   To cancel subscriptions for the params, you can call the  cancelParamSubscriptions  method into  ngOnDestroy .",
            "title": "Translation &amp; Localization classes"
        },
        {
            "location": "/spec/getting-the-translation/#onpush-changedetectionstrategy",
            "text": "Pure pipes  don't need to set  ChangeDetectionStrategy  to  OnPush . If into your components you need to use it, you have to extend  Translation  or  Localization  class and pass  ChangeDetectorRef :  import { Component, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';\n\nimport { Translation } from 'angular-l10n'\n\n@Component({\n    ...\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class HomeComponent extends Translation {\n\n    constructor(public ref: ChangeDetectorRef) {\n        super(ref);\n        ...\n    }\n\n}   That's because we need to know the component reference that implements the  OnPush  strategy.",
            "title": "OnPush ChangeDetectionStrategy"
        },
        {
            "location": "/spec/getting-the-translation/#directives",
            "text": "Directive  Selectors      Translate  l10nTranslate ,  translate    L10nDate  l10nDate    L10nDecimal  l10nDecimal    L10nPercent  l10nPercent    L10nCurrency  l10nCurrency        Directive  Type  Format  Html syntax      Translate  Message  String  <tag l10n-attribute attribute=\"expr1\" l10nTranslate>expr2</tag>    L10nDate  Date  Date/Number/ISO string  <tag l10n-attribute attribute=\"expr1\" l10nDate=\"[format]\">expr2</tag>    L10nDecimal  Decimal  Number/string  <tag l10n-attribute attribute=\"expr1\" l10nDecimal=\"[digitInfo]\">expr2</tag>    L10nPercent  Percentage  Number/string  <tag l10n-attribute attribute=\"expr1\" l10nPercent=\"[digitInfo]\">expr2</tag>    L10nCurrency  Currency  Number/string  <tag l10n-attribute attribute=\"expr1\" l10nCurrency=\"[digitInfo]\" [currencyDisplay]=\"[currencyDisplay]\">expr2</tag>      You can dynamically change parameters and expressions values as with pipes. How does it work? To observe the expression change (not the parameters), a  MutationObserver  is used: the observer is added only if detected in the browser. If you want to use this feature also reaching older browsers, we recommend using pipes.     If you use in the component only the directives and not the pipes, you don't need to use decorators.",
            "title": "Directives"
        },
        {
            "location": "/spec/getting-the-translation/#messages_1",
            "text": "<h1 l10nTranslate>Title</h1>",
            "title": "Messages"
        },
        {
            "location": "/spec/getting-the-translation/#parameters_1",
            "text": "<p [l10nTranslate]=\"{ user: username, NoMessages: messages.length }\">User notifications</p>",
            "title": "Parameters"
        },
        {
            "location": "/spec/getting-the-translation/#dates-numbers_1",
            "text": "<p l10nDate>{{ today }}</p>\n<p l10nDate=\"fullDate\">{{ today }}</p>\n\n<p l10nDecimal>{{ value }}</p>\n<p l10nDecimal=\"1.5-5\">{{ value }}</p>\n\n<p l10nPercent>{{ value }}</p>\n<p l10nPercent=\"1.1-1\">{{ value }}</p>\n\n<p l10nCurrency>{{ value }}</p>\n<p l10nCurrency=\"1.2-2\" [currencyDisplay]=\"'symbol'\">{{ value }}</p>",
            "title": "Dates &amp; Numbers"
        },
        {
            "location": "/spec/getting-the-translation/#attributes",
            "text": "<p l10n-title title=\"Greeting\" l10nTranslate>Title</p>  All attributes will be translated according to the master directive:  l10nTranslate ,  l10nDate  and so on.   You can't dynamically change expressions in attributes.",
            "title": "Attributes"
        },
        {
            "location": "/spec/getting-the-translation/#parameters_2",
            "text": "<p l10n-title title=\"Greeting\" [l10nTranslate]=\"{ user: username, NoMessages: messages.length }\">User notifications</p>  Json :  {\n    \"Greeting\": \"Hi {{ user }}\",\n    \"User notifications\": \"{{ user }}, you have {{ NoMessages }} new messages\"\n}",
            "title": "Parameters"
        },
        {
            "location": "/spec/getting-the-translation/#ui-components",
            "text": "You can properly translate UI components like Angular Material or Ionic:  <a routerLinkActive=\"active-link\" md-list-item routerLink=\"/home\" l10nTranslate>App.Home</a>  rendered as:  <a md-list-item=\"\" role=\"listitem\" routerlink=\"/home\" routerlinkactive=\"active-link\" l10nTranslate=\"\" href=\"#/home\" class=\"active-link\">\n    <div class=\"md-list-item\">\n        <div class=\"md-list-text\"></div>\n        App.Home\n    </div>\n</a>   How does it work? The algorithm searches the text in the subtree. If there is a depth higher than 4 (in the example above the text to translate has a depth 2), we recommend using pipes.",
            "title": "UI components"
        },
        {
            "location": "/spec/getting-the-translation/#using-html-tags-in-translation",
            "text": "If you have Html tags in translation like this:  \"Strong subtitle\": \"<strong>It's a small world</strong>\"  you have to use  innerHTML  property.  Using  pipes :  <p [innerHTML]=\"'Strong subtitle' | translate:lang\"></p>  Using  directives :  <p [innerHTML]=\"'Strong subtitle'\" l10nTranslate></p>",
            "title": "Using Html tags in translation"
        },
        {
            "location": "/spec/getting-the-translation/#getting-the-translation-in-component-class",
            "text": "",
            "title": "Getting the translation in component class"
        },
        {
            "location": "/spec/getting-the-translation/#messages_2",
            "text": "To get the translation in component class,  TranslationService  has the following methods:   translate(keys: string | string[], args?: any, lang?: string): string | any  translateAsync(keys: string | string[], args?: any, lang?: string): Observable<string | any>   When you use those methods,  you must be sure that the Http request is completed , and the translation file has been loaded:  @Component({\n    ...\n    template: `\n        <h1>{{ title }}</h1>\n        <button (click)=\"getTranslation()\">Translate</button>\n    `\n})\nexport class HomeComponent {\n\n    title: string;\n\n    constructor(public translation: TranslationService) { }\n\n    getTranslation(): void {\n        this.title = this.translation.translate('Title');\n    }\n\n}  To get the translation  when the component is loaded  and  when the current language changes ,  you must  subscribe to the following method:   translationChanged(): Observable<string>   @Component({\n    ...\n    template: `<h1>{{ title }}</h1>`\n})\nexport class HomeComponent implements OnInit {\n\n    title: string;\n\n    constructor(public translation: TranslationService) { }\n\n    ngOnInit(): void {\n        this.translation.translationChanged().subscribe(\n            () => { this.title = this.translation.translate('Title'); }\n        );\n    }\n\n}",
            "title": "Messages"
        },
        {
            "location": "/spec/getting-the-translation/#dates-numbers_2",
            "text": "To get the translation of dates and numbers, you can use the  transform  method of the corresponding pipe to get the translation: you have the  getDefaultLocale  method of  LocaleService , and the  defaultLocaleChanged  event to know when  defaultLocale  changes.  @Component({\n    ...\n    template: `<p>{{ value }}</p>`\n})\nexport class HomeComponent {\n\n    pipe: L10nDecimalPipe = new L10nDecimalPipe();\n    value: any = this.pipe.transform(1234.5, this.locale.getDefaultLocale(), '1.2-2');\n\n    constructor(public locale: LocaleService) { }\n\n    ngOnInit(): void {\n        this.locale.defaultLocaleChanged.subscribe(\n            (defaultLocale: string) => {\n                this.value = this.pipe.transform(1234.5, defaultLocale, '1.2-2');\n            }\n        );\n    }\n\n}",
            "title": "Dates &amp; numbers"
        },
        {
            "location": "/spec/getting-the-translation/#handle-the-translation",
            "text": "The default translation handler does not perform operations on the translated values: it handles the missing keys returning the path of the key or the value set by  missingValue  during the configuration, and replaces parameters.  To perform custom operations, you can implement  TranslationHandler  class-interface and the  parseValue  method:  @Injectable() export class CustomTranslationHandler implements TranslationHandler {\n\n    /**\n     * This method must contain the logic to parse the translated value.\n     * @param path The path of the key\n     * @param key The key that has been requested\n     * @param value The translated value\n     * @param args The parameters passed along with the key\n     * @param lang The current language\n     * @return The parsed value\n     */\n    public parseValue(path: string, key: string, value: string | null, args: any, lang: string): string {\n        ..\n        return ...\n    }\n\n}  Then provide the class in the module:  @NgModule({\n    imports: [\n        ...\n        TranslationModule.forRoot(\n            l10nConfig,\n            { translationHandler: CustomTranslationHandler }\n        )\n    ],\n    ...\n})  See also  TranslationHandler  code.",
            "title": "Handle the translation"
        },
        {
            "location": "/spec/getting-the-translation/#changing-language-default-locale-currency-or-timezone-at-runtime",
            "text": "To change language, default locale, currency or timezone at runtime,  LocaleService  has the following methods:   setCurrentLanguage(languageCode: string): void  setDefaultLocale(languageCode: string, countryCode?: string, scriptCode?: string, numberingSystem?: string, calendar?: string): void  setCurrentCurrency(currencyCode: string): void  setCurrentTimezone(zoneName: string): void",
            "title": "Changing language, default locale, currency or timezone at runtime"
        },
        {
            "location": "/spec/lazy-loading/",
            "text": "Lazy loaded modules & Shared modules\n\n\nBefore you start using this configuration, you need to know how \nlazy-loading\n works: \nLazy-loading modules with the router\n.\n\n\n\n\n\n\nLazy loaded modules with the router\n\n\nYou can create an instance of \nTranslationService\n with its own translation data for every \nlazy loaded\n module, as shown:\n\n\n\nYou can create a new instance of \nTranslationService\n calling the \nforChild\n method of the module you are using, \nand configure the service with the new providers:\n\n\nconst l10nConfig: L10nConfig = {\n    translation: {\n        providers: [\n            { type: ProviderType.Static, prefix: './src/assets/locale-' },\n            { type: ProviderType.Static, prefix: './src/assets/locale-list-' }\n        ],\n        ...\n    }\n};\n\n@NgModule({\n    imports: [\n        ...\n        TranslationModule.forChild(l10nConfig) // New instance of TranslationService.\n    ],\n    declarations: [ListComponent]\n})\nexport class ListModule {\n\n    constructor(public l10nLoader: L10nLoader) {\n        this.l10nLoader.load();\n    }\n\n}\n\n\n\n\n\n\nIf you use a global file shared across \nlazy loaded modules\n, you can enable the \ncaching\n during the configuration in \nAppModule\n.\n\n\n\n\nIn this way, application performance and memory usage are optimized.\n\n\n\n\n\n\nShared modules\n\n\nIf you don't want a new instance of \nTranslationService\n with its own translation data for each feature module, but you want it to be \nsingleton\n and shared by other modules, you have to call \nforRoot\n method of the module you are using once in \nAppModule\n:\n\n\n@NgModule({\n    imports: [\n        ...\n        SharedModule,\n        TranslationModule.forRoot(l10nConfig)\n    ],\n    ...\n})\nexport class AppModule { }\n\n\n\n\nImport/export \nTranslationModule\n or \nLocalizationModule\n \nwithout methods\n in a shared module: \n\n\nconst sharedModules: any[] = [\n    ...\n    TranslationModule\n];\n\n@NgModule({\n    imports: sharedModules,\n    exports: sharedModules\n})\n\nexport class SharedModule { }\n\n\n\n\nThen in the feature module (also if it is \nlazy loaded\n):\n\n\n@NgModule({\n    imports: [\n        ...\n        SharedModule\n    ],\n    ...\n})\nexport class ListModule { }\n\n\n\n\nYou must provide the configuration only in \nAppModule\n.",
            "title": "Lazy loaded modules & Shared modules"
        },
        {
            "location": "/spec/lazy-loading/#lazy-loaded-modules-shared-modules",
            "text": "Before you start using this configuration, you need to know how  lazy-loading  works:  Lazy-loading modules with the router .",
            "title": "Lazy loaded modules &amp; Shared modules"
        },
        {
            "location": "/spec/lazy-loading/#lazy-loaded-modules-with-the-router",
            "text": "You can create an instance of  TranslationService  with its own translation data for every  lazy loaded  module, as shown:  You can create a new instance of  TranslationService  calling the  forChild  method of the module you are using, \nand configure the service with the new providers:  const l10nConfig: L10nConfig = {\n    translation: {\n        providers: [\n            { type: ProviderType.Static, prefix: './src/assets/locale-' },\n            { type: ProviderType.Static, prefix: './src/assets/locale-list-' }\n        ],\n        ...\n    }\n};\n\n@NgModule({\n    imports: [\n        ...\n        TranslationModule.forChild(l10nConfig) // New instance of TranslationService.\n    ],\n    declarations: [ListComponent]\n})\nexport class ListModule {\n\n    constructor(public l10nLoader: L10nLoader) {\n        this.l10nLoader.load();\n    }\n\n}   If you use a global file shared across  lazy loaded modules , you can enable the  caching  during the configuration in  AppModule .   In this way, application performance and memory usage are optimized.",
            "title": "Lazy loaded modules with the router"
        },
        {
            "location": "/spec/lazy-loading/#shared-modules",
            "text": "If you don't want a new instance of  TranslationService  with its own translation data for each feature module, but you want it to be  singleton  and shared by other modules, you have to call  forRoot  method of the module you are using once in  AppModule :  @NgModule({\n    imports: [\n        ...\n        SharedModule,\n        TranslationModule.forRoot(l10nConfig)\n    ],\n    ...\n})\nexport class AppModule { }  Import/export  TranslationModule  or  LocalizationModule   without methods  in a shared module:   const sharedModules: any[] = [\n    ...\n    TranslationModule\n];\n\n@NgModule({\n    imports: sharedModules,\n    exports: sharedModules\n})\n\nexport class SharedModule { }  Then in the feature module (also if it is  lazy loaded ):  @NgModule({\n    imports: [\n        ...\n        SharedModule\n    ],\n    ...\n})\nexport class ListModule { }  You must provide the configuration only in  AppModule .",
            "title": "Shared modules"
        },
        {
            "location": "/spec/validation/",
            "text": "Validation by locales\n\n\nImport the modules you need in the application root module:\n\n\n@NgModule({\n    imports: [\n        ...\n        LocalizationModule.forRoot(l10nConfig),\n        LocaleValidationModule.forRoot()\n    ],\n    declarations: [AppComponent],\n    bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n\n\n\n\n\n\n\nValidating a number\n\n\n\n\n\n\n\n\nDirective\n\n\nSelectors\n\n\n\n\n\n\n\n\n\n\nL10nNumberValidator\n\n\nl10nValidateNumber\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDirective\n\n\nValidator\n\n\nOptions\n\n\nErrors\n\n\n\n\n\n\n\n\n\n\nL10nNumberValidator\n\n\nl10nValidateNumber=[digitInfo]\n\n\n[minValue]\n \n[maxValue]\n\n\nformat\n or \nminValue\n or \nmaxValue\n\n\n\n\n\n\n\n\nwhere \ndigitInfo\n has the following format: \n{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}\n, and \nminValue\n and \nmaxValue\n attributes are optional:\n\n\n<input l10nValidateNumber=\"1.2-2\" [minValue]=\"0\" [maxValue]=\"1000\" name=\"decimal\" [(ngModel)]=\"decimal\">\n\n\n\n\nor, if you use variables:\n\n\n<input [l10nValidateNumber]=\"digits\" [minValue]=\"minValue\" [maxValue]=\"maxValue\" name=\"decimal\" [(ngModel)]=\"decimal\">\n\n\n\n\nThe number can be entered with or without the thousands separator.\n\n\n\n\nParsing a number\n\n\nWhen the number is valid, you can get its value by the \nparseNumber\n method of \nLocaleValidation\n:\n\n\nparsedValue: number = null;\n\nconstructor(private localeValidation: LocaleValidation) { }\n\nonSubmit(value: string): void {\n    this.parsedValue = this.localeValidation.parseNumber(value);\n}\n\n\n\n\n\n\nFormBuilder\n\n\nIf you use \nFormBuilder\n, you have to invoke the following function:\n\n\nl10nValidateNumber(digits: string, MIN_VALUE?: number, MAX_VALUE?: number): Function",
            "title": "Validation by locales"
        },
        {
            "location": "/spec/validation/#validation-by-locales",
            "text": "Import the modules you need in the application root module:  @NgModule({\n    imports: [\n        ...\n        LocalizationModule.forRoot(l10nConfig),\n        LocaleValidationModule.forRoot()\n    ],\n    declarations: [AppComponent],\n    bootstrap: [AppComponent]\n})\nexport class AppModule { }",
            "title": "Validation by locales"
        },
        {
            "location": "/spec/validation/#validating-a-number",
            "text": "Directive  Selectors      L10nNumberValidator  l10nValidateNumber        Directive  Validator  Options  Errors      L10nNumberValidator  l10nValidateNumber=[digitInfo]  [minValue]   [maxValue]  format  or  minValue  or  maxValue     where  digitInfo  has the following format:  {minIntegerDigits}.{minFractionDigits}-{maxFractionDigits} , and  minValue  and  maxValue  attributes are optional:  <input l10nValidateNumber=\"1.2-2\" [minValue]=\"0\" [maxValue]=\"1000\" name=\"decimal\" [(ngModel)]=\"decimal\">  or, if you use variables:  <input [l10nValidateNumber]=\"digits\" [minValue]=\"minValue\" [maxValue]=\"maxValue\" name=\"decimal\" [(ngModel)]=\"decimal\">  The number can be entered with or without the thousands separator.",
            "title": "Validating a number"
        },
        {
            "location": "/spec/validation/#parsing-a-number",
            "text": "When the number is valid, you can get its value by the  parseNumber  method of  LocaleValidation :  parsedValue: number = null;\n\nconstructor(private localeValidation: LocaleValidation) { }\n\nonSubmit(value: string): void {\n    this.parsedValue = this.localeValidation.parseNumber(value);\n}",
            "title": "Parsing a number"
        },
        {
            "location": "/spec/validation/#formbuilder",
            "text": "If you use  FormBuilder , you have to invoke the following function:  l10nValidateNumber(digits: string, MIN_VALUE?: number, MAX_VALUE?: number): Function",
            "title": "FormBuilder"
        },
        {
            "location": "/spec/collator/",
            "text": "Collator\n\n\n\n\n\n\nCollator\n class has the following methods for sorting and filtering a list by locales:\n\n\n\n\nsort(list: any[], keyName: any, order?: string, extension?: string, options?: any): any[]\n\n\nsortAsync(list: any[], keyName: any, order?: string, extension?: string, options?: any): Observable<any[]>\n\n\nsearch(s: string, list: any[], keyNames: any[], options?: any): any[]\n\n\nsearchAsync(s: string, list: any[], keyNames: any[], options?: any): Observable<any[]>\n\n\n\n\nThese methods use the \nIntl.Collator\n object, a constructor for collators, objects that enable language sensitive string comparison.\n\n\n\n\nOnly modern browsers support this API.",
            "title": "Collator"
        },
        {
            "location": "/spec/collator/#collator",
            "text": "Collator  class has the following methods for sorting and filtering a list by locales:   sort(list: any[], keyName: any, order?: string, extension?: string, options?: any): any[]  sortAsync(list: any[], keyName: any, order?: string, extension?: string, options?: any): Observable<any[]>  search(s: string, list: any[], keyNames: any[], options?: any): any[]  searchAsync(s: string, list: any[], keyNames: any[], options?: any): Observable<any[]>   These methods use the  Intl.Collator  object, a constructor for collators, objects that enable language sensitive string comparison.   Only modern browsers support this API.",
            "title": "Collator"
        },
        {
            "location": "/spec/testing/",
            "text": "Unit testing\n\n\n\n\n\n\nThere are several ways to test an app that implements this library. To provide the data, you could use:\n\n\n\n\na \nMockBackend\n\n\nreal services\n\n\nmock services\n\n\n\n\nDuring the configuration of \nJasmine\n, you could do something like this:\n\n\ndescribe('Component: HomeComponent', () => {\n\n    let fixture: ComponentFixture<HomeComponent>;\n    let comp: HomeComponent;\n\n    let l10nLoader: L10nLoader;\n\n    const l10nConfig: L10nConfig = {\n        locale: {\n            languages: [\n                { code: 'en', dir: 'ltr' }\n            ],\n            defaultLocale: { languageCode: 'en', countryCode: 'US' },\n            currency: 'USD',\n            storage: StorageStrategy.Disabled\n        },\n        translation: {\n            providers: [\n                // Karma serves files from 'base' relative path.\n                { type: ProviderType.Static, prefix: 'base/src/assets/locale-' }\n            ],\n            ...\n        }\n    };\n\n    beforeEach(async () => {\n        TestBed.configureTestingModule({\n            imports: [\n                ...\n                HttpClientModule,\n                LocalizationModule.forRoot(l10nConfig)\n            ],\n            declarations: [HomeComponent]\n        }).compileComponents();\n\n        fixture = TestBed.createComponent(HomeComponent);\n        comp = fixture.componentInstance;\n    });\n\n    beforeEach((done: any) => {\n        l10nLoader = TestBed.get(L10nLoader);\n        l10nLoader.load().then(() => done());\n    });\n\n    it('should render translated text', (() => {\n        fixture.detectChanges();\n\n        expect(...);\n    }));\n\n});\n\n\n\n\nIn this case the real services are injected, importing \nLocalizationModule.forRoot\n method.\n\n\nThe loading of configuration is in a dedicated \nbeforeEach\n, that will be released only when the \npromise\n of the \nload\n method of \nL10nLoader\n will be resolved.",
            "title": "Unit testing"
        },
        {
            "location": "/spec/testing/#unit-testing",
            "text": "There are several ways to test an app that implements this library. To provide the data, you could use:   a  MockBackend  real services  mock services   During the configuration of  Jasmine , you could do something like this:  describe('Component: HomeComponent', () => {\n\n    let fixture: ComponentFixture<HomeComponent>;\n    let comp: HomeComponent;\n\n    let l10nLoader: L10nLoader;\n\n    const l10nConfig: L10nConfig = {\n        locale: {\n            languages: [\n                { code: 'en', dir: 'ltr' }\n            ],\n            defaultLocale: { languageCode: 'en', countryCode: 'US' },\n            currency: 'USD',\n            storage: StorageStrategy.Disabled\n        },\n        translation: {\n            providers: [\n                // Karma serves files from 'base' relative path.\n                { type: ProviderType.Static, prefix: 'base/src/assets/locale-' }\n            ],\n            ...\n        }\n    };\n\n    beforeEach(async () => {\n        TestBed.configureTestingModule({\n            imports: [\n                ...\n                HttpClientModule,\n                LocalizationModule.forRoot(l10nConfig)\n            ],\n            declarations: [HomeComponent]\n        }).compileComponents();\n\n        fixture = TestBed.createComponent(HomeComponent);\n        comp = fixture.componentInstance;\n    });\n\n    beforeEach((done: any) => {\n        l10nLoader = TestBed.get(L10nLoader);\n        l10nLoader.load().then(() => done());\n    });\n\n    it('should render translated text', (() => {\n        fixture.detectChanges();\n\n        expect(...);\n    }));\n\n});  In this case the real services are injected, importing  LocalizationModule.forRoot  method.  The loading of configuration is in a dedicated  beforeEach , that will be released only when the  promise  of the  load  method of  L10nLoader  will be resolved.",
            "title": "Unit testing"
        },
        {
            "location": "/spec/api/",
            "text": "Services APIs\n\n\n\n\n\n\nTranslationModule\n\n\n\n\n\n\n\n\nMethod\n\n\nFunction\n\n\n\n\n\n\n\n\n\n\nstatic forRoot(l10nConfig: L10nConfig, token?: Token): ModuleWithProviders\n\n\nUse in \nAppModule\n: new instances of \nLocaleService\n & \nTranslationService\n\n\n\n\n\n\nstatic forChild(l10nConfig: L10nConfig, token?: Token): ModuleWithProviders\n\n\nUse in feature modules with lazy loading: new instance of \nTranslationService\n\n\n\n\n\n\n\n\n\n\n\n\nLocalizationModule\n\n\n\n\n\n\n\n\nMethod\n\n\nFunction\n\n\n\n\n\n\n\n\n\n\nstatic forRoot(l10nConfig: L10nConfig, token?: Token): ModuleWithProviders\n\n\nUse in \nAppModule\n: new instances of \nLocaleService\n & \nTranslationService\n\n\n\n\n\n\nstatic forChild(l10nConfig: L10nConfig, token?: Token): ModuleWithProviders\n\n\nUse in feature modules with lazy loading: new instance of \nTranslationService\n\n\n\n\n\n\n\n\n\n\n\n\nLocaleValidationModule\n\n\n\n\n\n\n\n\nMethod\n\n\nFunction\n\n\n\n\n\n\n\n\n\n\nstatic forRoot(): ModuleWithProviders\n\n\nUse in \nAppModule\n: new instance of \nLocaleValidation\n\n\n\n\n\n\n\n\n\n\n\n\nL10nLoader\n\n\n\n\n\n\n\n\nMethod\n\n\nFunction\n\n\n\n\n\n\n\n\n\n\nload(): Promise<void>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nILocaleService\n\n\n\n\n\n\n\n\nProperty\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nlanguageCodeChanged: EventEmitter<string>\n\n\n\n\n\n\n\n\ndefaultLocaleChanged: EventEmitter<string>\n\n\n\n\n\n\n\n\ncurrencyCodeChanged: EventEmitter<string>\n\n\n\n\n\n\n\n\ntimezoneChanged: EventEmitter<string>\n\n\n\n\n\n\n\n\nloadTranslation: Subject<any>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMethod\n\n\nFunction\n\n\n\n\n\n\n\n\n\n\ngetConfiguration(): LocaleConfig\n\n\n\n\n\n\n\n\ninit(): Promise<void>\n\n\n\n\n\n\n\n\ngetBrowserLanguage(): string | null\n\n\n\n\n\n\n\n\ngetAvailableLanguages(): string[]\n\n\n\n\n\n\n\n\ngetLanguageDirection(languageCode?: string): string\n\n\n\n\n\n\n\n\ngetCurrentLanguage(): string\n\n\n\n\n\n\n\n\ngetCurrentCountry(): string\n\n\n\n\n\n\n\n\ngetCurrentLocale(): string\n\n\n\n\n\n\n\n\ngetCurrentScript(): string\n\n\n\n\n\n\n\n\ngetCurrentNumberingSystem(): string\n\n\n\n\n\n\n\n\ngetCurrentCalendar(): string\n\n\n\n\n\n\n\n\ngetDefaultLocale(): string\n\n\n\n\n\n\n\n\ngetCurrentCurrency(): string\n\n\n\n\n\n\n\n\ngetCurrencySymbol(currencyDisplay?: 'code' | 'symbol' | 'name', defaultLocale?: string, currency?: string): string\n\n\n\n\n\n\n\n\ngetCurrentTimezone(): string\n\n\n\n\n\n\n\n\nsetCurrentLanguage(languageCode: string): void\n\n\n\n\n\n\n\n\nsetDefaultLocale(languageCode: string, countryCode?: string, scriptCode?: string, numberingSystem?: string, calendar?: string): void\n\n\n\n\n\n\n\n\nsetCurrentCurrency(currencyCode: string): void\n\n\n\n\n\n\n\n\nsetCurrentTimezone(zoneName: string): void\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nITranslationService\n\n\n\n\n\n\n\n\nProperty\n\n\nValue\n\n\n\n\n\n\n\n\n\n\ntranslationError: Subject<any>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMethod\n\n\nFunction\n\n\n\n\n\n\n\n\n\n\ngetConfiguration(): TranslationConfig\n\n\n\n\n\n\n\n\ninit(): Promise<void>\n\n\n\n\n\n\n\n\ntranslationChanged(): Observable<string>\n\n\nFired when the translation data has been loaded. Returns the translation language\n\n\n\n\n\n\ntranslate(keys: string | string[], args?: any, lang?: string): string | any\n\n\nTranslates a key or an array of keys\n\n\n\n\n\n\ntranslateAsync(keys: string | string[], args?: any, lang?: string): Observable<string | any>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTranslation\n\n\n\n\n\n\n\n\nProperty\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nlang: string\n\n\n\n\n\n\n\n\nprotected paramSubscriptions: ISubscription[]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMethod\n\n\nFunction\n\n\n\n\n\n\n\n\n\n\nprotected cancelParamSubscriptions(): void\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLocalization\n\n\n\n\n\n\n\n\nProperty\n\n\nValue\n\n\n\n\n\n\n\n\n\n\ndefaultLocale: string\n\n\n\n\n\n\n\n\ncurrency: string\n\n\n\n\n\n\n\n\ntimezone: string\n\n\n\n\n\n\n\n\nprotected paramSubscriptions: ISubscription[]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMethod\n\n\nFunction\n\n\n\n\n\n\n\n\n\n\nprotected cancelParamSubscriptions(): void\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nILocaleValidation\n\n\n\n\n\n\n\n\nMethod\n\n\nFunction\n\n\n\n\n\n\n\n\n\n\nparseNumber(s: string): number | null\n\n\nConverts a string to a number according to default locale\n\n\n\n\n\n\n\n\n\n\n\n\nICollator\n\n\n\n\n\n\n\n\nMethod\n\n\nFunction\n\n\n\n\n\n\n\n\n\n\ncompare(key1: string, key2: string, extension?: string, options?: any): number\n\n\nCompares two keys by the value of translation according to the current language\n\n\n\n\n\n\nsort(list: any[], keyName: any, order?: string, extension?: string, options?: any): any[]\n\n\nSorts an array of objects or an array of arrays according to the current language\n\n\n\n\n\n\nsortAsync(list: any[], keyName: any, order?: string, extension?: string, options?: any): Observable<any[]>\n\n\nSorts asynchronously an array of objects or an array of arrays according to the current language\n\n\n\n\n\n\nsearch(s: string, list: any[], keyNames: any[], options?: any): any[]\n\n\nMatches a string into an array of objects or an array of arrays according to the current language\n\n\n\n\n\n\nsearchAsync(s: string, list: any[], keyNames: any[], options?: any): Observable<any[]>\n\n\nMatches asynchronously a string into an array of objects or an array of arrays according to the current language\n\n\n\n\n\n\n\n\n\n\n\n\nIntlAPI\n\n\n\n\n\n\n\n\nMethod\n\n\nFunction\n\n\n\n\n\n\n\n\n\n\nstatic hasIntl(): boolean\n\n\n\n\n\n\n\n\nstatic hasDateTimeFormat(): boolean\n\n\n\n\n\n\n\n\nstatic hasTimezone(): boolean\n\n\n\n\n\n\n\n\nstatic hasNumberFormat(): boolean\n\n\n\n\n\n\n\n\nstatic hasCollator(): boolean\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLocaleStorage\n\n\n\n\n\n\n\n\nMethod\n\n\nFunction\n\n\n\n\n\n\n\n\n\n\nabstract read(name: string): Promise<string | null>\n\n\nThis method must contain the logic to read the storage\n\n\n\n\n\n\nabstract write(name: string, value: string): Promise<void>\n\n\nThis method must contain the logic to write the storage\n\n\n\n\n\n\n\n\n\n\n\n\nTranslationProvider\n\n\n\n\n\n\n\n\nMethod\n\n\nFunction\n\n\n\n\n\n\n\n\n\n\nabstract getTranslation(language: string, args: any): Observable<any>\n\n\nThis method must contain the logic of data access\n\n\n\n\n\n\n\n\n\n\n\n\nTranslationHandler\n\n\n\n\n\n\n\n\nMethod\n\n\nFunction\n\n\n\n\n\n\n\n\n\n\nabstract parseValue(path: string, key: string, value: string | null, args: any, lang: string): string\n\n\nThis method must contain the logic to parse the translated value",
            "title": "Services APIs"
        },
        {
            "location": "/spec/api/#services-apis",
            "text": "",
            "title": "Services APIs"
        },
        {
            "location": "/spec/api/#translationmodule",
            "text": "Method  Function      static forRoot(l10nConfig: L10nConfig, token?: Token): ModuleWithProviders  Use in  AppModule : new instances of  LocaleService  &  TranslationService    static forChild(l10nConfig: L10nConfig, token?: Token): ModuleWithProviders  Use in feature modules with lazy loading: new instance of  TranslationService",
            "title": "TranslationModule"
        },
        {
            "location": "/spec/api/#localizationmodule",
            "text": "Method  Function      static forRoot(l10nConfig: L10nConfig, token?: Token): ModuleWithProviders  Use in  AppModule : new instances of  LocaleService  &  TranslationService    static forChild(l10nConfig: L10nConfig, token?: Token): ModuleWithProviders  Use in feature modules with lazy loading: new instance of  TranslationService",
            "title": "LocalizationModule"
        },
        {
            "location": "/spec/api/#localevalidationmodule",
            "text": "Method  Function      static forRoot(): ModuleWithProviders  Use in  AppModule : new instance of  LocaleValidation",
            "title": "LocaleValidationModule"
        },
        {
            "location": "/spec/api/#l10nloader",
            "text": "Method  Function      load(): Promise<void>",
            "title": "L10nLoader"
        },
        {
            "location": "/spec/api/#ilocaleservice",
            "text": "Property  Value      languageCodeChanged: EventEmitter<string>     defaultLocaleChanged: EventEmitter<string>     currencyCodeChanged: EventEmitter<string>     timezoneChanged: EventEmitter<string>     loadTranslation: Subject<any>         Method  Function      getConfiguration(): LocaleConfig     init(): Promise<void>     getBrowserLanguage(): string | null     getAvailableLanguages(): string[]     getLanguageDirection(languageCode?: string): string     getCurrentLanguage(): string     getCurrentCountry(): string     getCurrentLocale(): string     getCurrentScript(): string     getCurrentNumberingSystem(): string     getCurrentCalendar(): string     getDefaultLocale(): string     getCurrentCurrency(): string     getCurrencySymbol(currencyDisplay?: 'code' | 'symbol' | 'name', defaultLocale?: string, currency?: string): string     getCurrentTimezone(): string     setCurrentLanguage(languageCode: string): void     setDefaultLocale(languageCode: string, countryCode?: string, scriptCode?: string, numberingSystem?: string, calendar?: string): void     setCurrentCurrency(currencyCode: string): void     setCurrentTimezone(zoneName: string): void",
            "title": "ILocaleService"
        },
        {
            "location": "/spec/api/#itranslationservice",
            "text": "Property  Value      translationError: Subject<any>         Method  Function      getConfiguration(): TranslationConfig     init(): Promise<void>     translationChanged(): Observable<string>  Fired when the translation data has been loaded. Returns the translation language    translate(keys: string | string[], args?: any, lang?: string): string | any  Translates a key or an array of keys    translateAsync(keys: string | string[], args?: any, lang?: string): Observable<string | any>",
            "title": "ITranslationService"
        },
        {
            "location": "/spec/api/#translation",
            "text": "Property  Value      lang: string     protected paramSubscriptions: ISubscription[]         Method  Function      protected cancelParamSubscriptions(): void",
            "title": "Translation"
        },
        {
            "location": "/spec/api/#localization",
            "text": "Property  Value      defaultLocale: string     currency: string     timezone: string     protected paramSubscriptions: ISubscription[]         Method  Function      protected cancelParamSubscriptions(): void",
            "title": "Localization"
        },
        {
            "location": "/spec/api/#ilocalevalidation",
            "text": "Method  Function      parseNumber(s: string): number | null  Converts a string to a number according to default locale",
            "title": "ILocaleValidation"
        },
        {
            "location": "/spec/api/#icollator",
            "text": "Method  Function      compare(key1: string, key2: string, extension?: string, options?: any): number  Compares two keys by the value of translation according to the current language    sort(list: any[], keyName: any, order?: string, extension?: string, options?: any): any[]  Sorts an array of objects or an array of arrays according to the current language    sortAsync(list: any[], keyName: any, order?: string, extension?: string, options?: any): Observable<any[]>  Sorts asynchronously an array of objects or an array of arrays according to the current language    search(s: string, list: any[], keyNames: any[], options?: any): any[]  Matches a string into an array of objects or an array of arrays according to the current language    searchAsync(s: string, list: any[], keyNames: any[], options?: any): Observable<any[]>  Matches asynchronously a string into an array of objects or an array of arrays according to the current language",
            "title": "ICollator"
        },
        {
            "location": "/spec/api/#intlapi",
            "text": "Method  Function      static hasIntl(): boolean     static hasDateTimeFormat(): boolean     static hasTimezone(): boolean     static hasNumberFormat(): boolean     static hasCollator(): boolean",
            "title": "IntlAPI"
        },
        {
            "location": "/spec/api/#localestorage",
            "text": "Method  Function      abstract read(name: string): Promise<string | null>  This method must contain the logic to read the storage    abstract write(name: string, value: string): Promise<void>  This method must contain the logic to write the storage",
            "title": "LocaleStorage"
        },
        {
            "location": "/spec/api/#translationprovider",
            "text": "Method  Function      abstract getTranslation(language: string, args: any): Observable<any>  This method must contain the logic of data access",
            "title": "TranslationProvider"
        },
        {
            "location": "/spec/api/#translationhandler",
            "text": "Method  Function      abstract parseValue(path: string, key: string, value: string | null, args: any, lang: string): string  This method must contain the logic to parse the translated value",
            "title": "TranslationHandler"
        }
    ]
}